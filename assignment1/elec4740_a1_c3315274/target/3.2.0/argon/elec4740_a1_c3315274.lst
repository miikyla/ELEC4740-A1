
c:/Users/Mikyla/Documents/GitHub/ELEC4740-A1/assignment1/elec4740_a1_c3315274/target/3.2.0/argon/elec4740_a1_c3315274.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004284  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b82a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e170  000b82a4  0001e170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000610  2003e1e0  2003e1e0  0002e1e0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b8314  000b8314  00028314  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b833c  000b833c  0002833c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ebf12  00000000  00000000  00028340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000e2d2  00000000  00000000  00114252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00031a11  00000000  00000000  00122524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000026c8  00000000  00000000  00153f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009490  00000000  00000000  001565fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00030fd7  00000000  00000000  0015fa8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002f4c3  00000000  00000000  00190a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001229c3  00000000  00000000  001bff27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00006f80  00000000  00000000  002e28ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fd37 	bl	b7aa0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fd59 	bl	b7af0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e170 	.word	0x2003e170
   b4048:	000b82a4 	.word	0x000b82a4
   b404c:	2003e1e0 	.word	0x2003e1e0
   b4050:	2003e1e0 	.word	0x2003e1e0
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 f947 	bl	b72f0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8278 	.word	0x000b8278
   b407c:	000b829c 	.word	0x000b829c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b850 	b.w	b4124 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f86d 	bl	b4164 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 b8e7 	b.w	b7260 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bbb5 	b.w	b4800 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bbb3 	b.w	b4800 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bbb9 	b.w	b4810 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b40ae:	b570      	push	{r4, r5, r6, lr}
   b40b0:	680b      	ldr	r3, [r1, #0]
   b40b2:	6003      	str	r3, [r0, #0]
   b40b4:	684e      	ldr	r6, [r1, #4]
	if (__tmp != _M_pi)
   b40b6:	6843      	ldr	r3, [r0, #4]
   b40b8:	429e      	cmp	r6, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b40ba:	4605      	mov	r5, r0
	if (__tmp != _M_pi)
   b40bc:	d016      	beq.n	b40ec <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_.isra.0+0x3e>
	    if (__tmp != 0)
   b40be:	b116      	cbz	r6, b40c6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_.isra.0+0x18>
    { ++_M_use_count; }
   b40c0:	6873      	ldr	r3, [r6, #4]
   b40c2:	3301      	adds	r3, #1
   b40c4:	6073      	str	r3, [r6, #4]
	    if (_M_pi != 0)
   b40c6:	686c      	ldr	r4, [r5, #4]
   b40c8:	b17c      	cbz	r4, b40ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_.isra.0+0x3c>
      if (--_M_use_count == 0)
   b40ca:	6863      	ldr	r3, [r4, #4]
   b40cc:	3b01      	subs	r3, #1
   b40ce:	6063      	str	r3, [r4, #4]
   b40d0:	b95b      	cbnz	r3, b40ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_.isra.0+0x3c>
          _M_dispose();
   b40d2:	6823      	ldr	r3, [r4, #0]
   b40d4:	4620      	mov	r0, r4
   b40d6:	689b      	ldr	r3, [r3, #8]
   b40d8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b40da:	68a3      	ldr	r3, [r4, #8]
   b40dc:	3b01      	subs	r3, #1
   b40de:	60a3      	str	r3, [r4, #8]
   b40e0:	b91b      	cbnz	r3, b40ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_.isra.0+0x3c>
            _M_destroy();
   b40e2:	6823      	ldr	r3, [r4, #0]
   b40e4:	4620      	mov	r0, r4
   b40e6:	68db      	ldr	r3, [r3, #12]
   b40e8:	4798      	blx	r3
	    _M_pi = __tmp;
   b40ea:	606e      	str	r6, [r5, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b40ec:	bd70      	pop	{r4, r5, r6, pc}

000b40ee <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ee:	b40e      	push	{r1, r2, r3}
   b40f0:	b503      	push	{r0, r1, lr}
   b40f2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40f4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40fa:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40fc:	f003 f81b 	bl	b7136 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4100:	b002      	add	sp, #8
   b4102:	f85d eb04 	ldr.w	lr, [sp], #4
   b4106:	b003      	add	sp, #12
   b4108:	4770      	bx	lr
	...

000b410c <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
uint16_t led_off = 0x00;
uint16_t timer = 10000;

// BLUETOOTH DATA

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b410c:	b510      	push	{r4, lr}
   b410e:	4604      	mov	r4, r0
    Serial.printf("%d \n", data[0]);
   b4110:	f003 f9f6 	bl	b7500 <_Z16_fetch_usbserialv>
   b4114:	7822      	ldrb	r2, [r4, #0]
   b4116:	4902      	ldr	r1, [pc, #8]	; (b4120 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   b4118:	f7ff ffe9 	bl	b40ee <_ZN5Print6printfEPKcz>
}
   b411c:	bd10      	pop	{r4, pc}
   b411e:	bf00      	nop
   b4120:	000b7c88 	.word	0x000b7c88

000b4124 <setup>:

void setup() {
   b4124:	b508      	push	{r3, lr}
    Serial.begin();
   b4126:	f003 f9eb 	bl	b7500 <_Z16_fetch_usbserialv>
   b412a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b412e:	f003 f9db 	bl	b74e8 <_ZN9USBSerial5beginEl>
	BLE.on();
   b4132:	f001 f9f7 	bl	b5524 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4136:	f001 fa3f 	bl	b55b8 <_ZNK8particle14BleLocalDevice2onEv>

    RGB.control(true);
   b413a:	2001      	movs	r0, #1
   b413c:	f003 f844 	bl	b71c8 <_ZN8RGBClass7controlEb>

    sn1RedCharacteristic.onDataReceived(onDataReceived, &sn1RedCharacteristic);
   b4140:	4a05      	ldr	r2, [pc, #20]	; (b4158 <setup+0x34>)
   b4142:	4906      	ldr	r1, [pc, #24]	; (b415c <setup+0x38>)
   b4144:	4610      	mov	r0, r2
   b4146:	f002 fa1b 	bl	b6580 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    sn2RedCharacteristic.onDataReceived(onDataReceived, &sn2RedCharacteristic);
   b414a:	4a05      	ldr	r2, [pc, #20]	; (b4160 <setup+0x3c>)
   b414c:	4903      	ldr	r1, [pc, #12]	; (b415c <setup+0x38>)
}
   b414e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sn2RedCharacteristic.onDataReceived(onDataReceived, &sn2RedCharacteristic);
   b4152:	4610      	mov	r0, r2
   b4154:	f002 ba14 	b.w	b6580 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   b4158:	2003e6ac 	.word	0x2003e6ac
   b415c:	000b410d 	.word	0x000b410d
   b4160:	2003e6c4 	.word	0x2003e6c4

000b4164 <loop>:

void loop() {
   b4164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4168:	b08a      	sub	sp, #40	; 0x28
    if (BLE.connected()) {
   b416a:	f001 f9db 	bl	b5524 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b416e:	f001 fa69 	bl	b5644 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4172:	4604      	mov	r4, r0
   b4174:	b340      	cbz	r0, b41c8 <loop+0x64>
        if (timer > 0)
   b4176:	4b53      	ldr	r3, [pc, #332]	; (b42c4 <loop+0x160>)
   b4178:	881c      	ldrh	r4, [r3, #0]
   b417a:	b124      	cbz	r4, b4186 <loop+0x22>
        {
            timer--;
   b417c:	3c01      	subs	r4, #1
   b417e:	801c      	strh	r4, [r3, #0]
				}
			}
    	}

    }
}
   b4180:	b00a      	add	sp, #40	; 0x28
   b4182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (led_state)
   b4186:	4d50      	ldr	r5, [pc, #320]	; (b42c8 <loop+0x164>)
            timer = 10000;
   b4188:	f242 7210 	movw	r2, #10000	; 0x2710
   b418c:	801a      	strh	r2, [r3, #0]
            if (led_state)
   b418e:	782b      	ldrb	r3, [r5, #0]
   b4190:	b183      	cbz	r3, b41b4 <loop+0x50>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b4192:	494e      	ldr	r1, [pc, #312]	; (b42cc <loop+0x168>)
   b4194:	484e      	ldr	r0, [pc, #312]	; (b42d0 <loop+0x16c>)
   b4196:	4623      	mov	r3, r4
   b4198:	2202      	movs	r2, #2
   b419a:	f001 f863 	bl	b5264 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b419e:	494b      	ldr	r1, [pc, #300]	; (b42cc <loop+0x168>)
   b41a0:	4623      	mov	r3, r4
   b41a2:	2202      	movs	r2, #2
   b41a4:	484b      	ldr	r0, [pc, #300]	; (b42d4 <loop+0x170>)
   b41a6:	f001 f85d 	bl	b5264 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            led_state = !led_state;
   b41aa:	782b      	ldrb	r3, [r5, #0]
   b41ac:	f083 0301 	eor.w	r3, r3, #1
   b41b0:	702b      	strb	r3, [r5, #0]
   b41b2:	e7e5      	b.n	b4180 <loop+0x1c>
   b41b4:	4948      	ldr	r1, [pc, #288]	; (b42d8 <loop+0x174>)
   b41b6:	4846      	ldr	r0, [pc, #280]	; (b42d0 <loop+0x16c>)
   b41b8:	9301      	str	r3, [sp, #4]
   b41ba:	2202      	movs	r2, #2
   b41bc:	f001 f852 	bl	b5264 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b41c0:	9b01      	ldr	r3, [sp, #4]
   b41c2:	4945      	ldr	r1, [pc, #276]	; (b42d8 <loop+0x174>)
   b41c4:	2202      	movs	r2, #2
   b41c6:	e7ed      	b.n	b41a4 <loop+0x40>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b41c8:	4d44      	ldr	r5, [pc, #272]	; (b42dc <loop+0x178>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41ca:	f000 f933 	bl	b4434 <HAL_Timer_Get_Milli_Seconds>
   b41ce:	682b      	ldr	r3, [r5, #0]
   b41d0:	1ac0      	subs	r0, r0, r3
   b41d2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b41d6:	d3d3      	bcc.n	b4180 <loop+0x1c>
   b41d8:	f000 f92c 	bl	b4434 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b41dc:	6028      	str	r0, [r5, #0]
    		size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b41de:	f001 f9a1 	bl	b5524 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41e2:	493f      	ldr	r1, [pc, #252]	; (b42e0 <loop+0x17c>)
   b41e4:	2214      	movs	r2, #20
   b41e6:	f001 fa77 	bl	b56d8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
			if (count > 0) {
   b41ea:	4606      	mov	r6, r0
   b41ec:	2800      	cmp	r0, #0
   b41ee:	d0c7      	beq.n	b4180 <loop+0x1c>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b41f0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b42e0 <loop+0x17c>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b41f4:	4f3b      	ldr	r7, [pc, #236]	; (b42e4 <loop+0x180>)
					BleUuid foundServiceUuid;
   b41f6:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
   b41fa:	a805      	add	r0, sp, #20
   b41fc:	00ad      	lsls	r5, r5, #2
   b41fe:	f000 fe01 	bl	b4e04 <_ZN8particle7BleUuidC1Ev>
   b4202:	f105 0008 	add.w	r0, r5, #8
					size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b4206:	2201      	movs	r2, #1
   b4208:	a905      	add	r1, sp, #20
   b420a:	4440      	add	r0, r8
   b420c:	f002 f8c2 	bl	b6394 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
					if (svcCount > 0 && foundServiceUuid == sn1ServiceUuid) {
   b4210:	2800      	cmp	r0, #0
   b4212:	d03c      	beq.n	b428e <loop+0x12a>
   b4214:	4934      	ldr	r1, [pc, #208]	; (b42e8 <loop+0x184>)
   b4216:	a805      	add	r0, sp, #20
   b4218:	f000 fe4f 	bl	b4eba <_ZNK8particle7BleUuideqERKS0_>
   b421c:	b310      	cbz	r0, b4264 <loop+0x100>
						sn1Peer = BLE.connect(scanResults[ii].address());
   b421e:	f001 f981 	bl	b5524 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4222:	2301      	movs	r3, #1
   b4224:	4601      	mov	r1, r0
   b4226:	eb08 0205 	add.w	r2, r8, r5
   b422a:	a803      	add	r0, sp, #12
   b422c:	f002 fcea 	bl	b6c04 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b4230:	482e      	ldr	r0, [pc, #184]	; (b42ec <loop+0x188>)
   b4232:	a903      	add	r1, sp, #12
   b4234:	f7ff ff3b 	bl	b40ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_.isra.0>
   b4238:	a803      	add	r0, sp, #12
   b423a:	f001 fac4 	bl	b57c6 <_ZN8particle13BlePeerDeviceD1Ev>
						if (sn1Peer.connected()) {
   b423e:	482b      	ldr	r0, [pc, #172]	; (b42ec <loop+0x188>)
   b4240:	f001 f8e8 	bl	b5414 <_ZNK8particle13BlePeerDevice9connectedEv>
   b4244:	b170      	cbz	r0, b4264 <loop+0x100>
							sn1Peer.getCharacteristicByUUID(sn1RedCharacteristic, sn1RedUuid);
   b4246:	4a2a      	ldr	r2, [pc, #168]	; (b42f0 <loop+0x18c>)
   b4248:	492a      	ldr	r1, [pc, #168]	; (b42f4 <loop+0x190>)
   b424a:	4828      	ldr	r0, [pc, #160]	; (b42ec <loop+0x188>)
   b424c:	f002 f96e 	bl	b652c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
							sn1Peer.getCharacteristicByUUID(sn1StatusCharacteristic, sn1StatusUuid);
   b4250:	4a29      	ldr	r2, [pc, #164]	; (b42f8 <loop+0x194>)
   b4252:	491f      	ldr	r1, [pc, #124]	; (b42d0 <loop+0x16c>)
   b4254:	4825      	ldr	r0, [pc, #148]	; (b42ec <loop+0x188>)
   b4256:	f002 f969 	bl	b652c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                            RGB.color(0xFF, 0x00, 0x00);
   b425a:	2200      	movs	r2, #0
   b425c:	4611      	mov	r1, r2
   b425e:	20ff      	movs	r0, #255	; 0xff
   b4260:	f002 ffc2 	bl	b71e8 <_ZN8RGBClass5colorEiii>
                    if (svcCount > 0 && foundServiceUuid == sn2ServiceUuid)
   b4264:	4925      	ldr	r1, [pc, #148]	; (b42fc <loop+0x198>)
   b4266:	a805      	add	r0, sp, #20
   b4268:	f000 fe27 	bl	b4eba <_ZNK8particle7BleUuideqERKS0_>
   b426c:	b178      	cbz	r0, b428e <loop+0x12a>
                        sn2Peer = BLE.connect(scanResults[ii].address());
   b426e:	f001 f959 	bl	b5524 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4272:	2301      	movs	r3, #1
   b4274:	4601      	mov	r1, r0
   b4276:	eb08 0205 	add.w	r2, r8, r5
   b427a:	a803      	add	r0, sp, #12
   b427c:	f002 fcc2 	bl	b6c04 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b4280:	4638      	mov	r0, r7
   b4282:	a903      	add	r1, sp, #12
   b4284:	f7ff ff13 	bl	b40ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_.isra.0>
   b4288:	a803      	add	r0, sp, #12
   b428a:	f001 fa9c 	bl	b57c6 <_ZN8particle13BlePeerDeviceD1Ev>
						if (sn2Peer.connected()) {
   b428e:	4638      	mov	r0, r7
   b4290:	f001 f8c0 	bl	b5414 <_ZNK8particle13BlePeerDevice9connectedEv>
   b4294:	4601      	mov	r1, r0
   b4296:	b198      	cbz	r0, b42c0 <loop+0x15c>
                            sn2Peer.getCharacteristicByUUID(sn2RedCharacteristic, sn2RedUuid);
   b4298:	4a19      	ldr	r2, [pc, #100]	; (b4300 <loop+0x19c>)
   b429a:	491a      	ldr	r1, [pc, #104]	; (b4304 <loop+0x1a0>)
   b429c:	4638      	mov	r0, r7
   b429e:	f002 f945 	bl	b652c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
							sn2Peer.getCharacteristicByUUID(sn2StatusCharacteristic, sn2StatusUuid);
   b42a2:	4a19      	ldr	r2, [pc, #100]	; (b4308 <loop+0x1a4>)
   b42a4:	490b      	ldr	r1, [pc, #44]	; (b42d4 <loop+0x170>)
   b42a6:	4638      	mov	r0, r7
   b42a8:	f002 f940 	bl	b652c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                            RGB.color(0x00, 0xFF, 0x00);
   b42ac:	2200      	movs	r2, #0
   b42ae:	21ff      	movs	r1, #255	; 0xff
   b42b0:	4610      	mov	r0, r2
				for (uint8_t ii = 0; ii < count; ii++) {
   b42b2:	3401      	adds	r4, #1
   b42b4:	b2e4      	uxtb	r4, r4
                        RGB.color(0x00, 0x00, 0xFF);
   b42b6:	f002 ff97 	bl	b71e8 <_ZN8RGBClass5colorEiii>
				for (uint8_t ii = 0; ii < count; ii++) {
   b42ba:	42b4      	cmp	r4, r6
   b42bc:	d39b      	bcc.n	b41f6 <loop+0x92>
   b42be:	e75f      	b.n	b4180 <loop+0x1c>
                        RGB.color(0x00, 0x00, 0xFF);
   b42c0:	22ff      	movs	r2, #255	; 0xff
   b42c2:	e7f6      	b.n	b42b2 <loop+0x14e>
   b42c4:	2003e172 	.word	0x2003e172
   b42c8:	2003e26a 	.word	0x2003e26a
   b42cc:	2003e170 	.word	0x2003e170
   b42d0:	2003e6b4 	.word	0x2003e6b4
   b42d4:	2003e6cc 	.word	0x2003e6cc
   b42d8:	2003e268 	.word	0x2003e268
   b42dc:	2003e264 	.word	0x2003e264
   b42e0:	2003e26c 	.word	0x2003e26c
   b42e4:	2003e6bc 	.word	0x2003e6bc
   b42e8:	2003e23c 	.word	0x2003e23c
   b42ec:	2003e6a4 	.word	0x2003e6a4
   b42f0:	2003e1ec 	.word	0x2003e1ec
   b42f4:	2003e6ac 	.word	0x2003e6ac
   b42f8:	2003e214 	.word	0x2003e214
   b42fc:	2003e250 	.word	0x2003e250
   b4300:	2003e200 	.word	0x2003e200
   b4304:	2003e6c4 	.word	0x2003e6c4
   b4308:	2003e228 	.word	0x2003e228

000b430c <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b430c:	4b25      	ldr	r3, [pc, #148]	; (b43a4 <_GLOBAL__sub_I_SystemMode+0x98>)
   b430e:	2200      	movs	r2, #0
}
   b4310:	b570      	push	{r4, r5, r6, lr}
   b4312:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4316:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b431a:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b431c:	2003      	movs	r0, #3
   b431e:	f000 f9eb 	bl	b46f8 <set_system_mode>
BleScanResult scanResults[SCAN_RESULT_MAX];
   b4322:	4c21      	ldr	r4, [pc, #132]	; (b43a8 <_GLOBAL__sub_I_SystemMode+0x9c>)
   b4324:	251e      	movs	r5, #30
            : rssi_(BLE_RSSI_INVALID) {
   b4326:	267f      	movs	r6, #127	; 0x7f
   b4328:	4620      	mov	r0, r4
   b432a:	f000 fd60 	bl	b4dee <_ZN8particle10BleAddressC1Ev>
   b432e:	f104 0008 	add.w	r0, r4, #8
   b4332:	f001 fd5e 	bl	b5df2 <_ZN8particle18BleAdvertisingDataC1Ev>
   b4336:	f104 0014 	add.w	r0, r4, #20
   b433a:	f001 fd5a 	bl	b5df2 <_ZN8particle18BleAdvertisingDataC1Ev>
   b433e:	3d01      	subs	r5, #1
   b4340:	f884 6020 	strb.w	r6, [r4, #32]
   b4344:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b4348:	d1ee      	bne.n	b4328 <_GLOBAL__sub_I_SystemMode+0x1c>
BleCharacteristic sn1RedCharacteristic;
   b434a:	4818      	ldr	r0, [pc, #96]	; (b43ac <_GLOBAL__sub_I_SystemMode+0xa0>)
   b434c:	f000 ff64 	bl	b5218 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic sn1StatusCharacteristic;
   b4350:	4817      	ldr	r0, [pc, #92]	; (b43b0 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b4352:	f000 ff61 	bl	b5218 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice sn1Peer;
   b4356:	4817      	ldr	r0, [pc, #92]	; (b43b4 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b4358:	f001 f83a 	bl	b53d0 <_ZN8particle13BlePeerDeviceC1Ev>
const BleUuid sn1ServiceUuid("b4250400-fb4b-4746-b2b0-93f0e61122c6");
   b435c:	4916      	ldr	r1, [pc, #88]	; (b43b8 <_GLOBAL__sub_I_SystemMode+0xac>)
   b435e:	4817      	ldr	r0, [pc, #92]	; (b43bc <_GLOBAL__sub_I_SystemMode+0xb0>)
   b4360:	f000 fe2a 	bl	b4fb8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid sn1RedUuid("b4250401-fb4b-4746-b2b0-93f0e61122c6");
   b4364:	4916      	ldr	r1, [pc, #88]	; (b43c0 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b4366:	4817      	ldr	r0, [pc, #92]	; (b43c4 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b4368:	f000 fe26 	bl	b4fb8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid sn1StatusUuid("b4250404-fb4b-4746-b2b0-93f0e61122c6");
   b436c:	4916      	ldr	r1, [pc, #88]	; (b43c8 <_GLOBAL__sub_I_SystemMode+0xbc>)
   b436e:	4817      	ldr	r0, [pc, #92]	; (b43cc <_GLOBAL__sub_I_SystemMode+0xc0>)
   b4370:	f000 fe22 	bl	b4fb8 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic sn2RedCharacteristic;
   b4374:	4816      	ldr	r0, [pc, #88]	; (b43d0 <_GLOBAL__sub_I_SystemMode+0xc4>)
   b4376:	f000 ff4f 	bl	b5218 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic sn2StatusCharacteristic;
   b437a:	4816      	ldr	r0, [pc, #88]	; (b43d4 <_GLOBAL__sub_I_SystemMode+0xc8>)
   b437c:	f000 ff4c 	bl	b5218 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice sn2Peer;
   b4380:	4815      	ldr	r0, [pc, #84]	; (b43d8 <_GLOBAL__sub_I_SystemMode+0xcc>)
   b4382:	f001 f825 	bl	b53d0 <_ZN8particle13BlePeerDeviceC1Ev>
const BleUuid sn2ServiceUuid("b4250500-fb4b-4746-b2b0-93f0e61122c6");
   b4386:	4915      	ldr	r1, [pc, #84]	; (b43dc <_GLOBAL__sub_I_SystemMode+0xd0>)
   b4388:	4815      	ldr	r0, [pc, #84]	; (b43e0 <_GLOBAL__sub_I_SystemMode+0xd4>)
   b438a:	f000 fe15 	bl	b4fb8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid sn2RedUuid("b4250501-fb4b-4746-b2b0-93f0e61122c6");
   b438e:	4915      	ldr	r1, [pc, #84]	; (b43e4 <_GLOBAL__sub_I_SystemMode+0xd8>)
   b4390:	4815      	ldr	r0, [pc, #84]	; (b43e8 <_GLOBAL__sub_I_SystemMode+0xdc>)
   b4392:	f000 fe11 	bl	b4fb8 <_ZN8particle7BleUuidC1EPKc>
}
   b4396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
const BleUuid sn2StatusUuid("b4250504-fb4b-4746-b2b0-93f0e61122c6");
   b439a:	4914      	ldr	r1, [pc, #80]	; (b43ec <_GLOBAL__sub_I_SystemMode+0xe0>)
   b439c:	4814      	ldr	r0, [pc, #80]	; (b43f0 <_GLOBAL__sub_I_SystemMode+0xe4>)
   b439e:	f000 be0b 	b.w	b4fb8 <_ZN8particle7BleUuidC1EPKc>
   b43a2:	bf00      	nop
   b43a4:	2003e1e0 	.word	0x2003e1e0
   b43a8:	2003e26c 	.word	0x2003e26c
   b43ac:	2003e6ac 	.word	0x2003e6ac
   b43b0:	2003e6b4 	.word	0x2003e6b4
   b43b4:	2003e6a4 	.word	0x2003e6a4
   b43b8:	000b7c8d 	.word	0x000b7c8d
   b43bc:	2003e23c 	.word	0x2003e23c
   b43c0:	000b7cb2 	.word	0x000b7cb2
   b43c4:	2003e1ec 	.word	0x2003e1ec
   b43c8:	000b7cd7 	.word	0x000b7cd7
   b43cc:	2003e214 	.word	0x2003e214
   b43d0:	2003e6c4 	.word	0x2003e6c4
   b43d4:	2003e6cc 	.word	0x2003e6cc
   b43d8:	2003e6bc 	.word	0x2003e6bc
   b43dc:	000b7cfc 	.word	0x000b7cfc
   b43e0:	2003e250 	.word	0x2003e250
   b43e4:	000b7d21 	.word	0x000b7d21
   b43e8:	2003e200 	.word	0x2003e200
   b43ec:	000b7d46 	.word	0x000b7d46
   b43f0:	2003e228 	.word	0x2003e228

000b43f4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b43f4:	b508      	push	{r3, lr}
   b43f6:	4b02      	ldr	r3, [pc, #8]	; (b4400 <netdb_freeaddrinfo+0xc>)
   b43f8:	681b      	ldr	r3, [r3, #0]
   b43fa:	689b      	ldr	r3, [r3, #8]
   b43fc:	9301      	str	r3, [sp, #4]
   b43fe:	bd08      	pop	{r3, pc}
   b4400:	00030268 	.word	0x00030268

000b4404 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4404:	b508      	push	{r3, lr}
   b4406:	4b02      	ldr	r3, [pc, #8]	; (b4410 <netdb_getaddrinfo+0xc>)
   b4408:	681b      	ldr	r3, [r3, #0]
   b440a:	68db      	ldr	r3, [r3, #12]
   b440c:	9301      	str	r3, [sp, #4]
   b440e:	bd08      	pop	{r3, pc}
   b4410:	00030268 	.word	0x00030268

000b4414 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4414:	b508      	push	{r3, lr}
   b4416:	4b02      	ldr	r3, [pc, #8]	; (b4420 <HAL_RNG_GetRandomNumber+0xc>)
   b4418:	681b      	ldr	r3, [r3, #0]
   b441a:	685b      	ldr	r3, [r3, #4]
   b441c:	9301      	str	r3, [sp, #4]
   b441e:	bd08      	pop	{r3, pc}
   b4420:	00030218 	.word	0x00030218

000b4424 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4424:	b508      	push	{r3, lr}
   b4426:	4b02      	ldr	r3, [pc, #8]	; (b4430 <HAL_Delay_Microseconds+0xc>)
   b4428:	681b      	ldr	r3, [r3, #0]
   b442a:	68db      	ldr	r3, [r3, #12]
   b442c:	9301      	str	r3, [sp, #4]
   b442e:	bd08      	pop	{r3, pc}
   b4430:	00030218 	.word	0x00030218

000b4434 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4434:	b508      	push	{r3, lr}
   b4436:	4b02      	ldr	r3, [pc, #8]	; (b4440 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4438:	681b      	ldr	r3, [r3, #0]
   b443a:	695b      	ldr	r3, [r3, #20]
   b443c:	9301      	str	r3, [sp, #4]
   b443e:	bd08      	pop	{r3, pc}
   b4440:	00030218 	.word	0x00030218

000b4444 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4444:	b508      	push	{r3, lr}
   b4446:	4b02      	ldr	r3, [pc, #8]	; (b4450 <hal_ble_stack_init+0xc>)
   b4448:	681b      	ldr	r3, [r3, #0]
   b444a:	689b      	ldr	r3, [r3, #8]
   b444c:	9301      	str	r3, [sp, #4]
   b444e:	bd08      	pop	{r3, pc}
   b4450:	00030278 	.word	0x00030278

000b4454 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b4454:	b508      	push	{r3, lr}
   b4456:	4b02      	ldr	r3, [pc, #8]	; (b4460 <hal_ble_gap_start_scan+0xc>)
   b4458:	681b      	ldr	r3, [r3, #0]
   b445a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b445c:	9301      	str	r3, [sp, #4]
   b445e:	bd08      	pop	{r3, pc}
   b4460:	00030278 	.word	0x00030278

000b4464 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b4464:	b508      	push	{r3, lr}
   b4466:	4b03      	ldr	r3, [pc, #12]	; (b4474 <hal_ble_gap_stop_scan+0x10>)
   b4468:	681b      	ldr	r3, [r3, #0]
   b446a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b446e:	9301      	str	r3, [sp, #4]
   b4470:	bd08      	pop	{r3, pc}
   b4472:	0000      	.short	0x0000
   b4474:	00030278 	.word	0x00030278

000b4478 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4478:	b508      	push	{r3, lr}
   b447a:	4b03      	ldr	r3, [pc, #12]	; (b4488 <hal_ble_gap_disconnect+0x10>)
   b447c:	681b      	ldr	r3, [r3, #0]
   b447e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b4482:	9301      	str	r3, [sp, #4]
   b4484:	bd08      	pop	{r3, pc}
   b4486:	0000      	.short	0x0000
   b4488:	00030278 	.word	0x00030278

000b448c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b448c:	b508      	push	{r3, lr}
   b448e:	4b03      	ldr	r3, [pc, #12]	; (b449c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b4490:	681b      	ldr	r3, [r3, #0]
   b4492:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b4496:	9301      	str	r3, [sp, #4]
   b4498:	bd08      	pop	{r3, pc}
   b449a:	0000      	.short	0x0000
   b449c:	00030278 	.word	0x00030278

000b44a0 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b44a0:	b508      	push	{r3, lr}
   b44a2:	4b03      	ldr	r3, [pc, #12]	; (b44b0 <hal_ble_gatt_client_discover_all_services+0x10>)
   b44a4:	681b      	ldr	r3, [r3, #0]
   b44a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b44aa:	9301      	str	r3, [sp, #4]
   b44ac:	bd08      	pop	{r3, pc}
   b44ae:	0000      	.short	0x0000
   b44b0:	00030278 	.word	0x00030278

000b44b4 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b44b4:	b508      	push	{r3, lr}
   b44b6:	4b03      	ldr	r3, [pc, #12]	; (b44c4 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b44b8:	681b      	ldr	r3, [r3, #0]
   b44ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b44be:	9301      	str	r3, [sp, #4]
   b44c0:	bd08      	pop	{r3, pc}
   b44c2:	0000      	.short	0x0000
   b44c4:	00030278 	.word	0x00030278

000b44c8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b44c8:	b508      	push	{r3, lr}
   b44ca:	4b03      	ldr	r3, [pc, #12]	; (b44d8 <hal_ble_gatt_client_write_with_response+0x10>)
   b44cc:	681b      	ldr	r3, [r3, #0]
   b44ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b44d2:	9301      	str	r3, [sp, #4]
   b44d4:	bd08      	pop	{r3, pc}
   b44d6:	0000      	.short	0x0000
   b44d8:	00030278 	.word	0x00030278

000b44dc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b03      	ldr	r3, [pc, #12]	; (b44ec <hal_ble_gatt_client_write_without_response+0x10>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b44e6:	9301      	str	r3, [sp, #4]
   b44e8:	bd08      	pop	{r3, pc}
   b44ea:	0000      	.short	0x0000
   b44ec:	00030278 	.word	0x00030278

000b44f0 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b44f0:	b508      	push	{r3, lr}
   b44f2:	4b03      	ldr	r3, [pc, #12]	; (b4500 <hal_ble_gatt_client_read+0x10>)
   b44f4:	681b      	ldr	r3, [r3, #0]
   b44f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b44fa:	9301      	str	r3, [sp, #4]
   b44fc:	bd08      	pop	{r3, pc}
   b44fe:	0000      	.short	0x0000
   b4500:	00030278 	.word	0x00030278

000b4504 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b4504:	b508      	push	{r3, lr}
   b4506:	4b03      	ldr	r3, [pc, #12]	; (b4514 <hal_ble_gap_connect+0x10>)
   b4508:	681b      	ldr	r3, [r3, #0]
   b450a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b450e:	9301      	str	r3, [sp, #4]
   b4510:	bd08      	pop	{r3, pc}
   b4512:	0000      	.short	0x0000
   b4514:	00030278 	.word	0x00030278

000b4518 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b4518:	b508      	push	{r3, lr}
   b451a:	4b03      	ldr	r3, [pc, #12]	; (b4528 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b451c:	681b      	ldr	r3, [r3, #0]
   b451e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b4522:	9301      	str	r3, [sp, #4]
   b4524:	bd08      	pop	{r3, pc}
   b4526:	0000      	.short	0x0000
   b4528:	00030278 	.word	0x00030278

000b452c <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b452c:	b508      	push	{r3, lr}
   b452e:	4b03      	ldr	r3, [pc, #12]	; (b453c <hal_ble_gatt_client_configure_cccd+0x10>)
   b4530:	681b      	ldr	r3, [r3, #0]
   b4532:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b4536:	9301      	str	r3, [sp, #4]
   b4538:	bd08      	pop	{r3, pc}
   b453a:	0000      	.short	0x0000
   b453c:	00030278 	.word	0x00030278

000b4540 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4540:	b508      	push	{r3, lr}
   b4542:	4b03      	ldr	r3, [pc, #12]	; (b4550 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b4544:	681b      	ldr	r3, [r3, #0]
   b4546:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b454a:	9301      	str	r3, [sp, #4]
   b454c:	bd08      	pop	{r3, pc}
   b454e:	0000      	.short	0x0000
   b4550:	00030278 	.word	0x00030278

000b4554 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b03      	ldr	r3, [pc, #12]	; (b4564 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b455e:	9301      	str	r3, [sp, #4]
   b4560:	bd08      	pop	{r3, pc}
   b4562:	0000      	.short	0x0000
   b4564:	00030278 	.word	0x00030278

000b4568 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4568:	b508      	push	{r3, lr}
   b456a:	4b02      	ldr	r3, [pc, #8]	; (b4574 <os_mutex_recursive_create+0xc>)
   b456c:	681b      	ldr	r3, [r3, #0]
   b456e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4570:	9301      	str	r3, [sp, #4]
   b4572:	bd08      	pop	{r3, pc}
   b4574:	00030248 	.word	0x00030248

000b4578 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4578:	b508      	push	{r3, lr}
   b457a:	4b02      	ldr	r3, [pc, #8]	; (b4584 <os_mutex_recursive_lock+0xc>)
   b457c:	681b      	ldr	r3, [r3, #0]
   b457e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4580:	9301      	str	r3, [sp, #4]
   b4582:	bd08      	pop	{r3, pc}
   b4584:	00030248 	.word	0x00030248

000b4588 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4588:	b508      	push	{r3, lr}
   b458a:	4b02      	ldr	r3, [pc, #8]	; (b4594 <os_mutex_recursive_unlock+0xc>)
   b458c:	681b      	ldr	r3, [r3, #0]
   b458e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4590:	9301      	str	r3, [sp, #4]
   b4592:	bd08      	pop	{r3, pc}
   b4594:	00030248 	.word	0x00030248

000b4598 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4598:	b508      	push	{r3, lr}
   b459a:	4b02      	ldr	r3, [pc, #8]	; (b45a4 <inet_inet_ntop+0xc>)
   b459c:	681b      	ldr	r3, [r3, #0]
   b459e:	695b      	ldr	r3, [r3, #20]
   b45a0:	9301      	str	r3, [sp, #4]
   b45a2:	bd08      	pop	{r3, pc}
   b45a4:	00030264 	.word	0x00030264

000b45a8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b45a8:	b508      	push	{r3, lr}
   b45aa:	4b02      	ldr	r3, [pc, #8]	; (b45b4 <hal_usart_write+0xc>)
   b45ac:	681b      	ldr	r3, [r3, #0]
   b45ae:	68db      	ldr	r3, [r3, #12]
   b45b0:	9301      	str	r3, [sp, #4]
   b45b2:	bd08      	pop	{r3, pc}
   b45b4:	0003023c 	.word	0x0003023c

000b45b8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b45b8:	b508      	push	{r3, lr}
   b45ba:	4b02      	ldr	r3, [pc, #8]	; (b45c4 <hal_usart_available+0xc>)
   b45bc:	681b      	ldr	r3, [r3, #0]
   b45be:	691b      	ldr	r3, [r3, #16]
   b45c0:	9301      	str	r3, [sp, #4]
   b45c2:	bd08      	pop	{r3, pc}
   b45c4:	0003023c 	.word	0x0003023c

000b45c8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b45c8:	b508      	push	{r3, lr}
   b45ca:	4b02      	ldr	r3, [pc, #8]	; (b45d4 <hal_usart_read+0xc>)
   b45cc:	681b      	ldr	r3, [r3, #0]
   b45ce:	695b      	ldr	r3, [r3, #20]
   b45d0:	9301      	str	r3, [sp, #4]
   b45d2:	bd08      	pop	{r3, pc}
   b45d4:	0003023c 	.word	0x0003023c

000b45d8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b45d8:	b508      	push	{r3, lr}
   b45da:	4b02      	ldr	r3, [pc, #8]	; (b45e4 <hal_usart_peek+0xc>)
   b45dc:	681b      	ldr	r3, [r3, #0]
   b45de:	699b      	ldr	r3, [r3, #24]
   b45e0:	9301      	str	r3, [sp, #4]
   b45e2:	bd08      	pop	{r3, pc}
   b45e4:	0003023c 	.word	0x0003023c

000b45e8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b45e8:	b508      	push	{r3, lr}
   b45ea:	4b02      	ldr	r3, [pc, #8]	; (b45f4 <hal_usart_flush+0xc>)
   b45ec:	681b      	ldr	r3, [r3, #0]
   b45ee:	69db      	ldr	r3, [r3, #28]
   b45f0:	9301      	str	r3, [sp, #4]
   b45f2:	bd08      	pop	{r3, pc}
   b45f4:	0003023c 	.word	0x0003023c

000b45f8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b45f8:	b508      	push	{r3, lr}
   b45fa:	4b02      	ldr	r3, [pc, #8]	; (b4604 <hal_usart_available_data_for_write+0xc>)
   b45fc:	681b      	ldr	r3, [r3, #0]
   b45fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4600:	9301      	str	r3, [sp, #4]
   b4602:	bd08      	pop	{r3, pc}
   b4604:	0003023c 	.word	0x0003023c

000b4608 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4608:	b508      	push	{r3, lr}
   b460a:	4b02      	ldr	r3, [pc, #8]	; (b4614 <hal_usart_init_ex+0xc>)
   b460c:	681b      	ldr	r3, [r3, #0]
   b460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4610:	9301      	str	r3, [sp, #4]
   b4612:	bd08      	pop	{r3, pc}
   b4614:	0003023c 	.word	0x0003023c

000b4618 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4618:	b508      	push	{r3, lr}
   b461a:	4b02      	ldr	r3, [pc, #8]	; (b4624 <HAL_USB_USART_Init+0xc>)
   b461c:	681b      	ldr	r3, [r3, #0]
   b461e:	681b      	ldr	r3, [r3, #0]
   b4620:	9301      	str	r3, [sp, #4]
   b4622:	bd08      	pop	{r3, pc}
   b4624:	0003024c 	.word	0x0003024c

000b4628 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4628:	b508      	push	{r3, lr}
   b462a:	4b02      	ldr	r3, [pc, #8]	; (b4634 <HAL_USB_USART_Begin+0xc>)
   b462c:	681b      	ldr	r3, [r3, #0]
   b462e:	685b      	ldr	r3, [r3, #4]
   b4630:	9301      	str	r3, [sp, #4]
   b4632:	bd08      	pop	{r3, pc}
   b4634:	0003024c 	.word	0x0003024c

000b4638 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4638:	b508      	push	{r3, lr}
   b463a:	4b02      	ldr	r3, [pc, #8]	; (b4644 <HAL_USB_USART_Available_Data+0xc>)
   b463c:	681b      	ldr	r3, [r3, #0]
   b463e:	691b      	ldr	r3, [r3, #16]
   b4640:	9301      	str	r3, [sp, #4]
   b4642:	bd08      	pop	{r3, pc}
   b4644:	0003024c 	.word	0x0003024c

000b4648 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4648:	b508      	push	{r3, lr}
   b464a:	4b02      	ldr	r3, [pc, #8]	; (b4654 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b464c:	681b      	ldr	r3, [r3, #0]
   b464e:	695b      	ldr	r3, [r3, #20]
   b4650:	9301      	str	r3, [sp, #4]
   b4652:	bd08      	pop	{r3, pc}
   b4654:	0003024c 	.word	0x0003024c

000b4658 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4658:	b508      	push	{r3, lr}
   b465a:	4b02      	ldr	r3, [pc, #8]	; (b4664 <HAL_USB_USART_Receive_Data+0xc>)
   b465c:	681b      	ldr	r3, [r3, #0]
   b465e:	699b      	ldr	r3, [r3, #24]
   b4660:	9301      	str	r3, [sp, #4]
   b4662:	bd08      	pop	{r3, pc}
   b4664:	0003024c 	.word	0x0003024c

000b4668 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4668:	b508      	push	{r3, lr}
   b466a:	4b02      	ldr	r3, [pc, #8]	; (b4674 <HAL_USB_USART_Send_Data+0xc>)
   b466c:	681b      	ldr	r3, [r3, #0]
   b466e:	69db      	ldr	r3, [r3, #28]
   b4670:	9301      	str	r3, [sp, #4]
   b4672:	bd08      	pop	{r3, pc}
   b4674:	0003024c 	.word	0x0003024c

000b4678 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4678:	b508      	push	{r3, lr}
   b467a:	4b02      	ldr	r3, [pc, #8]	; (b4684 <HAL_USB_USART_Flush_Data+0xc>)
   b467c:	681b      	ldr	r3, [r3, #0]
   b467e:	6a1b      	ldr	r3, [r3, #32]
   b4680:	9301      	str	r3, [sp, #4]
   b4682:	bd08      	pop	{r3, pc}
   b4684:	0003024c 	.word	0x0003024c

000b4688 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   b4688:	b508      	push	{r3, lr}
   b468a:	4b02      	ldr	r3, [pc, #8]	; (b4694 <LED_SetSignalingColor+0xc>)
   b468c:	681b      	ldr	r3, [r3, #0]
   b468e:	685b      	ldr	r3, [r3, #4]
   b4690:	9301      	str	r3, [sp, #4]
   b4692:	bd08      	pop	{r3, pc}
   b4694:	00030260 	.word	0x00030260

000b4698 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   b4698:	b508      	push	{r3, lr}
   b469a:	4b02      	ldr	r3, [pc, #8]	; (b46a4 <LED_Signaling_Start+0xc>)
   b469c:	681b      	ldr	r3, [r3, #0]
   b469e:	689b      	ldr	r3, [r3, #8]
   b46a0:	9301      	str	r3, [sp, #4]
   b46a2:	bd08      	pop	{r3, pc}
   b46a4:	00030260 	.word	0x00030260

000b46a8 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   b46a8:	b508      	push	{r3, lr}
   b46aa:	4b02      	ldr	r3, [pc, #8]	; (b46b4 <LED_Signaling_Stop+0xc>)
   b46ac:	681b      	ldr	r3, [r3, #0]
   b46ae:	68db      	ldr	r3, [r3, #12]
   b46b0:	9301      	str	r3, [sp, #4]
   b46b2:	bd08      	pop	{r3, pc}
   b46b4:	00030260 	.word	0x00030260

000b46b8 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b46b8:	b508      	push	{r3, lr}
   b46ba:	4b02      	ldr	r3, [pc, #8]	; (b46c4 <LED_RGB_IsOverRidden+0xc>)
   b46bc:	681b      	ldr	r3, [r3, #0]
   b46be:	699b      	ldr	r3, [r3, #24]
   b46c0:	9301      	str	r3, [sp, #4]
   b46c2:	bd08      	pop	{r3, pc}
   b46c4:	00030260 	.word	0x00030260

000b46c8 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b46c8:	b508      	push	{r3, lr}
   b46ca:	4b02      	ldr	r3, [pc, #8]	; (b46d4 <LED_On+0xc>)
   b46cc:	681b      	ldr	r3, [r3, #0]
   b46ce:	69db      	ldr	r3, [r3, #28]
   b46d0:	9301      	str	r3, [sp, #4]
   b46d2:	bd08      	pop	{r3, pc}
   b46d4:	00030260 	.word	0x00030260

000b46d8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b46d8:	b508      	push	{r3, lr}
   b46da:	4b02      	ldr	r3, [pc, #8]	; (b46e4 <panic_+0xc>)
   b46dc:	681b      	ldr	r3, [r3, #0]
   b46de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b46e0:	9301      	str	r3, [sp, #4]
   b46e2:	bd08      	pop	{r3, pc}
   b46e4:	00030260 	.word	0x00030260

000b46e8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b46e8:	b508      	push	{r3, lr}
   b46ea:	4b02      	ldr	r3, [pc, #8]	; (b46f4 <log_message+0xc>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b46f0:	9301      	str	r3, [sp, #4]
   b46f2:	bd08      	pop	{r3, pc}
   b46f4:	00030260 	.word	0x00030260

000b46f8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b46f8:	b508      	push	{r3, lr}
   b46fa:	4b02      	ldr	r3, [pc, #8]	; (b4704 <set_system_mode+0xc>)
   b46fc:	681b      	ldr	r3, [r3, #0]
   b46fe:	685b      	ldr	r3, [r3, #4]
   b4700:	9301      	str	r3, [sp, #4]
   b4702:	bd08      	pop	{r3, pc}
   b4704:	00030220 	.word	0x00030220

000b4708 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4708:	b508      	push	{r3, lr}
   b470a:	4b03      	ldr	r3, [pc, #12]	; (b4718 <system_ctrl_set_app_request_handler+0x10>)
   b470c:	681b      	ldr	r3, [r3, #0]
   b470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4712:	9301      	str	r3, [sp, #4]
   b4714:	bd08      	pop	{r3, pc}
   b4716:	0000      	.short	0x0000
   b4718:	00030220 	.word	0x00030220

000b471c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b471c:	b508      	push	{r3, lr}
   b471e:	4b03      	ldr	r3, [pc, #12]	; (b472c <system_ctrl_set_result+0x10>)
   b4720:	681b      	ldr	r3, [r3, #0]
   b4722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4726:	9301      	str	r3, [sp, #4]
   b4728:	bd08      	pop	{r3, pc}
   b472a:	0000      	.short	0x0000
   b472c:	00030220 	.word	0x00030220

000b4730 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4730:	b508      	push	{r3, lr}
   b4732:	4b02      	ldr	r3, [pc, #8]	; (b473c <network_connect+0xc>)
   b4734:	681b      	ldr	r3, [r3, #0]
   b4736:	685b      	ldr	r3, [r3, #4]
   b4738:	9301      	str	r3, [sp, #4]
   b473a:	bd08      	pop	{r3, pc}
   b473c:	00030240 	.word	0x00030240

000b4740 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4740:	b508      	push	{r3, lr}
   b4742:	4b02      	ldr	r3, [pc, #8]	; (b474c <network_connecting+0xc>)
   b4744:	681b      	ldr	r3, [r3, #0]
   b4746:	689b      	ldr	r3, [r3, #8]
   b4748:	9301      	str	r3, [sp, #4]
   b474a:	bd08      	pop	{r3, pc}
   b474c:	00030240 	.word	0x00030240

000b4750 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4750:	b508      	push	{r3, lr}
   b4752:	4b02      	ldr	r3, [pc, #8]	; (b475c <network_disconnect+0xc>)
   b4754:	681b      	ldr	r3, [r3, #0]
   b4756:	68db      	ldr	r3, [r3, #12]
   b4758:	9301      	str	r3, [sp, #4]
   b475a:	bd08      	pop	{r3, pc}
   b475c:	00030240 	.word	0x00030240

000b4760 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4760:	b508      	push	{r3, lr}
   b4762:	4b02      	ldr	r3, [pc, #8]	; (b476c <network_ready+0xc>)
   b4764:	681b      	ldr	r3, [r3, #0]
   b4766:	691b      	ldr	r3, [r3, #16]
   b4768:	9301      	str	r3, [sp, #4]
   b476a:	bd08      	pop	{r3, pc}
   b476c:	00030240 	.word	0x00030240

000b4770 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4770:	b508      	push	{r3, lr}
   b4772:	4b02      	ldr	r3, [pc, #8]	; (b477c <network_on+0xc>)
   b4774:	681b      	ldr	r3, [r3, #0]
   b4776:	695b      	ldr	r3, [r3, #20]
   b4778:	9301      	str	r3, [sp, #4]
   b477a:	bd08      	pop	{r3, pc}
   b477c:	00030240 	.word	0x00030240

000b4780 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4780:	b508      	push	{r3, lr}
   b4782:	4b02      	ldr	r3, [pc, #8]	; (b478c <network_off+0xc>)
   b4784:	681b      	ldr	r3, [r3, #0]
   b4786:	699b      	ldr	r3, [r3, #24]
   b4788:	9301      	str	r3, [sp, #4]
   b478a:	bd08      	pop	{r3, pc}
   b478c:	00030240 	.word	0x00030240

000b4790 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4790:	b508      	push	{r3, lr}
   b4792:	4b02      	ldr	r3, [pc, #8]	; (b479c <network_listen+0xc>)
   b4794:	681b      	ldr	r3, [r3, #0]
   b4796:	69db      	ldr	r3, [r3, #28]
   b4798:	9301      	str	r3, [sp, #4]
   b479a:	bd08      	pop	{r3, pc}
   b479c:	00030240 	.word	0x00030240

000b47a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b47a0:	b508      	push	{r3, lr}
   b47a2:	4b02      	ldr	r3, [pc, #8]	; (b47ac <network_listening+0xc>)
   b47a4:	681b      	ldr	r3, [r3, #0]
   b47a6:	6a1b      	ldr	r3, [r3, #32]
   b47a8:	9301      	str	r3, [sp, #4]
   b47aa:	bd08      	pop	{r3, pc}
   b47ac:	00030240 	.word	0x00030240

000b47b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b47b0:	b508      	push	{r3, lr}
   b47b2:	4b02      	ldr	r3, [pc, #8]	; (b47bc <network_set_listen_timeout+0xc>)
   b47b4:	681b      	ldr	r3, [r3, #0]
   b47b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b47b8:	9301      	str	r3, [sp, #4]
   b47ba:	bd08      	pop	{r3, pc}
   b47bc:	00030240 	.word	0x00030240

000b47c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b47c0:	b508      	push	{r3, lr}
   b47c2:	4b02      	ldr	r3, [pc, #8]	; (b47cc <network_get_listen_timeout+0xc>)
   b47c4:	681b      	ldr	r3, [r3, #0]
   b47c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b47c8:	9301      	str	r3, [sp, #4]
   b47ca:	bd08      	pop	{r3, pc}
   b47cc:	00030240 	.word	0x00030240

000b47d0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b47d0:	b508      	push	{r3, lr}
   b47d2:	4b02      	ldr	r3, [pc, #8]	; (b47dc <network_is_on+0xc>)
   b47d4:	681b      	ldr	r3, [r3, #0]
   b47d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47d8:	9301      	str	r3, [sp, #4]
   b47da:	bd08      	pop	{r3, pc}
   b47dc:	00030240 	.word	0x00030240

000b47e0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b47e0:	b508      	push	{r3, lr}
   b47e2:	4b02      	ldr	r3, [pc, #8]	; (b47ec <network_is_off+0xc>)
   b47e4:	681b      	ldr	r3, [r3, #0]
   b47e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b47e8:	9301      	str	r3, [sp, #4]
   b47ea:	bd08      	pop	{r3, pc}
   b47ec:	00030240 	.word	0x00030240

000b47f0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b47f0:	b508      	push	{r3, lr}
   b47f2:	4b02      	ldr	r3, [pc, #8]	; (b47fc <spark_set_random_seed_from_cloud_handler+0xc>)
   b47f4:	681b      	ldr	r3, [r3, #0]
   b47f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b47f8:	9301      	str	r3, [sp, #4]
   b47fa:	bd08      	pop	{r3, pc}
   b47fc:	00030244 	.word	0x00030244

000b4800 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4800:	b508      	push	{r3, lr}
   b4802:	4b02      	ldr	r3, [pc, #8]	; (b480c <malloc+0xc>)
   b4804:	681b      	ldr	r3, [r3, #0]
   b4806:	681b      	ldr	r3, [r3, #0]
   b4808:	9301      	str	r3, [sp, #4]
   b480a:	bd08      	pop	{r3, pc}
   b480c:	0003021c 	.word	0x0003021c

000b4810 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4810:	b508      	push	{r3, lr}
   b4812:	4b02      	ldr	r3, [pc, #8]	; (b481c <free+0xc>)
   b4814:	681b      	ldr	r3, [r3, #0]
   b4816:	685b      	ldr	r3, [r3, #4]
   b4818:	9301      	str	r3, [sp, #4]
   b481a:	bd08      	pop	{r3, pc}
   b481c:	0003021c 	.word	0x0003021c

000b4820 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4820:	b508      	push	{r3, lr}
   b4822:	4b02      	ldr	r3, [pc, #8]	; (b482c <realloc+0xc>)
   b4824:	681b      	ldr	r3, [r3, #0]
   b4826:	689b      	ldr	r3, [r3, #8]
   b4828:	9301      	str	r3, [sp, #4]
   b482a:	bd08      	pop	{r3, pc}
   b482c:	0003021c 	.word	0x0003021c

000b4830 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4830:	b508      	push	{r3, lr}
   b4832:	4b02      	ldr	r3, [pc, #8]	; (b483c <vsnprintf+0xc>)
   b4834:	681b      	ldr	r3, [r3, #0]
   b4836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4838:	9301      	str	r3, [sp, #4]
   b483a:	bd08      	pop	{r3, pc}
   b483c:	0003021c 	.word	0x0003021c

000b4840 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4840:	b508      	push	{r3, lr}
   b4842:	4b02      	ldr	r3, [pc, #8]	; (b484c <abort+0xc>)
   b4844:	681b      	ldr	r3, [r3, #0]
   b4846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4848:	9301      	str	r3, [sp, #4]
   b484a:	bd08      	pop	{r3, pc}
   b484c:	0003021c 	.word	0x0003021c

000b4850 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4850:	b508      	push	{r3, lr}
   b4852:	4b02      	ldr	r3, [pc, #8]	; (b485c <__assert_func+0xc>)
   b4854:	681b      	ldr	r3, [r3, #0]
   b4856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4858:	9301      	str	r3, [sp, #4]
   b485a:	bd08      	pop	{r3, pc}
   b485c:	0003021c 	.word	0x0003021c

000b4860 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4860:	b508      	push	{r3, lr}
   b4862:	4b02      	ldr	r3, [pc, #8]	; (b486c <newlib_impure_ptr_callback+0xc>)
   b4864:	681b      	ldr	r3, [r3, #0]
   b4866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4868:	9301      	str	r3, [sp, #4]
   b486a:	bd08      	pop	{r3, pc}
   b486c:	0003021c 	.word	0x0003021c

000b4870 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4870:	2200      	movs	r2, #0
   b4872:	6840      	ldr	r0, [r0, #4]
   b4874:	4611      	mov	r1, r2
   b4876:	f7ff bf93 	b.w	b47a0 <network_listening>

000b487a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b487a:	2200      	movs	r2, #0
   b487c:	6840      	ldr	r0, [r0, #4]
   b487e:	4611      	mov	r1, r2
   b4880:	f7ff bf9e 	b.w	b47c0 <network_get_listen_timeout>

000b4884 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4884:	6840      	ldr	r0, [r0, #4]
   b4886:	2200      	movs	r2, #0
   b4888:	f7ff bf92 	b.w	b47b0 <network_set_listen_timeout>

000b488c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b488c:	6840      	ldr	r0, [r0, #4]
   b488e:	2200      	movs	r2, #0
   b4890:	f081 0101 	eor.w	r1, r1, #1
   b4894:	f7ff bf7c 	b.w	b4790 <network_listen>

000b4898 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4898:	2300      	movs	r3, #0
   b489a:	6840      	ldr	r0, [r0, #4]
   b489c:	461a      	mov	r2, r3
   b489e:	4619      	mov	r1, r3
   b48a0:	f7ff bf6e 	b.w	b4780 <network_off>

000b48a4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b48a4:	2300      	movs	r3, #0
   b48a6:	6840      	ldr	r0, [r0, #4]
   b48a8:	461a      	mov	r2, r3
   b48aa:	4619      	mov	r1, r3
   b48ac:	f7ff bf60 	b.w	b4770 <network_on>

000b48b0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b48b0:	2200      	movs	r2, #0
   b48b2:	6840      	ldr	r0, [r0, #4]
   b48b4:	4611      	mov	r1, r2
   b48b6:	f7ff bf53 	b.w	b4760 <network_ready>

000b48ba <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b48ba:	2200      	movs	r2, #0
   b48bc:	6840      	ldr	r0, [r0, #4]
   b48be:	4611      	mov	r1, r2
   b48c0:	f7ff bf3e 	b.w	b4740 <network_connecting>

000b48c4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b48c4:	6840      	ldr	r0, [r0, #4]
   b48c6:	2200      	movs	r2, #0
   b48c8:	2102      	movs	r1, #2
   b48ca:	f7ff bf41 	b.w	b4750 <network_disconnect>

000b48ce <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b48ce:	2300      	movs	r3, #0
   b48d0:	6840      	ldr	r0, [r0, #4]
   b48d2:	461a      	mov	r2, r3
   b48d4:	f7ff bf2c 	b.w	b4730 <network_connect>

000b48d8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b48d8:	4b02      	ldr	r3, [pc, #8]	; (b48e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b48da:	2203      	movs	r2, #3
   b48dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b48de:	4a02      	ldr	r2, [pc, #8]	; (b48e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b48e0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b48e2:	4770      	bx	lr
   b48e4:	2003e6d4 	.word	0x2003e6d4
   b48e8:	000b7d74 	.word	0x000b7d74

000b48ec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b48ec:	4b05      	ldr	r3, [pc, #20]	; (b4904 <_GLOBAL__sub_I_System+0x18>)
   b48ee:	2202      	movs	r2, #2
   b48f0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b48f2:	4b05      	ldr	r3, [pc, #20]	; (b4908 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b48f4:	4a05      	ldr	r2, [pc, #20]	; (b490c <_GLOBAL__sub_I_System+0x20>)
   b48f6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b48f8:	2000      	movs	r0, #0
   b48fa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b48fe:	f7ff befb 	b.w	b46f8 <set_system_mode>
   b4902:	bf00      	nop
   b4904:	2003e6e8 	.word	0x2003e6e8
   b4908:	2003e6dc 	.word	0x2003e6dc
   b490c:	ffff0000 	.word	0xffff0000

000b4910 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4910:	b510      	push	{r4, lr}
   b4912:	4604      	mov	r4, r0
{
	free(buffer);
   b4914:	6800      	ldr	r0, [r0, #0]
   b4916:	f7ff ff7b 	bl	b4810 <free>
}
   b491a:	4620      	mov	r0, r4
   b491c:	bd10      	pop	{r4, pc}

000b491e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b491e:	b510      	push	{r4, lr}
   b4920:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4922:	6800      	ldr	r0, [r0, #0]
   b4924:	b108      	cbz	r0, b492a <_ZN6String10invalidateEv+0xc>
   b4926:	f7ff ff73 	bl	b4810 <free>
	buffer = NULL;
   b492a:	2300      	movs	r3, #0
	capacity = len = 0;
   b492c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4930:	6023      	str	r3, [r4, #0]
}
   b4932:	bd10      	pop	{r4, pc}

000b4934 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4934:	b538      	push	{r3, r4, r5, lr}
   b4936:	4604      	mov	r4, r0
   b4938:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b493a:	6800      	ldr	r0, [r0, #0]
   b493c:	3101      	adds	r1, #1
   b493e:	f7ff ff6f 	bl	b4820 <realloc>
	if (newbuffer) {
   b4942:	b110      	cbz	r0, b494a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4944:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4948:	2001      	movs	r0, #1
	}
	return 0;
}
   b494a:	bd38      	pop	{r3, r4, r5, pc}

000b494c <_ZN6String7reserveEj>:
{
   b494c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b494e:	6803      	ldr	r3, [r0, #0]
{
   b4950:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4952:	b123      	cbz	r3, b495e <_ZN6String7reserveEj+0x12>
   b4954:	6843      	ldr	r3, [r0, #4]
   b4956:	428b      	cmp	r3, r1
   b4958:	d301      	bcc.n	b495e <_ZN6String7reserveEj+0x12>
   b495a:	2001      	movs	r0, #1
}
   b495c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b495e:	4620      	mov	r0, r4
   b4960:	f7ff ffe8 	bl	b4934 <_ZN6String12changeBufferEj>
   b4964:	2800      	cmp	r0, #0
   b4966:	d0f9      	beq.n	b495c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4968:	68a3      	ldr	r3, [r4, #8]
   b496a:	2b00      	cmp	r3, #0
   b496c:	d1f5      	bne.n	b495a <_ZN6String7reserveEj+0xe>
   b496e:	6822      	ldr	r2, [r4, #0]
   b4970:	7013      	strb	r3, [r2, #0]
   b4972:	e7f2      	b.n	b495a <_ZN6String7reserveEj+0xe>

000b4974 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4974:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4976:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4978:	4611      	mov	r1, r2
   b497a:	9201      	str	r2, [sp, #4]
{
   b497c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b497e:	f7ff ffe5 	bl	b494c <_ZN6String7reserveEj>
   b4982:	9a01      	ldr	r2, [sp, #4]
   b4984:	b928      	cbnz	r0, b4992 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4986:	4620      	mov	r0, r4
   b4988:	f7ff ffc9 	bl	b491e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b498c:	4620      	mov	r0, r4
   b498e:	b003      	add	sp, #12
   b4990:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4992:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4994:	4629      	mov	r1, r5
   b4996:	6820      	ldr	r0, [r4, #0]
   b4998:	f003 f882 	bl	b7aa0 <memcpy>
	buffer[len] = 0;
   b499c:	6822      	ldr	r2, [r4, #0]
   b499e:	68a3      	ldr	r3, [r4, #8]
   b49a0:	2100      	movs	r1, #0
   b49a2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b49a4:	e7f2      	b.n	b498c <_ZN6String4copyEPKcj+0x18>

000b49a6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b49a6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b49a8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b49aa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b49ae:	4604      	mov	r4, r0
	len = 0;
   b49b0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b49b2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b49b4:	b141      	cbz	r1, b49c8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b49b6:	4608      	mov	r0, r1
   b49b8:	9101      	str	r1, [sp, #4]
   b49ba:	f003 f8e1 	bl	b7b80 <strlen>
   b49be:	9901      	ldr	r1, [sp, #4]
   b49c0:	4602      	mov	r2, r0
   b49c2:	4620      	mov	r0, r4
   b49c4:	f7ff ffd6 	bl	b4974 <_ZN6String4copyEPKcj>
}
   b49c8:	4620      	mov	r0, r4
   b49ca:	b002      	add	sp, #8
   b49cc:	bd10      	pop	{r4, pc}

000b49ce <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b49ce:	b538      	push	{r3, r4, r5, lr}
   b49d0:	4605      	mov	r5, r0
	if (buffer) {
   b49d2:	6800      	ldr	r0, [r0, #0]
{
   b49d4:	460c      	mov	r4, r1
	if (buffer) {
   b49d6:	b168      	cbz	r0, b49f4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b49d8:	686a      	ldr	r2, [r5, #4]
   b49da:	688b      	ldr	r3, [r1, #8]
   b49dc:	429a      	cmp	r2, r3
   b49de:	d307      	bcc.n	b49f0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b49e0:	6809      	ldr	r1, [r1, #0]
   b49e2:	f003 f8c5 	bl	b7b70 <strcpy>
			len = rhs.len;
   b49e6:	68a3      	ldr	r3, [r4, #8]
   b49e8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b49ea:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b49ec:	60a3      	str	r3, [r4, #8]
}
   b49ee:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b49f0:	f7ff ff0e 	bl	b4810 <free>
	buffer = rhs.buffer;
   b49f4:	6823      	ldr	r3, [r4, #0]
   b49f6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b49f8:	6863      	ldr	r3, [r4, #4]
   b49fa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b49fc:	68a3      	ldr	r3, [r4, #8]
   b49fe:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b4a00:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b4a02:	e9c4 3300 	strd	r3, r3, [r4]
   b4a06:	e7f1      	b.n	b49ec <_ZN6String4moveERS_+0x1e>

000b4a08 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b4a08:	b510      	push	{r4, lr}
	buffer = NULL;
   b4a0a:	2300      	movs	r3, #0
	capacity = 0;
   b4a0c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b4a10:	4604      	mov	r4, r0
	len = 0;
   b4a12:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4a14:	7303      	strb	r3, [r0, #12]
	move(rval);
   b4a16:	f7ff ffda 	bl	b49ce <_ZN6String4moveERS_>
}
   b4a1a:	4620      	mov	r0, r4
   b4a1c:	bd10      	pop	{r4, pc}

000b4a1e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b4a1e:	4288      	cmp	r0, r1
{
   b4a20:	b510      	push	{r4, lr}
   b4a22:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b4a24:	d005      	beq.n	b4a32 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b4a26:	680b      	ldr	r3, [r1, #0]
   b4a28:	b12b      	cbz	r3, b4a36 <_ZN6StringaSERKS_+0x18>
   b4a2a:	688a      	ldr	r2, [r1, #8]
   b4a2c:	4619      	mov	r1, r3
   b4a2e:	f7ff ffa1 	bl	b4974 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4a32:	4620      	mov	r0, r4
   b4a34:	bd10      	pop	{r4, pc}
	else invalidate();
   b4a36:	f7ff ff72 	bl	b491e <_ZN6String10invalidateEv>
   b4a3a:	e7fa      	b.n	b4a32 <_ZN6StringaSERKS_+0x14>

000b4a3c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b4a3c:	b510      	push	{r4, lr}
	buffer = NULL;
   b4a3e:	2300      	movs	r3, #0
String::String(const String &value)
   b4a40:	4604      	mov	r4, r0
	capacity = 0;
   b4a42:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b4a46:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4a48:	7303      	strb	r3, [r0, #12]
	*this = value;
   b4a4a:	f7ff ffe8 	bl	b4a1e <_ZN6StringaSERKS_>
}
   b4a4e:	4620      	mov	r0, r4
   b4a50:	bd10      	pop	{r4, pc}

000b4a52 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b4a52:	b513      	push	{r0, r1, r4, lr}
   b4a54:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b4a56:	b159      	cbz	r1, b4a70 <_ZN6StringaSEPKc+0x1e>
   b4a58:	4608      	mov	r0, r1
   b4a5a:	9101      	str	r1, [sp, #4]
   b4a5c:	f003 f890 	bl	b7b80 <strlen>
   b4a60:	9901      	ldr	r1, [sp, #4]
   b4a62:	4602      	mov	r2, r0
   b4a64:	4620      	mov	r0, r4
   b4a66:	f7ff ff85 	bl	b4974 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4a6a:	4620      	mov	r0, r4
   b4a6c:	b002      	add	sp, #8
   b4a6e:	bd10      	pop	{r4, pc}
	else invalidate();
   b4a70:	f7ff ff55 	bl	b491e <_ZN6String10invalidateEv>
   b4a74:	e7f9      	b.n	b4a6a <_ZN6StringaSEPKc+0x18>

000b4a76 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b4a76:	b570      	push	{r4, r5, r6, lr}
   b4a78:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b4a7a:	460e      	mov	r6, r1
   b4a7c:	b909      	cbnz	r1, b4a82 <_ZN6String6concatEPKcj+0xc>
   b4a7e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b4a80:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b4a82:	b16a      	cbz	r2, b4aa0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b4a84:	6884      	ldr	r4, [r0, #8]
   b4a86:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b4a88:	4621      	mov	r1, r4
   b4a8a:	f7ff ff5f 	bl	b494c <_ZN6String7reserveEj>
   b4a8e:	2800      	cmp	r0, #0
   b4a90:	d0f5      	beq.n	b4a7e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b4a92:	6828      	ldr	r0, [r5, #0]
   b4a94:	68ab      	ldr	r3, [r5, #8]
   b4a96:	4631      	mov	r1, r6
   b4a98:	4418      	add	r0, r3
   b4a9a:	f003 f869 	bl	b7b70 <strcpy>
	len = newlen;
   b4a9e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b4aa0:	2001      	movs	r0, #1
   b4aa2:	e7ed      	b.n	b4a80 <_ZN6String6concatEPKcj+0xa>

000b4aa4 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b4aa4:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b4aa6:	2300      	movs	r3, #0
	buf[0] = c;
   b4aa8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b4aac:	2201      	movs	r2, #1
   b4aae:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b4ab0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b4ab4:	f7ff ffdf 	bl	b4a76 <_ZN6String6concatEPKcj>
}
   b4ab8:	b003      	add	sp, #12
   b4aba:	f85d fb04 	ldr.w	pc, [sp], #4

000b4abe <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b4abe:	6802      	ldr	r2, [r0, #0]
{
   b4ac0:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b4ac2:	6809      	ldr	r1, [r1, #0]
   b4ac4:	b162      	cbz	r2, b4ae0 <_ZNK6String9compareToERKS_+0x22>
   b4ac6:	b941      	cbnz	r1, b4ada <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b4ac8:	6880      	ldr	r0, [r0, #8]
   b4aca:	b160      	cbz	r0, b4ae6 <_ZNK6String9compareToERKS_+0x28>
   b4acc:	7810      	ldrb	r0, [r2, #0]
   b4ace:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b4ad0:	6898      	ldr	r0, [r3, #8]
   b4ad2:	b140      	cbz	r0, b4ae6 <_ZNK6String9compareToERKS_+0x28>
   b4ad4:	7809      	ldrb	r1, [r1, #0]
   b4ad6:	4248      	negs	r0, r1
   b4ad8:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b4ada:	4610      	mov	r0, r2
   b4adc:	f003 b83e 	b.w	b7b5c <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b4ae0:	2900      	cmp	r1, #0
   b4ae2:	d1f5      	bne.n	b4ad0 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b4ae4:	4608      	mov	r0, r1
}
   b4ae6:	4770      	bx	lr

000b4ae8 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b4ae8:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b4aea:	6882      	ldr	r2, [r0, #8]
   b4aec:	688b      	ldr	r3, [r1, #8]
   b4aee:	429a      	cmp	r2, r3
   b4af0:	d105      	bne.n	b4afe <_ZNK6String6equalsERKS_+0x16>
   b4af2:	f7ff ffe4 	bl	b4abe <_ZNK6String9compareToERKS_>
   b4af6:	fab0 f080 	clz	r0, r0
   b4afa:	0940      	lsrs	r0, r0, #5
}
   b4afc:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b4afe:	2000      	movs	r0, #0
   b4b00:	e7fc      	b.n	b4afc <_ZNK6String6equalsERKS_+0x14>

000b4b02 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4b02:	4770      	bx	lr

000b4b04 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b4b04:	4770      	bx	lr

000b4b06 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b4b06:	4770      	bx	lr

000b4b08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4b08:	4770      	bx	lr
	...

000b4b0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4b0c:	4b06      	ldr	r3, [pc, #24]	; (b4b28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4b0e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4b10:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b4b12:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4b16:	d005      	beq.n	b4b24 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4b18:	4608      	mov	r0, r1
   b4b1a:	f002 fe99 	bl	b7850 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4b1e:	2800      	cmp	r0, #0
   b4b20:	bf08      	it	eq
   b4b22:	2400      	moveq	r4, #0
      }
   b4b24:	4620      	mov	r0, r4
   b4b26:	bd10      	pop	{r4, pc}
   b4b28:	000b7fc0 	.word	0x000b7fc0

000b4b2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4b2c:	4b06      	ldr	r3, [pc, #24]	; (b4b48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4b2e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4b30:	b510      	push	{r4, lr}
   b4b32:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4b36:	d005      	beq.n	b4b44 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4b38:	4608      	mov	r0, r1
   b4b3a:	f002 fe89 	bl	b7850 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4b3e:	2800      	cmp	r0, #0
   b4b40:	bf08      	it	eq
   b4b42:	2400      	moveq	r4, #0
      }
   b4b44:	4620      	mov	r0, r4
   b4b46:	bd10      	pop	{r4, pc}
   b4b48:	000b7fc0 	.word	0x000b7fc0

000b4b4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4b4c:	4b06      	ldr	r3, [pc, #24]	; (b4b68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4b4e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4b50:	b510      	push	{r4, lr}
   b4b52:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4b56:	d005      	beq.n	b4b64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4b58:	4608      	mov	r0, r1
   b4b5a:	f002 fe79 	bl	b7850 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4b5e:	2800      	cmp	r0, #0
   b4b60:	bf08      	it	eq
   b4b62:	2400      	moveq	r4, #0
      }
   b4b64:	4620      	mov	r0, r4
   b4b66:	bd10      	pop	{r4, pc}
   b4b68:	000b7fc0 	.word	0x000b7fc0

000b4b6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4b6c:	b510      	push	{r4, lr}
   b4b6e:	2168      	movs	r1, #104	; 0x68
   b4b70:	4604      	mov	r4, r0
   b4b72:	f7ff fa92 	bl	b409a <_ZdlPvj>
   b4b76:	4620      	mov	r0, r4
   b4b78:	bd10      	pop	{r4, pc}

000b4b7a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4b7a:	b510      	push	{r4, lr}
   b4b7c:	2128      	movs	r1, #40	; 0x28
   b4b7e:	4604      	mov	r4, r0
   b4b80:	f7ff fa8b 	bl	b409a <_ZdlPvj>
   b4b84:	4620      	mov	r0, r4
   b4b86:	bd10      	pop	{r4, pc}

000b4b88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4b88:	b510      	push	{r4, lr}
   b4b8a:	2130      	movs	r1, #48	; 0x30
   b4b8c:	4604      	mov	r4, r0
   b4b8e:	f7ff fa84 	bl	b409a <_ZdlPvj>
   b4b92:	4620      	mov	r0, r4
   b4b94:	bd10      	pop	{r4, pc}

000b4b96 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4b96:	2168      	movs	r1, #104	; 0x68
   b4b98:	f7ff ba7f 	b.w	b409a <_ZdlPvj>

000b4b9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4b9c:	2128      	movs	r1, #40	; 0x28
   b4b9e:	f7ff ba7c 	b.w	b409a <_ZdlPvj>

000b4ba2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4ba2:	2130      	movs	r1, #48	; 0x30
   b4ba4:	f7ff ba79 	b.w	b409a <_ZdlPvj>

000b4ba8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b4ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4baa:	2500      	movs	r5, #0
   b4bac:	1cec      	adds	r4, r5, #3
   b4bae:	428c      	cmp	r4, r1
   b4bb0:	d80d      	bhi.n	b4bce <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b4bb2:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b4bb4:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b4bb6:	5d87      	ldrb	r7, [r0, r6]
   b4bb8:	4297      	cmp	r7, r2
   b4bba:	d105      	bne.n	b4bc8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b4bbc:	4426      	add	r6, r4
   b4bbe:	42b1      	cmp	r1, r6
   b4bc0:	d305      	bcc.n	b4bce <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b4bc2:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b4bc4:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b4bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b4bc8:	3401      	adds	r4, #1
   b4bca:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4bcc:	e7ee      	b.n	b4bac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b4bce:	2000      	movs	r0, #0
   b4bd0:	e7f9      	b.n	b4bc6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b4bd4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b4bd4:	4a02      	ldr	r2, [pc, #8]	; (b4be0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b4bd6:	2100      	movs	r1, #0
   b4bd8:	200a      	movs	r0, #10
   b4bda:	f7ff bd7d 	b.w	b46d8 <panic_>
   b4bde:	bf00      	nop
   b4be0:	000b4425 	.word	0x000b4425

000b4be4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4be4:	b430      	push	{r4, r5}
   b4be6:	460d      	mov	r5, r1
   b4be8:	4611      	mov	r1, r2
   b4bea:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b4bec:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4bee:	6809      	ldr	r1, [r1, #0]
   b4bf0:	6828      	ldr	r0, [r5, #0]
   b4bf2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b4bf6:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4bf8:	bc30      	pop	{r4, r5}
   b4bfa:	4760      	bx	ip

000b4bfc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b4bfc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4bfe:	b538      	push	{r3, r4, r5, lr}
   b4c00:	4604      	mov	r4, r0
	switch (__op)
   b4c02:	d102      	bne.n	b4c0a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4c04:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4c06:	6023      	str	r3, [r4, #0]
	}
   b4c08:	e003      	b.n	b4c12 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b4c0a:	2a02      	cmp	r2, #2
   b4c0c:	d003      	beq.n	b4c16 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b4c0e:	2a03      	cmp	r2, #3
   b4c10:	d00d      	beq.n	b4c2e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b4c12:	2000      	movs	r0, #0
   b4c14:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4c16:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b4c18:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4c1a:	f7ff fa3a 	bl	b4092 <_Znwj>
   b4c1e:	4603      	mov	r3, r0
   b4c20:	2800      	cmp	r0, #0
   b4c22:	d0f0      	beq.n	b4c06 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b4c24:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4c28:	e883 0003 	stmia.w	r3, {r0, r1}
   b4c2c:	e7eb      	b.n	b4c06 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4c2e:	6800      	ldr	r0, [r0, #0]
   b4c30:	2800      	cmp	r0, #0
   b4c32:	d0ee      	beq.n	b4c12 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b4c34:	2108      	movs	r1, #8
   b4c36:	f7ff fa30 	bl	b409a <_ZdlPvj>
   b4c3a:	e7ea      	b.n	b4c12 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b4c3c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b4c3c:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b4c3e:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b4c40:	4604      	mov	r4, r0
	if (_M_manager)
   b4c42:	b12b      	cbz	r3, b4c50 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b4c44:	2203      	movs	r2, #3
   b4c46:	4601      	mov	r1, r0
   b4c48:	4798      	blx	r3
	    _M_manager = nullptr;
   b4c4a:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b4c4c:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b4c50:	bd10      	pop	{r4, pc}

000b4c52 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b4c52:	b510      	push	{r4, lr}
	if (_M_manager)
   b4c54:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b4c56:	4604      	mov	r4, r0
	if (_M_manager)
   b4c58:	b12b      	cbz	r3, b4c66 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b4c5a:	2203      	movs	r2, #3
   b4c5c:	4601      	mov	r1, r0
   b4c5e:	4798      	blx	r3
	    _M_manager = nullptr;
   b4c60:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b4c62:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b4c66:	bd10      	pop	{r4, pc}

000b4c68 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b4c68:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b4c6a:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b4c6c:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b4c6e:	2220      	movs	r2, #32
   b4c70:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b4c74:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b4c76:	4a08      	ldr	r2, [pc, #32]	; (b4c98 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b4c78:	9200      	str	r2, [sp, #0]
   b4c7a:	4908      	ldr	r1, [pc, #32]	; (b4c9c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b4c7c:	aa02      	add	r2, sp, #8
   b4c7e:	2001      	movs	r0, #1
   b4c80:	f7ff fd32 	bl	b46e8 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b4c84:	6820      	ldr	r0, [r4, #0]
   b4c86:	4906      	ldr	r1, [pc, #24]	; (b4ca0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b4c88:	8800      	ldrh	r0, [r0, #0]
   b4c8a:	2300      	movs	r3, #0
   b4c8c:	4622      	mov	r2, r4
    }
   b4c8e:	b00a      	add	sp, #40	; 0x28
   b4c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b4c94:	f7ff bc04 	b.w	b44a0 <hal_ble_gatt_client_discover_all_services>
   b4c98:	000b7db3 	.word	0x000b7db3
   b4c9c:	000b7da8 	.word	0x000b7da8
   b4ca0:	000b6729 	.word	0x000b6729

000b4ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b4ca4:	b510      	push	{r4, lr}
   b4ca6:	3801      	subs	r0, #1
   b4ca8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b4cac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b4cb0:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b4cb2:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b4cb6:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b4cb8:	bf88      	it	hi
   b4cba:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b4cbe:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b4cc2:	7803      	ldrb	r3, [r0, #0]
   b4cc4:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b4cc8:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b4ccc:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b4cce:	bf88      	it	hi
   b4cd0:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b4cd4:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b4cd6:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b4cda:	d1e7      	bne.n	b4cac <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b4cdc:	bd10      	pop	{r4, pc}

000b4cde <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4cde:	b510      	push	{r4, lr}
      if (_M_manager)
   b4ce0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4ce2:	4604      	mov	r4, r0
      if (_M_manager)
   b4ce4:	b113      	cbz	r3, b4cec <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4ce6:	2203      	movs	r2, #3
   b4ce8:	4601      	mov	r1, r0
   b4cea:	4798      	blx	r3
    }
   b4cec:	4620      	mov	r0, r4
   b4cee:	bd10      	pop	{r4, pc}

000b4cf0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4cf0:	b510      	push	{r4, lr}
   b4cf2:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b4cf4:	3058      	adds	r0, #88	; 0x58
   b4cf6:	f7ff fff2 	bl	b4cde <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b4cfa:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b4cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4d02:	f7ff be05 	b.w	b4910 <_ZN6StringD1Ev>

000b4d06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4d06:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4d08:	6843      	ldr	r3, [r0, #4]
   b4d0a:	3b01      	subs	r3, #1
    {
   b4d0c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4d0e:	6043      	str	r3, [r0, #4]
   b4d10:	b963      	cbnz	r3, b4d2c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4d12:	6803      	ldr	r3, [r0, #0]
   b4d14:	689b      	ldr	r3, [r3, #8]
   b4d16:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4d18:	68a3      	ldr	r3, [r4, #8]
   b4d1a:	3b01      	subs	r3, #1
   b4d1c:	60a3      	str	r3, [r4, #8]
   b4d1e:	b92b      	cbnz	r3, b4d2c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4d20:	6823      	ldr	r3, [r4, #0]
   b4d22:	4620      	mov	r0, r4
   b4d24:	68db      	ldr	r3, [r3, #12]
    }
   b4d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4d2a:	4718      	bx	r3
    }
   b4d2c:	bd10      	pop	{r4, pc}

000b4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b4d2e:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b4d30:	6803      	ldr	r3, [r0, #0]
   b4d32:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b4d34:	4605      	mov	r5, r0
   b4d36:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b4d38:	d008      	beq.n	b4d4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b4d3a:	b111      	cbz	r1, b4d42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b4d3c:	684b      	ldr	r3, [r1, #4]
   b4d3e:	3301      	adds	r3, #1
   b4d40:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b4d42:	6828      	ldr	r0, [r5, #0]
   b4d44:	b108      	cbz	r0, b4d4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b4d46:	f7ff ffde 	bl	b4d06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4d4a:	602c      	str	r4, [r5, #0]
      }
   b4d4c:	bd38      	pop	{r3, r4, r5, pc}

000b4d4e <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b4d4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4d52:	b2da      	uxtb	r2, r3
   b4d54:	2a09      	cmp	r2, #9
   b4d56:	d801      	bhi.n	b4d5c <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b4d58:	4618      	mov	r0, r3
   b4d5a:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b4d5c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b4d60:	2b05      	cmp	r3, #5
   b4d62:	d801      	bhi.n	b4d68 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b4d64:	3857      	subs	r0, #87	; 0x57
   b4d66:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b4d68:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b4d6c:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b4d6e:	bf94      	ite	ls
   b4d70:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b4d72:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b4d76:	4770      	bx	lr

000b4d78 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b4d78:	b510      	push	{r4, lr}
            locked_(false) {
   b4d7a:	2300      	movs	r3, #0
   b4d7c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b4d7e:	4b04      	ldr	r3, [pc, #16]	; (b4d90 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b4d80:	4604      	mov	r4, r0
   b4d82:	6818      	ldr	r0, [r3, #0]
   b4d84:	f7ff fbf8 	bl	b4578 <os_mutex_recursive_lock>
        locked_ = true;
   b4d88:	2301      	movs	r3, #1
   b4d8a:	7023      	strb	r3, [r4, #0]
    }
   b4d8c:	4620      	mov	r0, r4
   b4d8e:	bd10      	pop	{r4, pc}
   b4d90:	2003e6f0 	.word	0x2003e6f0

000b4d94 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b4d94:	b510      	push	{r4, lr}
        if (locked_) {
   b4d96:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b4d98:	4604      	mov	r4, r0
        if (locked_) {
   b4d9a:	b11b      	cbz	r3, b4da4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b4d9c:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b4d9e:	6818      	ldr	r0, [r3, #0]
   b4da0:	f7ff fbf2 	bl	b4588 <os_mutex_recursive_unlock>
    }
   b4da4:	4620      	mov	r0, r4
   b4da6:	bd10      	pop	{r4, pc}
   b4da8:	2003e6f0 	.word	0x2003e6f0

000b4dac <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b4dac:	b082      	sub	sp, #8
   b4dae:	4603      	mov	r3, r0
    address_ = addr;
   b4db0:	6808      	ldr	r0, [r1, #0]
   b4db2:	6849      	ldr	r1, [r1, #4]
   b4db4:	466a      	mov	r2, sp
   b4db6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b4db8:	466a      	mov	r2, sp
   b4dba:	ca03      	ldmia	r2!, {r0, r1}
   b4dbc:	6018      	str	r0, [r3, #0]
}
   b4dbe:	4618      	mov	r0, r3
    address_ = addr.address_;
   b4dc0:	6059      	str	r1, [r3, #4]
}
   b4dc2:	b002      	add	sp, #8
   b4dc4:	4770      	bx	lr

000b4dc6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b4dc6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b4dc8:	7982      	ldrb	r2, [r0, #6]
   b4dca:	798b      	ldrb	r3, [r1, #6]
   b4dcc:	429a      	cmp	r2, r3
   b4dce:	d106      	bne.n	b4dde <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b4dd0:	2206      	movs	r2, #6
   b4dd2:	f002 fe55 	bl	b7a80 <memcmp>
   b4dd6:	fab0 f080 	clz	r0, r0
   b4dda:	0940      	lsrs	r0, r0, #5
}
   b4ddc:	bd08      	pop	{r3, pc}
    return false;
   b4dde:	2000      	movs	r0, #0
   b4de0:	e7fc      	b.n	b4ddc <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b4de2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b4de2:	f04f 33ff 	mov.w	r3, #4294967295
   b4de6:	6003      	str	r3, [r0, #0]
   b4de8:	8083      	strh	r3, [r0, #4]
}
   b4dea:	2000      	movs	r0, #0
   b4dec:	4770      	bx	lr

000b4dee <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b4dee:	b508      	push	{r3, lr}
   b4df0:	4602      	mov	r2, r0
        : address_{} {
   b4df2:	2100      	movs	r1, #0
   b4df4:	6001      	str	r1, [r0, #0]
   b4df6:	6041      	str	r1, [r0, #4]
    clear();
   b4df8:	f7ff fff3 	bl	b4de2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b4dfc:	7191      	strb	r1, [r2, #6]
}
   b4dfe:	4610      	mov	r0, r2
   b4e00:	bd08      	pop	{r3, pc}
	...

000b4e04 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b4e04:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b4e06:	2301      	movs	r3, #1
   b4e08:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4e0a:	4b05      	ldr	r3, [pc, #20]	; (b4e20 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b4e0c:	4602      	mov	r2, r0
   b4e0e:	f103 0110 	add.w	r1, r3, #16
   b4e12:	f853 4b04 	ldr.w	r4, [r3], #4
   b4e16:	f842 4b04 	str.w	r4, [r2], #4
   b4e1a:	428b      	cmp	r3, r1
   b4e1c:	d1f9      	bne.n	b4e12 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b4e1e:	bd10      	pop	{r4, pc}
   b4e20:	000b7fce 	.word	0x000b7fce

000b4e24 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b4e24:	7c0b      	ldrb	r3, [r1, #16]
   b4e26:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b4e2a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b4e2c:	d10d      	bne.n	b4e4a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b4e2e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4e30:	4b0c      	ldr	r3, [pc, #48]	; (b4e64 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b4e32:	4602      	mov	r2, r0
   b4e34:	f103 0410 	add.w	r4, r3, #16
   b4e38:	f853 5b04 	ldr.w	r5, [r3], #4
   b4e3c:	f842 5b04 	str.w	r5, [r2], #4
   b4e40:	42a3      	cmp	r3, r4
   b4e42:	d1f9      	bne.n	b4e38 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b4e44:	880b      	ldrh	r3, [r1, #0]
   b4e46:	8183      	strh	r3, [r0, #12]
}
   b4e48:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b4e4a:	2301      	movs	r3, #1
   b4e4c:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b4e4e:	f101 0210 	add.w	r2, r1, #16
   b4e52:	4603      	mov	r3, r0
   b4e54:	f851 4b04 	ldr.w	r4, [r1], #4
   b4e58:	f843 4b04 	str.w	r4, [r3], #4
   b4e5c:	4291      	cmp	r1, r2
   b4e5e:	d1f9      	bne.n	b4e54 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b4e60:	e7f2      	b.n	b4e48 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b4e62:	bf00      	nop
   b4e64:	000b7fce 	.word	0x000b7fce

000b4e68 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4e68:	b510      	push	{r4, lr}
    if (uuid128) {
   b4e6a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4e6c:	4604      	mov	r4, r0
    if (uuid128) {
   b4e6e:	b1b1      	cbz	r1, b4e9e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b4e70:	2a01      	cmp	r2, #1
   b4e72:	f101 0210 	add.w	r2, r1, #16
   b4e76:	d10a      	bne.n	b4e8e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b4e78:	4601      	mov	r1, r0
   b4e7a:	f853 0b04 	ldr.w	r0, [r3], #4
   b4e7e:	f841 0b04 	str.w	r0, [r1], #4
   b4e82:	4293      	cmp	r3, r2
   b4e84:	d1f9      	bne.n	b4e7a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b4e86:	2301      	movs	r3, #1
   b4e88:	6123      	str	r3, [r4, #16]
}
   b4e8a:	4620      	mov	r0, r4
   b4e8c:	bd10      	pop	{r4, pc}
   b4e8e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b4e90:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b4e94:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b4e98:	429a      	cmp	r2, r3
   b4e9a:	d1f9      	bne.n	b4e90 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b4e9c:	e7f3      	b.n	b4e86 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b4e9e:	2210      	movs	r2, #16
   b4ea0:	f002 fe26 	bl	b7af0 <memset>
   b4ea4:	e7f1      	b.n	b4e8a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b4ea6 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b4ea6:	b538      	push	{r3, r4, r5, lr}
   b4ea8:	4604      	mov	r4, r0
   b4eaa:	460d      	mov	r5, r1
        : BleUuid() {
   b4eac:	f7ff ffaa 	bl	b4e04 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b4eb0:	2300      	movs	r3, #0
   b4eb2:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b4eb4:	81a5      	strh	r5, [r4, #12]
}
   b4eb6:	4620      	mov	r0, r4
   b4eb8:	bd38      	pop	{r3, r4, r5, pc}

000b4eba <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b4eba:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b4ebc:	6902      	ldr	r2, [r0, #16]
   b4ebe:	690b      	ldr	r3, [r1, #16]
   b4ec0:	429a      	cmp	r2, r3
   b4ec2:	d106      	bne.n	b4ed2 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b4ec4:	2210      	movs	r2, #16
   b4ec6:	f002 fddb 	bl	b7a80 <memcmp>
   b4eca:	fab0 f080 	clz	r0, r0
   b4ece:	0940      	lsrs	r0, r0, #5
}
   b4ed0:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b4ed2:	2000      	movs	r0, #0
   b4ed4:	e7fc      	b.n	b4ed0 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b4ed8 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b4ed8:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b4eda:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b4ede:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4ee0:	4b34      	ldr	r3, [pc, #208]	; (b4fb4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b4ee2:	460c      	mov	r4, r1
   b4ee4:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4ee6:	4602      	mov	r2, r0
   b4ee8:	f103 0110 	add.w	r1, r3, #16
   b4eec:	f853 0b04 	ldr.w	r0, [r3], #4
   b4ef0:	f842 0b04 	str.w	r0, [r2], #4
   b4ef4:	428b      	cmp	r3, r1
   b4ef6:	d1f9      	bne.n	b4eec <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b4ef8:	b344      	cbz	r4, b4f4c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b4efa:	2124      	movs	r1, #36	; 0x24
   b4efc:	4620      	mov	r0, r4
   b4efe:	f002 fe47 	bl	b7b90 <strnlen>
   b4f02:	2804      	cmp	r0, #4
   b4f04:	f04f 0500 	mov.w	r5, #0
   b4f08:	d123      	bne.n	b4f52 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b4f0a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b4f0e:	af01      	add	r7, sp, #4
   b4f10:	1ca5      	adds	r5, r4, #2
   b4f12:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b4f14:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b4f18:	f7ff ff19 	bl	b4d4e <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b4f1c:	f1b0 0800 	subs.w	r8, r0, #0
   b4f20:	db12      	blt.n	b4f48 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b4f22:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b4f26:	f7ff ff12 	bl	b4d4e <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b4f2a:	2800      	cmp	r0, #0
   b4f2c:	db0c      	blt.n	b4f48 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b4f2e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b4f30:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b4f34:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b4f36:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b4f3a:	d1eb      	bne.n	b4f14 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b4f3c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4f40:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b4f42:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4f46:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b4f48:	2300      	movs	r3, #0
   b4f4a:	6133      	str	r3, [r6, #16]
}
   b4f4c:	b002      	add	sp, #8
   b4f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b4f52:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4f56:	2124      	movs	r1, #36	; 0x24
   b4f58:	4620      	mov	r0, r4
   b4f5a:	f002 fe19 	bl	b7b90 <strnlen>
   b4f5e:	42a8      	cmp	r0, r5
   b4f60:	d807      	bhi.n	b4f72 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b4f62:	4642      	mov	r2, r8
   b4f64:	2100      	movs	r1, #0
   b4f66:	4630      	mov	r0, r6
}
   b4f68:	b002      	add	sp, #8
   b4f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b4f6e:	f002 bdbf 	b.w	b7af0 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4f72:	f1b8 0f00 	cmp.w	r8, #0
   b4f76:	d0e9      	beq.n	b4f4c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b4f78:	5d60      	ldrb	r0, [r4, r5]
   b4f7a:	f7ff fee8 	bl	b4d4e <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b4f7e:	0603      	lsls	r3, r0, #24
   b4f80:	d415      	bmi.n	b4fae <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b4f82:	0100      	lsls	r0, r0, #4
   b4f84:	f108 38ff 	add.w	r8, r8, #4294967295
   b4f88:	b2c7      	uxtb	r7, r0
   b4f8a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b4f8e:	2124      	movs	r1, #36	; 0x24
   b4f90:	4620      	mov	r0, r4
   b4f92:	f002 fdfd 	bl	b7b90 <strnlen>
   b4f96:	3501      	adds	r5, #1
   b4f98:	42a8      	cmp	r0, r5
   b4f9a:	d908      	bls.n	b4fae <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b4f9c:	5d60      	ldrb	r0, [r4, r5]
   b4f9e:	f7ff fed6 	bl	b4d4e <_ZN8particle11hexToNibbleEc>
   b4fa2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b4fa4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b4fa6:	bfa4      	itt	ge
   b4fa8:	4338      	orrge	r0, r7
   b4faa:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4fae:	3501      	adds	r5, #1
   b4fb0:	e7d1      	b.n	b4f56 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b4fb2:	bf00      	nop
   b4fb4:	000b7fce 	.word	0x000b7fce

000b4fb8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b4fb8:	b513      	push	{r0, r1, r4, lr}
   b4fba:	4604      	mov	r4, r0
   b4fbc:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b4fbe:	f7ff ff21 	bl	b4e04 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b4fc2:	4620      	mov	r0, r4
   b4fc4:	9901      	ldr	r1, [sp, #4]
   b4fc6:	f7ff ff87 	bl	b4ed8 <_ZN8particle7BleUuid9constructEPKc>
}
   b4fca:	4620      	mov	r0, r4
   b4fcc:	b002      	add	sp, #8
   b4fce:	bd10      	pop	{r4, pc}

000b4fd0 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b4fd0:	b510      	push	{r4, lr}
   b4fd2:	f100 030f 	add.w	r3, r0, #15
   b4fd6:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b4fd8:	781c      	ldrb	r4, [r3, #0]
   b4fda:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b4fde:	4283      	cmp	r3, r0
   b4fe0:	f103 33ff 	add.w	r3, r3, #4294967295
   b4fe4:	d1f8      	bne.n	b4fd8 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b4fe6:	bd10      	pop	{r4, pc}

000b4fe8 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b4fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4fec:	461f      	mov	r7, r3
   b4fee:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b4ff0:	460d      	mov	r5, r1
   b4ff2:	2900      	cmp	r1, #0
   b4ff4:	d05b      	beq.n	b50ae <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b4ff6:	b1da      	cbz	r2, b5030 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b4ff8:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b4ffc:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b4ffe:	f1b8 0f00 	cmp.w	r8, #0
   b5002:	d119      	bne.n	b5038 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b5004:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b5006:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b500a:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b500c:	aa05      	add	r2, sp, #20
   b500e:	2102      	movs	r1, #2
   b5010:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b5012:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b5016:	f7ff fe45 	bl	b4ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b501a:	2c04      	cmp	r4, #4
   b501c:	bf28      	it	cs
   b501e:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b5020:	4622      	mov	r2, r4
   b5022:	a905      	add	r1, sp, #20
   b5024:	4628      	mov	r0, r5
   b5026:	f002 fd3b 	bl	b7aa0 <memcpy>
        buf[len++] = '\0';
   b502a:	f805 8004 	strb.w	r8, [r5, r4]
   b502e:	1c62      	adds	r2, r4, #1
}
   b5030:	4610      	mov	r0, r2
   b5032:	b00e      	add	sp, #56	; 0x38
   b5034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b5038:	a901      	add	r1, sp, #4
   b503a:	f7ff ffc9 	bl	b4fd0 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b503e:	aa05      	add	r2, sp, #20
    if (stripped) {
   b5040:	b17f      	cbz	r7, b5062 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b5042:	2110      	movs	r1, #16
   b5044:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b5046:	f7ff fe2d 	bl	b4ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b504a:	2c24      	cmp	r4, #36	; 0x24
   b504c:	bf28      	it	cs
   b504e:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b5050:	4622      	mov	r2, r4
   b5052:	a905      	add	r1, sp, #20
   b5054:	4628      	mov	r0, r5
   b5056:	f002 fd23 	bl	b7aa0 <memcpy>
    buf[len++] = '\0';
   b505a:	2300      	movs	r3, #0
   b505c:	552b      	strb	r3, [r5, r4]
   b505e:	1c62      	adds	r2, r4, #1
    return len;
   b5060:	e7e6      	b.n	b5030 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b5062:	2104      	movs	r1, #4
   b5064:	eb0d 0001 	add.w	r0, sp, r1
   b5068:	f7ff fe1c 	bl	b4ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b506c:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b506e:	f10d 021d 	add.w	r2, sp, #29
   b5072:	2102      	movs	r1, #2
   b5074:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b5076:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b507a:	f7ff fe13 	bl	b4ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b507e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b5082:	2102      	movs	r1, #2
   b5084:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b5088:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b508c:	f7ff fe0a 	bl	b4ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b5090:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b5094:	2102      	movs	r1, #2
   b5096:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b5098:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b509c:	f7ff fe02 	bl	b4ca4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b50a0:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b50a4:	aa0b      	add	r2, sp, #44	; 0x2c
   b50a6:	2106      	movs	r1, #6
   b50a8:	f10d 000e 	add.w	r0, sp, #14
   b50ac:	e7cb      	b.n	b5046 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b50ae:	460a      	mov	r2, r1
   b50b0:	e7be      	b.n	b5030 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b50b2 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b50b2:	b510      	push	{r4, lr}
   b50b4:	b08a      	sub	sp, #40	; 0x28
   b50b6:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b50b8:	2300      	movs	r3, #0
   b50ba:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b50bc:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b50be:	4669      	mov	r1, sp
   b50c0:	f7ff ff92 	bl	b4fe8 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b50c4:	4669      	mov	r1, sp
   b50c6:	4620      	mov	r0, r4
   b50c8:	f7ff fc6d 	bl	b49a6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b50cc:	4620      	mov	r0, r4
   b50ce:	b00a      	add	sp, #40	; 0x28
   b50d0:	bd10      	pop	{r4, pc}

000b50d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b50d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b50d4:	4605      	mov	r5, r0
   b50d6:	4616      	mov	r6, r2
   b50d8:	461f      	mov	r7, r3
   b50da:	460a      	mov	r2, r1
   b50dc:	ab01      	add	r3, sp, #4
   b50de:	e9d0 0100 	ldrd	r0, r1, [r0]
   b50e2:	f7ff fd61 	bl	b4ba8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b50e6:	f030 0402 	bics.w	r4, r0, #2
   b50ea:	d00c      	beq.n	b5106 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b50ec:	1e84      	subs	r4, r0, #2
   b50ee:	42bc      	cmp	r4, r7
   b50f0:	bf28      	it	cs
   b50f2:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b50f4:	b13e      	cbz	r6, b5106 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b50f6:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b50f8:	682b      	ldr	r3, [r5, #0]
   b50fa:	3102      	adds	r1, #2
   b50fc:	4622      	mov	r2, r4
   b50fe:	4419      	add	r1, r3
   b5100:	4630      	mov	r0, r6
   b5102:	f002 fccd 	bl	b7aa0 <memcpy>
}
   b5106:	4620      	mov	r0, r4
   b5108:	b003      	add	sp, #12
   b510a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b510c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b510c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b510e:	4613      	mov	r3, r2
   b5110:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5112:	9201      	str	r2, [sp, #4]
   b5114:	460a      	mov	r2, r1
   b5116:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b5118:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b511a:	f7ff ffda 	bl	b50d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b511e:	b940      	cbnz	r0, b5132 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5120:	9b01      	ldr	r3, [sp, #4]
   b5122:	4622      	mov	r2, r4
   b5124:	2109      	movs	r1, #9
   b5126:	4628      	mov	r0, r5
}
   b5128:	b003      	add	sp, #12
   b512a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b512e:	f7ff bfd0 	b.w	b50d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b5132:	b003      	add	sp, #12
   b5134:	bd30      	pop	{r4, r5, pc}
	...

000b5138 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b5138:	b5f0      	push	{r4, r5, r6, r7, lr}
   b513a:	460c      	mov	r4, r1
   b513c:	b089      	sub	sp, #36	; 0x24
    String name;
   b513e:	490c      	ldr	r1, [pc, #48]	; (b5170 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b5140:	4605      	mov	r5, r0
    String name;
   b5142:	f7ff fc30 	bl	b49a6 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b5146:	221f      	movs	r2, #31
   b5148:	4669      	mov	r1, sp
   b514a:	4620      	mov	r0, r4
   b514c:	f7ff ffde 	bl	b510c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b5150:	4606      	mov	r6, r0
   b5152:	b150      	cbz	r0, b516a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b5154:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b5156:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b5158:	f814 1b01 	ldrb.w	r1, [r4], #1
   b515c:	4628      	mov	r0, r5
   b515e:	f7ff fca1 	bl	b4aa4 <_ZN6String6concatEc>
   b5162:	b110      	cbz	r0, b516a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b5164:	3701      	adds	r7, #1
   b5166:	42be      	cmp	r6, r7
   b5168:	d1f6      	bne.n	b5158 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b516a:	4628      	mov	r0, r5
   b516c:	b009      	add	sp, #36	; 0x24
   b516e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5170:	000b7c8c 	.word	0x000b7c8c

000b5174 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b5174:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b5176:	2302      	movs	r3, #2
   b5178:	aa01      	add	r2, sp, #4
   b517a:	2119      	movs	r1, #25
   b517c:	f7ff ffa9 	bl	b50d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b5180:	b108      	cbz	r0, b5186 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b5182:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b5186:	b003      	add	sp, #12
   b5188:	f85d fb04 	ldr.w	pc, [sp], #4

000b518c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b518c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b518e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5192:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b5194:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b5196:	8043      	strh	r3, [r0, #2]
   b5198:	220e      	movs	r2, #14
   b519a:	4629      	mov	r1, r5
   b519c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b519e:	7105      	strb	r5, [r0, #4]
   b51a0:	3006      	adds	r0, #6
   b51a2:	f002 fca5 	bl	b7af0 <memset>
   b51a6:	f104 0014 	add.w	r0, r4, #20
   b51aa:	f7ff fe2b 	bl	b4e04 <_ZN8particle7BleUuidC1Ev>
   b51ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b51b2:	f7ff fe27 	bl	b4e04 <_ZN8particle7BleUuidC1Ev>
   b51b6:	4904      	ldr	r1, [pc, #16]	; (b51c8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b51b8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b51bc:	f7ff fbf3 	bl	b49a6 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b51c0:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b51c2:	4620      	mov	r0, r4
   b51c4:	bd38      	pop	{r3, r4, r5, pc}
   b51c6:	bf00      	nop
   b51c8:	000b7c8c 	.word	0x000b7c8c

000b51cc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b51cc:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b51ce:	680d      	ldr	r5, [r1, #0]
   b51d0:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b51d2:	4601      	mov	r1, r0
   b51d4:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b51d8:	f7ff fe6f 	bl	b4eba <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b51dc:	b140      	cbz	r0, b51f0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b51de:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b51e0:	8aa2      	ldrh	r2, [r4, #20]
   b51e2:	429a      	cmp	r2, r3
   b51e4:	d805      	bhi.n	b51f2 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b51e6:	8ae0      	ldrh	r0, [r4, #22]
   b51e8:	4298      	cmp	r0, r3
   b51ea:	bf34      	ite	cc
   b51ec:	2000      	movcc	r0, #0
   b51ee:	2001      	movcs	r0, #1
    }
   b51f0:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b51f2:	2000      	movs	r0, #0
   b51f4:	e7fc      	b.n	b51f0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b51f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b51f6:	b510      	push	{r4, lr}
    return data_ + size_;
   b51f8:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b51fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b5200:	4293      	cmp	r3, r2
   b5202:	4618      	mov	r0, r3
   b5204:	d006      	beq.n	b5214 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b5206:	6804      	ldr	r4, [r0, #0]
   b5208:	8824      	ldrh	r4, [r4, #0]
   b520a:	428c      	cmp	r4, r1
   b520c:	f103 0308 	add.w	r3, r3, #8
   b5210:	d1f6      	bne.n	b5200 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b5212:	bd10      	pop	{r4, pc}
        return nullptr;
   b5214:	2000      	movs	r0, #0
   b5216:	e7fc      	b.n	b5212 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b5218 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5218:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b521a:	b570      	push	{r4, r5, r6, lr}
   b521c:	6003      	str	r3, [r0, #0]
   b521e:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5220:	2068      	movs	r0, #104	; 0x68
   b5222:	f7fe ff36 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5226:	1e04      	subs	r4, r0, #0
   b5228:	f104 060c 	add.w	r6, r4, #12
   b522c:	d007      	beq.n	b523e <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b522e:	2301      	movs	r3, #1
   b5230:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b5234:	4b04      	ldr	r3, [pc, #16]	; (b5248 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b5236:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5238:	4630      	mov	r0, r6
   b523a:	f7ff ffa7 	bl	b518c <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b523e:	e9c5 6400 	strd	r6, r4, [r5]
}
   b5242:	4628      	mov	r0, r5
   b5244:	bd70      	pop	{r4, r5, r6, pc}
   b5246:	bf00      	nop
   b5248:	000b7f74 	.word	0x000b7f74

000b524c <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b524c:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b524e:	680c      	ldr	r4, [r1, #0]
   b5250:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b5252:	4606      	mov	r6, r0
    return impl()->charUUID();
   b5254:	4605      	mov	r5, r0
   b5256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b525a:	6823      	ldr	r3, [r4, #0]
   b525c:	602b      	str	r3, [r5, #0]
}
   b525e:	4630      	mov	r0, r6
   b5260:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5264 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b5264:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5266:	4606      	mov	r6, r0
   b5268:	b085      	sub	sp, #20
   b526a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b526c:	460d      	mov	r5, r1
   b526e:	2900      	cmp	r1, #0
   b5270:	d050      	beq.n	b5314 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b5272:	2a00      	cmp	r2, #0
   b5274:	d04e      	beq.n	b5314 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b5276:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b5278:	7823      	ldrb	r3, [r4, #0]
   b527a:	2af4      	cmp	r2, #244	; 0xf4
   b527c:	bf28      	it	cs
   b527e:	22f4      	movcs	r2, #244	; 0xf4
   b5280:	b343      	cbz	r3, b52d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b5282:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b5284:	0798      	lsls	r0, r3, #30
   b5286:	d509      	bpl.n	b529c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b5288:	89a0      	ldrh	r0, [r4, #12]
   b528a:	9203      	str	r2, [sp, #12]
   b528c:	2300      	movs	r3, #0
   b528e:	f7ff f8fd 	bl	b448c <hal_ble_gatt_server_set_characteristic_value>
   b5292:	2800      	cmp	r0, #0
   b5294:	9a03      	ldr	r2, [sp, #12]
   b5296:	da03      	bge.n	b52a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b5298:	b005      	add	sp, #20
   b529a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b529c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b52a0:	6834      	ldr	r4, [r6, #0]
   b52a2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b52a4:	06d9      	lsls	r1, r3, #27
   b52a6:	d509      	bpl.n	b52bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b52a8:	2f01      	cmp	r7, #1
   b52aa:	d007      	beq.n	b52bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b52ac:	89a0      	ldrh	r0, [r4, #12]
   b52ae:	2300      	movs	r3, #0
   b52b0:	4629      	mov	r1, r5
}
   b52b2:	b005      	add	sp, #20
   b52b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b52b8:	f7ff b942 	b.w	b4540 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b52bc:	069b      	lsls	r3, r3, #26
   b52be:	d5eb      	bpl.n	b5298 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b52c0:	2f02      	cmp	r7, #2
   b52c2:	d0e9      	beq.n	b5298 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b52c4:	89a0      	ldrh	r0, [r4, #12]
   b52c6:	2300      	movs	r3, #0
   b52c8:	4629      	mov	r1, r5
}
   b52ca:	b005      	add	sp, #20
   b52cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b52d0:	f7ff b940 	b.w	b4554 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b52d4:	8860      	ldrh	r0, [r4, #2]
   b52d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b52da:	4288      	cmp	r0, r1
   b52dc:	d01c      	beq.n	b5318 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b52de:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b52e0:	074e      	lsls	r6, r1, #29
   b52e2:	d501      	bpl.n	b52e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b52e4:	2f01      	cmp	r7, #1
   b52e6:	d104      	bne.n	b52f2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b52e8:	070b      	lsls	r3, r1, #28
   b52ea:	d409      	bmi.n	b5300 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b52ec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b52f0:	e7d2      	b.n	b5298 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b52f2:	89a1      	ldrh	r1, [r4, #12]
   b52f4:	9300      	str	r3, [sp, #0]
   b52f6:	4613      	mov	r3, r2
   b52f8:	462a      	mov	r2, r5
   b52fa:	f7ff f8ef 	bl	b44dc <hal_ble_gatt_client_write_without_response>
   b52fe:	e7cb      	b.n	b5298 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b5300:	2f02      	cmp	r7, #2
   b5302:	d0f3      	beq.n	b52ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b5304:	2300      	movs	r3, #0
   b5306:	89a1      	ldrh	r1, [r4, #12]
   b5308:	9300      	str	r3, [sp, #0]
   b530a:	4613      	mov	r3, r2
   b530c:	462a      	mov	r2, r5
   b530e:	f7ff f8db 	bl	b44c8 <hal_ble_gatt_client_write_with_response>
   b5312:	e7c1      	b.n	b5298 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b5314:	4802      	ldr	r0, [pc, #8]	; (b5320 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b5316:	e7bf      	b.n	b5298 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b5318:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b531c:	e7bc      	b.n	b5298 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b531e:	bf00      	nop
   b5320:	fffffef2 	.word	0xfffffef2

000b5324 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b5324:	b510      	push	{r4, lr}
   b5326:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b5328:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b532a:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b532c:	bb52      	cbnz	r2, b5384 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b532e:	885c      	ldrh	r4, [r3, #2]
   b5330:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5334:	4284      	cmp	r4, r0
   b5336:	d025      	beq.n	b5384 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b5338:	8a18      	ldrh	r0, [r3, #16]
   b533a:	b330      	cbz	r0, b538a <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b533c:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b5340:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b5342:	4a13      	ldr	r2, [pc, #76]	; (b5390 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b5344:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b5346:	4a13      	ldr	r2, [pc, #76]	; (b5394 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b5348:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b534c:	885a      	ldrh	r2, [r3, #2]
   b534e:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b5352:	8a1a      	ldrh	r2, [r3, #16]
   b5354:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b5358:	899a      	ldrh	r2, [r3, #12]
   b535a:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b535e:	b159      	cbz	r1, b5378 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b5360:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b5362:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b5364:	bf44      	itt	mi
   b5366:	2202      	movmi	r2, #2
   b5368:	9205      	strmi	r2, [sp, #20]
   b536a:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b536c:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b536e:	bf42      	ittt	mi
   b5370:	9b05      	ldrmi	r3, [sp, #20]
   b5372:	f043 0301 	orrmi.w	r3, r3, #1
   b5376:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b5378:	2100      	movs	r1, #0
   b537a:	4668      	mov	r0, sp
   b537c:	f7ff f8d6 	bl	b452c <hal_ble_gatt_client_configure_cccd>
}
   b5380:	b006      	add	sp, #24
   b5382:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b5384:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b5388:	e7fa      	b.n	b5380 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b538a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b538e:	e7f7      	b.n	b5380 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b5390:	00180003 	.word	0x00180003
   b5394:	000b555d 	.word	0x000b555d

000b5398 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b5398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b539a:	2600      	movs	r6, #0
   b539c:	6006      	str	r6, [r0, #0]
   b539e:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b53a0:	2028      	movs	r0, #40	; 0x28
   b53a2:	f7fe fe76 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b53a6:	1e04      	subs	r4, r0, #0
   b53a8:	f104 070c 	add.w	r7, r4, #12
   b53ac:	d00a      	beq.n	b53c4 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b53ae:	2301      	movs	r3, #1
   b53b0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b53b4:	4b05      	ldr	r3, [pc, #20]	; (b53cc <_ZN8particle10BleServiceC1Ev+0x34>)
   b53b6:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b53b8:	4638      	mov	r0, r7
   b53ba:	f7ff fd23 	bl	b4e04 <_ZN8particle7BleUuidC1Ev>
   b53be:	6226      	str	r6, [r4, #32]
   b53c0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b53c4:	e9c5 7400 	strd	r7, r4, [r5]
}
   b53c8:	4628      	mov	r0, r5
   b53ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b53cc:	000b7f90 	.word	0x000b7f90

000b53d0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b53d0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b53d2:	2500      	movs	r5, #0
   b53d4:	6005      	str	r5, [r0, #0]
   b53d6:	4606      	mov	r6, r0
   b53d8:	2030      	movs	r0, #48	; 0x30
   b53da:	f7fe fe5a 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b53de:	4604      	mov	r4, r0
   b53e0:	b188      	cbz	r0, b5406 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b53e2:	2301      	movs	r3, #1
   b53e4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b53e8:	4b09      	ldr	r3, [pc, #36]	; (b5410 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b53ea:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b53ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b53f0:	8183      	strh	r3, [r0, #12]
   b53f2:	300e      	adds	r0, #14
   b53f4:	f7ff fcfb 	bl	b4dee <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b53f8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b53fc:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b5400:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b5404:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b5406:	6074      	str	r4, [r6, #4]
   b5408:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b540a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b540c:	4630      	mov	r0, r6
   b540e:	bd70      	pop	{r4, r5, r6, pc}
   b5410:	000b7fac 	.word	0x000b7fac

000b5414 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b5414:	b513      	push	{r0, r1, r4, lr}
   b5416:	4604      	mov	r4, r0
    WiringBleLock lk;
   b5418:	a801      	add	r0, sp, #4
   b541a:	f7ff fcad 	bl	b4d78 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b541e:	6823      	ldr	r3, [r4, #0]
   b5420:	881c      	ldrh	r4, [r3, #0]
   b5422:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5426:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b5428:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b542a:	bf18      	it	ne
   b542c:	2401      	movne	r4, #1
    WiringBleLock lk;
   b542e:	f7ff fcb1 	bl	b4d94 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b5432:	4620      	mov	r0, r4
   b5434:	b002      	add	sp, #8
   b5436:	bd10      	pop	{r4, pc}

000b5438 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b5438:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b543a:	4605      	mov	r5, r0
   b543c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b543e:	a801      	add	r0, sp, #4
   b5440:	f7ff fc9a 	bl	b4d78 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5444:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b5446:	6823      	ldr	r3, [r4, #0]
   b5448:	f8c2 3002 	str.w	r3, [r2, #2]
   b544c:	6863      	ldr	r3, [r4, #4]
   b544e:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b5452:	a801      	add	r0, sp, #4
   b5454:	f7ff fc9e 	bl	b4d94 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b5458:	b003      	add	sp, #12
   b545a:	bd30      	pop	{r4, r5, pc}

000b545c <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b545c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b545e:	460d      	mov	r5, r1
   b5460:	4604      	mov	r4, r0
    WiringBleLock lk;
   b5462:	a801      	add	r0, sp, #4
   b5464:	f7ff fc88 	bl	b4d78 <_ZN8particle3ble13WiringBleLockC1Ev>
   b5468:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b546a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b546e:	6023      	str	r3, [r4, #0]
   b5470:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b5474:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b5476:	a801      	add	r0, sp, #4
   b5478:	f7ff fc8c 	bl	b4d94 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b547c:	4620      	mov	r0, r4
   b547e:	b003      	add	sp, #12
   b5480:	bd30      	pop	{r4, r5, pc}

000b5482 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b5482:	b530      	push	{r4, r5, lr}
   b5484:	4605      	mov	r5, r0
   b5486:	b087      	sub	sp, #28
   b5488:	460c      	mov	r4, r1
    WiringBleLock lk;
   b548a:	a801      	add	r0, sp, #4
   b548c:	f7ff fc74 	bl	b4d78 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b5490:	682a      	ldr	r2, [r5, #0]
   b5492:	6823      	ldr	r3, [r4, #0]
   b5494:	8812      	ldrh	r2, [r2, #0]
   b5496:	881b      	ldrh	r3, [r3, #0]
   b5498:	429a      	cmp	r2, r3
   b549a:	d10d      	bne.n	b54b8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b549c:	4629      	mov	r1, r5
   b549e:	a802      	add	r0, sp, #8
   b54a0:	f7ff ffdc 	bl	b545c <_ZNK8particle13BlePeerDevice7addressEv>
   b54a4:	4621      	mov	r1, r4
   b54a6:	a804      	add	r0, sp, #16
   b54a8:	f7ff ffd8 	bl	b545c <_ZNK8particle13BlePeerDevice7addressEv>
   b54ac:	a904      	add	r1, sp, #16
   b54ae:	a802      	add	r0, sp, #8
   b54b0:	f7ff fc89 	bl	b4dc6 <_ZNK8particle10BleAddresseqERKS0_>
   b54b4:	4604      	mov	r4, r0
   b54b6:	b900      	cbnz	r0, b54ba <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b54b8:	2400      	movs	r4, #0
    WiringBleLock lk;
   b54ba:	a801      	add	r0, sp, #4
   b54bc:	f7ff fc6a 	bl	b4d94 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b54c0:	4620      	mov	r0, r4
   b54c2:	b007      	add	sp, #28
   b54c4:	bd30      	pop	{r4, r5, pc}
	...

000b54c8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b54c8:	b510      	push	{r4, lr}
   b54ca:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b54cc:	2054      	movs	r0, #84	; 0x54
   b54ce:	f7fe fde0 	bl	b4092 <_Znwj>
   b54d2:	4601      	mov	r1, r0
   b54d4:	b160      	cbz	r0, b54f0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b54d6:	2300      	movs	r3, #0
   b54d8:	e9c0 3300 	strd	r3, r3, [r0]
   b54dc:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b54e0:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b54e4:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b54e8:	6203      	str	r3, [r0, #32]
   b54ea:	62c3      	str	r3, [r0, #44]	; 0x2c
   b54ec:	63c3      	str	r3, [r0, #60]	; 0x3c
   b54ee:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b54f0:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b54f2:	b919      	cbnz	r1, b54fc <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b54f4:	4a09      	ldr	r2, [pc, #36]	; (b551c <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b54f6:	200a      	movs	r0, #10
   b54f8:	f7ff f8ee 	bl	b46d8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b54fc:	2000      	movs	r0, #0
   b54fe:	f7fe ffa1 	bl	b4444 <hal_ble_stack_init>
   b5502:	b120      	cbz	r0, b550e <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b5504:	4a05      	ldr	r2, [pc, #20]	; (b551c <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b5506:	2100      	movs	r1, #0
   b5508:	200a      	movs	r0, #10
   b550a:	f7ff f8e5 	bl	b46d8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b550e:	6821      	ldr	r1, [r4, #0]
   b5510:	4803      	ldr	r0, [pc, #12]	; (b5520 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5512:	2200      	movs	r2, #0
   b5514:	f7ff f800 	bl	b4518 <hal_ble_set_callback_on_periph_link_events>
}
   b5518:	4620      	mov	r0, r4
   b551a:	bd10      	pop	{r4, pc}
   b551c:	000b4425 	.word	0x000b4425
   b5520:	000b5f25 	.word	0x000b5f25

000b5524 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b5524:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b5526:	4c0a      	ldr	r4, [pc, #40]	; (b5550 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b5528:	7823      	ldrb	r3, [r4, #0]
   b552a:	f3bf 8f5b 	dmb	ish
   b552e:	07db      	lsls	r3, r3, #31
   b5530:	d40c      	bmi.n	b554c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5532:	4620      	mov	r0, r4
   b5534:	f7fe fdb3 	bl	b409e <__cxa_guard_acquire>
   b5538:	b140      	cbz	r0, b554c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b553a:	4806      	ldr	r0, [pc, #24]	; (b5554 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b553c:	f7ff ffc4 	bl	b54c8 <_ZN8particle14BleLocalDeviceC1Ev>
   b5540:	4620      	mov	r0, r4
   b5542:	f7fe fdb1 	bl	b40a8 <__cxa_guard_release>
   b5546:	4804      	ldr	r0, [pc, #16]	; (b5558 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5548:	f002 fa94 	bl	b7a74 <atexit>
    return instance;
}
   b554c:	4801      	ldr	r0, [pc, #4]	; (b5554 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b554e:	bd10      	pop	{r4, pc}
   b5550:	2003e6ec 	.word	0x2003e6ec
   b5554:	2003e6f4 	.word	0x2003e6f4
   b5558:	000b5831 	.word	0x000b5831

000b555c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b555c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b555e:	6803      	ldr	r3, [r0, #0]
   b5560:	3b09      	subs	r3, #9
   b5562:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5564:	b08d      	sub	sp, #52	; 0x34
   b5566:	4604      	mov	r4, r0
   b5568:	460d      	mov	r5, r1
    switch (event->type) {
   b556a:	d811      	bhi.n	b5590 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b556c:	f7ff ffda 	bl	b5524 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5570:	88a1      	ldrh	r1, [r4, #4]
   b5572:	6800      	ldr	r0, [r0, #0]
   b5574:	f7ff fe3f 	bl	b51f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b5578:	4603      	mov	r3, r0
   b557a:	b958      	cbnz	r0, b5594 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b557c:	2220      	movs	r2, #32
   b557e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b5582:	4a0b      	ldr	r2, [pc, #44]	; (b55b0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b5584:	9200      	str	r2, [sp, #0]
   b5586:	490b      	ldr	r1, [pc, #44]	; (b55b4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b5588:	aa04      	add	r2, sp, #16
   b558a:	2032      	movs	r0, #50	; 0x32
   b558c:	f7ff f8ac 	bl	b46e8 <log_message>
}
   b5590:	b00d      	add	sp, #52	; 0x34
   b5592:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b5594:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b5596:	2a00      	cmp	r2, #0
   b5598:	d0fa      	beq.n	b5590 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b559a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b559e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b55a2:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b55a6:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b55a8:	aa04      	add	r2, sp, #16
   b55aa:	a903      	add	r1, sp, #12
   b55ac:	47a0      	blx	r4
}
   b55ae:	e7ef      	b.n	b5590 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b55b0:	000b7dcf 	.word	0x000b7dcf
   b55b4:	000b7da8 	.word	0x000b7da8

000b55b8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b55b8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b55ba:	2000      	movs	r0, #0
   b55bc:	f7fe ff42 	bl	b4444 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b55c0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b55c4:	bd08      	pop	{r3, pc}
	...

000b55c8 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b55c8:	b570      	push	{r4, r5, r6, lr}
   b55ca:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b55cc:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b55ce:	460e      	mov	r6, r1
   b55d0:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b55d2:	f7ff fb33 	bl	b4c3c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b55d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b55da:	f7ff fb3a 	bl	b4c52 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b55de:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b55e2:	2200      	movs	r2, #0
   b55e4:	4621      	mov	r1, r4
   b55e6:	4803      	ldr	r0, [pc, #12]	; (b55f4 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b55e8:	f7fe ff34 	bl	b4454 <hal_ble_gap_start_scan>
   b55ec:	2800      	cmp	r0, #0
        return foundCount_;
   b55ee:	bfa8      	it	ge
   b55f0:	6960      	ldrge	r0, [r4, #20]
    }
   b55f2:	bd70      	pop	{r4, r5, r6, pc}
   b55f4:	000b6e65 	.word	0x000b6e65

000b55f8 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b55f8:	b510      	push	{r4, lr}
   b55fa:	4604      	mov	r4, r0
    ::free(ptr);
   b55fc:	6940      	ldr	r0, [r0, #20]
   b55fe:	f7ff f907 	bl	b4810 <free>
   b5602:	68a0      	ldr	r0, [r4, #8]
   b5604:	f7ff f904 	bl	b4810 <free>
   b5608:	4620      	mov	r0, r4
   b560a:	bd10      	pop	{r4, pc}

000b560c <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b560c:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b560e:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b5612:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b5616:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b561a:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b561e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b5622:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b5626:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b562a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b562e:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b5632:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b5636:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b563a:	6202      	str	r2, [r0, #32]
   b563c:	6302      	str	r2, [r0, #48]	; 0x30
   b563e:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b5642:	4770      	bx	lr

000b5644 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b5644:	6803      	ldr	r3, [r0, #0]
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b5646:	69d8      	ldr	r0, [r3, #28]
}
   b5648:	2800      	cmp	r0, #0
   b564a:	bfd4      	ite	le
   b564c:	2000      	movle	r0, #0
   b564e:	2001      	movgt	r0, #1
   b5650:	4770      	bx	lr

000b5652 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5652:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5654:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5658:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b565a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b565e:	42ae      	cmp	r6, r5
   b5660:	d004      	beq.n	b566c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b5662:	4628      	mov	r0, r5
   b5664:	f7ff f954 	bl	b4910 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5668:	3510      	adds	r5, #16
   b566a:	e7f8      	b.n	b565e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b566c:	6820      	ldr	r0, [r4, #0]
   b566e:	f7ff f8cf 	bl	b4810 <free>
}
   b5672:	4620      	mov	r0, r4
   b5674:	bd70      	pop	{r4, r5, r6, pc}

000b5676 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5676:	b510      	push	{r4, lr}
   b5678:	4604      	mov	r4, r0
    ::free(ptr);
   b567a:	6800      	ldr	r0, [r0, #0]
   b567c:	f7ff f8c8 	bl	b4810 <free>
}
   b5680:	4620      	mov	r0, r4
   b5682:	bd10      	pop	{r4, pc}

000b5684 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b5684:	b570      	push	{r4, r5, r6, lr}
   b5686:	4604      	mov	r4, r0
    ::free(ptr);
   b5688:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b568a:	f7ff f8c1 	bl	b4810 <free>
   b568e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b5690:	f7ff f8be 	bl	b4810 <free>
    }
    ~BleScanFilter() = default;
   b5694:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b5698:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b569c:	f7ff ffeb 	bl	b5676 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b56a0:	4628      	mov	r0, r5
   b56a2:	f7ff ffd6 	bl	b5652 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b56a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b56aa:	f7ff fb18 	bl	b4cde <_ZNSt14_Function_baseD1Ev>
   b56ae:	f104 0018 	add.w	r0, r4, #24
   b56b2:	f7ff fb14 	bl	b4cde <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b56b6:	e9d4 5300 	ldrd	r5, r3, [r4]
   b56ba:	2624      	movs	r6, #36	; 0x24
   b56bc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b56c0:	42ae      	cmp	r6, r5
   b56c2:	d004      	beq.n	b56ce <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b56c4:	4628      	mov	r0, r5
   b56c6:	f7ff ff97 	bl	b55f8 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b56ca:	3524      	adds	r5, #36	; 0x24
   b56cc:	e7f8      	b.n	b56c0 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b56ce:	6820      	ldr	r0, [r4, #0]
   b56d0:	f7ff f89e 	bl	b4810 <free>
   b56d4:	4620      	mov	r0, r4
   b56d6:	bd70      	pop	{r4, r5, r6, pc}

000b56d8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   b56d8:	b530      	push	{r4, r5, lr}
   b56da:	4615      	mov	r5, r2
   b56dc:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   b56de:	460c      	mov	r4, r1
   b56e0:	b179      	cbz	r1, b5702 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   b56e2:	b172      	cbz	r2, b5702 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   b56e4:	a801      	add	r0, sp, #4
   b56e6:	f7ff ff91 	bl	b560c <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   b56ea:	4621      	mov	r1, r4
   b56ec:	462a      	mov	r2, r5
   b56ee:	a801      	add	r0, sp, #4
   b56f0:	f7ff ff6a 	bl	b55c8 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b56f4:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b56f6:	a801      	add	r0, sp, #4
   b56f8:	f7ff ffc4 	bl	b5684 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b56fc:	4620      	mov	r0, r4
   b56fe:	b01f      	add	sp, #124	; 0x7c
   b5700:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b5702:	4c01      	ldr	r4, [pc, #4]	; (b5708 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   b5704:	e7fa      	b.n	b56fc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   b5706:	bf00      	nop
   b5708:	fffffef2 	.word	0xfffffef2

000b570c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b570c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b570e:	1e14      	subs	r4, r2, #0
   b5710:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5712:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b5714:	db02      	blt.n	b571c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b5716:	1862      	adds	r2, r4, r1
   b5718:	429a      	cmp	r2, r3
   b571a:	dd00      	ble.n	b571e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b571c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b571e:	682a      	ldr	r2, [r5, #0]
   b5720:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b5722:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b5724:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5726:	1a52      	subs	r2, r2, r1
   b5728:	f002 f9c8 	bl	b7abc <memmove>
    size_ -= n;
   b572c:	686a      	ldr	r2, [r5, #4]
   b572e:	1b12      	subs	r2, r2, r4
   b5730:	606a      	str	r2, [r5, #4]
}
   b5732:	bd38      	pop	{r3, r4, r5, pc}

000b5734 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b5734:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5736:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b5738:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b573a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b573c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b573e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5740:	f7fe fca7 	bl	b4092 <_Znwj>
   b5744:	b118      	cbz	r0, b574e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5746:	682b      	ldr	r3, [r5, #0]
   b5748:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b574a:	686b      	ldr	r3, [r5, #4]
   b574c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b574e:	4b03      	ldr	r3, [pc, #12]	; (b575c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b5750:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5752:	4b03      	ldr	r3, [pc, #12]	; (b5760 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5754:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5756:	60a3      	str	r3, [r4, #8]
      }
   b5758:	4620      	mov	r0, r4
   b575a:	bd38      	pop	{r3, r4, r5, pc}
   b575c:	000b4be5 	.word	0x000b4be5
   b5760:	000b4bfd 	.word	0x000b4bfd

000b5764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b5764:	680b      	ldr	r3, [r1, #0]
   b5766:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b5768:	b113      	cbz	r3, b5770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b576a:	685a      	ldr	r2, [r3, #4]
   b576c:	3201      	adds	r2, #1
   b576e:	605a      	str	r2, [r3, #4]
      }
   b5770:	4770      	bx	lr

000b5772 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b5772:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5774:	f851 3b04 	ldr.w	r3, [r1], #4
   b5778:	4604      	mov	r4, r0
   b577a:	f840 3b04 	str.w	r3, [r0], #4
   b577e:	f7ff fff1 	bl	b5764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b5782:	6823      	ldr	r3, [r4, #0]
   b5784:	b90b      	cbnz	r3, b578a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b5786:	f7ff fa25 	bl	b4bd4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b578a:	4620      	mov	r0, r4
   b578c:	bd10      	pop	{r4, pc}

000b578e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b578e:	b510      	push	{r4, lr}
   b5790:	f851 3b04 	ldr.w	r3, [r1], #4
   b5794:	4604      	mov	r4, r0
   b5796:	f840 3b04 	str.w	r3, [r0], #4
   b579a:	f7ff ffe3 	bl	b5764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b579e:	4620      	mov	r0, r4
   b57a0:	bd10      	pop	{r4, pc}

000b57a2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b57a2:	b510      	push	{r4, lr}
   b57a4:	f851 3b04 	ldr.w	r3, [r1], #4
   b57a8:	4604      	mov	r4, r0
   b57aa:	f840 3b04 	str.w	r3, [r0], #4
   b57ae:	f7ff ffd9 	bl	b5764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b57b2:	4620      	mov	r0, r4
   b57b4:	bd10      	pop	{r4, pc}

000b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b57b6:	b510      	push	{r4, lr}
   b57b8:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b57ba:	6800      	ldr	r0, [r0, #0]
   b57bc:	b108      	cbz	r0, b57c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b57be:	f7ff faa2 	bl	b4d06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b57c2:	4620      	mov	r0, r4
   b57c4:	bd10      	pop	{r4, pc}

000b57c6 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b57c6:	b510      	push	{r4, lr}
   b57c8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b57ca:	3004      	adds	r0, #4
   b57cc:	f7ff fff3 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b57d0:	4620      	mov	r0, r4
   b57d2:	bd10      	pop	{r4, pc}

000b57d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b57d4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b57d6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b57da:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b57dc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b57e0:	42ae      	cmp	r6, r5
   b57e2:	d004      	beq.n	b57ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b57e4:	1d28      	adds	r0, r5, #4
   b57e6:	f7ff ffe6 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b57ea:	3508      	adds	r5, #8
   b57ec:	e7f8      	b.n	b57e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b57ee:	6820      	ldr	r0, [r4, #0]
   b57f0:	f7ff f80e 	bl	b4810 <free>
}
   b57f4:	4620      	mov	r0, r4
   b57f6:	bd70      	pop	{r4, r5, r6, pc}

000b57f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b57f8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b57fa:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b57fe:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5800:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5804:	42ae      	cmp	r6, r5
   b5806:	d004      	beq.n	b5812 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b5808:	1d28      	adds	r0, r5, #4
   b580a:	f7ff ffd4 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b580e:	3508      	adds	r5, #8
   b5810:	e7f8      	b.n	b5804 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5812:	6820      	ldr	r0, [r4, #0]
   b5814:	f7fe fffc 	bl	b4810 <free>
}
   b5818:	4620      	mov	r0, r4
   b581a:	bd70      	pop	{r4, r5, r6, pc}

000b581c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b581c:	b510      	push	{r4, lr}
   b581e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b5820:	3024      	adds	r0, #36	; 0x24
   b5822:	f7ff ffe9 	bl	b57f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5826:	f104 0018 	add.w	r0, r4, #24
   b582a:	f7ff ffd3 	bl	b57d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b582e:	bd10      	pop	{r4, pc}

000b5830 <__tcf_0>:
    static BleLocalDevice instance;
   b5830:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b5832:	4b15      	ldr	r3, [pc, #84]	; (b5888 <__tcf_0+0x58>)
   b5834:	681c      	ldr	r4, [r3, #0]
   b5836:	b334      	cbz	r4, b5886 <__tcf_0+0x56>
    class function<_Res(_ArgTypes...)>
   b5838:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b583c:	f7ff fa4f 	bl	b4cde <_ZNSt14_Function_baseD1Ev>
   b5840:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5844:	f7ff fa4b 	bl	b4cde <_ZNSt14_Function_baseD1Ev>
   b5848:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b584c:	f7ff fa47 	bl	b4cde <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5850:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b5854:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5858:	42ae      	cmp	r6, r5
   b585a:	d004      	beq.n	b5866 <__tcf_0+0x36>
      ~__shared_ptr() = default;
   b585c:	1d28      	adds	r0, r5, #4
   b585e:	f7ff ffaa 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5862:	3508      	adds	r5, #8
   b5864:	e7f8      	b.n	b5858 <__tcf_0+0x28>
    ::free(ptr);
   b5866:	69a0      	ldr	r0, [r4, #24]
   b5868:	f7fe ffd2 	bl	b4810 <free>
    ~BleLocalDeviceImpl() = default;
   b586c:	f104 000c 	add.w	r0, r4, #12
   b5870:	f7ff ffc2 	bl	b57f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5874:	4620      	mov	r0, r4
   b5876:	f7ff ffad 	bl	b57d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b587a:	4620      	mov	r0, r4
   b587c:	2154      	movs	r1, #84	; 0x54
    static BleLocalDevice instance;
   b587e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5882:	f7fe bc0a 	b.w	b409a <_ZdlPvj>
   b5886:	bd70      	pop	{r4, r5, r6, pc}
   b5888:	2003e6f4 	.word	0x2003e6f4

000b588c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b588c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b588e:	b510      	push	{r4, lr}
      if (_M_empty())
   b5890:	b90a      	cbnz	r2, b5896 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b5892:	f001 ffd9 	bl	b7848 <_ZSt25__throw_bad_function_callv>
    }
   b5896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b589a:	68c3      	ldr	r3, [r0, #12]
   b589c:	4718      	bx	r3

000b589e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b589e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b58a2:	2300      	movs	r3, #0
   b58a4:	e9c0 3300 	strd	r3, r3, [r0]
   b58a8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b58aa:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b58ae:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b58b0:	4605      	mov	r5, r0
   b58b2:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b58b4:	dd4a      	ble.n	b594c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b58b6:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b58ba:	f7fe ffa1 	bl	b4800 <malloc>
            if (!d) {
   b58be:	4606      	mov	r6, r0
   b58c0:	2800      	cmp	r0, #0
   b58c2:	d043      	beq.n	b594c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b58c4:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b58c8:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b58ca:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b58ce:	d916      	bls.n	b58fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b58d0:	4550      	cmp	r0, sl
   b58d2:	d215      	bcs.n	b5900 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b58d4:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b58d8:	f1a4 0910 	sub.w	r9, r4, #16
   b58dc:	ebaa 0404 	sub.w	r4, sl, r4
   b58e0:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b58e2:	45d1      	cmp	r9, sl
   b58e4:	d01d      	beq.n	b5922 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b58e6:	b11c      	cbz	r4, b58f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b58e8:	4651      	mov	r1, sl
   b58ea:	4620      	mov	r0, r4
   b58ec:	f7ff f88c 	bl	b4a08 <_ZN6StringC1EOS_>
                end->~T();
   b58f0:	4650      	mov	r0, sl
   b58f2:	f7ff f80d 	bl	b4910 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b58f6:	f1aa 0a10 	sub.w	sl, sl, #16
   b58fa:	3c10      	subs	r4, #16
   b58fc:	e7f1      	b.n	b58e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b58fe:	d010      	beq.n	b5922 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b5900:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b5902:	45a2      	cmp	sl, r4
   b5904:	d00d      	beq.n	b5922 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b5906:	f1b9 0f00 	cmp.w	r9, #0
   b590a:	d003      	beq.n	b5914 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b590c:	4621      	mov	r1, r4
   b590e:	4648      	mov	r0, r9
   b5910:	f7ff f87a 	bl	b4a08 <_ZN6StringC1EOS_>
                p->~T();
   b5914:	4620      	mov	r0, r4
   b5916:	f7fe fffb 	bl	b4910 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b591a:	3410      	adds	r4, #16
   b591c:	f109 0910 	add.w	r9, r9, #16
   b5920:	e7ef      	b.n	b5902 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b5922:	6828      	ldr	r0, [r5, #0]
   b5924:	f7fe ff74 	bl	b4810 <free>
        capacity_ = n;
   b5928:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b592c:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b592e:	e9d7 4300 	ldrd	r4, r3, [r7]
   b5932:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b5936:	45a0      	cmp	r8, r4
   b5938:	d006      	beq.n	b5948 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b593a:	4621      	mov	r1, r4
   b593c:	4630      	mov	r0, r6
   b593e:	f7ff f87d 	bl	b4a3c <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b5942:	3410      	adds	r4, #16
   b5944:	3610      	adds	r6, #16
   b5946:	e7f6      	b.n	b5936 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b5948:	687b      	ldr	r3, [r7, #4]
   b594a:	606b      	str	r3, [r5, #4]
}
   b594c:	4628      	mov	r0, r5
   b594e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5952 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b5952:	b530      	push	{r4, r5, lr}
   b5954:	b08d      	sub	sp, #52	; 0x34
   b5956:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b5958:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b595c:	a801      	add	r0, sp, #4
   b595e:	f7ff ff9e 	bl	b589e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b5962:	9b02      	ldr	r3, [sp, #8]
   b5964:	2b00      	cmp	r3, #0
   b5966:	dd2f      	ble.n	b59c8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b5968:	f104 0114 	add.w	r1, r4, #20
   b596c:	a804      	add	r0, sp, #16
   b596e:	f7ff fbe3 	bl	b5138 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b5972:	f104 0108 	add.w	r1, r4, #8
   b5976:	a808      	add	r0, sp, #32
   b5978:	f7ff fbde 	bl	b5138 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b597c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b597e:	9b06      	ldr	r3, [sp, #24]
   b5980:	4313      	orrs	r3, r2
   b5982:	d01f      	beq.n	b59c4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b5984:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b5988:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b598c:	42ac      	cmp	r4, r5
   b598e:	d019      	beq.n	b59c4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b5990:	a904      	add	r1, sp, #16
   b5992:	4620      	mov	r0, r4
   b5994:	f7ff f8a8 	bl	b4ae8 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b5998:	b160      	cbz	r0, b59b4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b599a:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b599c:	a808      	add	r0, sp, #32
   b599e:	f7fe ffb7 	bl	b4910 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b59a2:	a804      	add	r0, sp, #16
   b59a4:	f7fe ffb4 	bl	b4910 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b59a8:	a801      	add	r0, sp, #4
   b59aa:	f7ff fe52 	bl	b5652 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b59ae:	4620      	mov	r0, r4
   b59b0:	b00d      	add	sp, #52	; 0x34
   b59b2:	bd30      	pop	{r4, r5, pc}
   b59b4:	4620      	mov	r0, r4
   b59b6:	a908      	add	r1, sp, #32
   b59b8:	f7ff f896 	bl	b4ae8 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b59bc:	3410      	adds	r4, #16
   b59be:	2800      	cmp	r0, #0
   b59c0:	d0e4      	beq.n	b598c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b59c2:	e7ea      	b.n	b599a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b59c4:	2400      	movs	r4, #0
   b59c6:	e7e9      	b.n	b599c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b59c8:	2401      	movs	r4, #1
   b59ca:	e7ed      	b.n	b59a8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b59cc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b59cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b59ce:	2300      	movs	r3, #0
   b59d0:	e9c0 3300 	strd	r3, r3, [r0]
   b59d4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b59d6:	684f      	ldr	r7, [r1, #4]
   b59d8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b59da:	4605      	mov	r5, r0
   b59dc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b59de:	dd3e      	ble.n	b5a5e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b59e0:	00f8      	lsls	r0, r7, #3
   b59e2:	f7fe ff0d 	bl	b4800 <malloc>
            if (!d) {
   b59e6:	4604      	mov	r4, r0
   b59e8:	b3c8      	cbz	r0, b5a5e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b59ea:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b59ee:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b59f0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b59f4:	d910      	bls.n	b5a18 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b59f6:	429c      	cmp	r4, r3
   b59f8:	d20f      	bcs.n	b5a1a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b59fa:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b59fc:	1a1a      	subs	r2, r3, r0
   b59fe:	f1a0 0c08 	sub.w	ip, r0, #8
   b5a02:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b5a04:	459c      	cmp	ip, r3
   b5a06:	d018      	beq.n	b5a3a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b5a08:	b11a      	cbz	r2, b5a12 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b5a0a:	6819      	ldr	r1, [r3, #0]
   b5a0c:	6011      	str	r1, [r2, #0]
   b5a0e:	6859      	ldr	r1, [r3, #4]
   b5a10:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b5a12:	3b08      	subs	r3, #8
   b5a14:	3a08      	subs	r2, #8
   b5a16:	e7f5      	b.n	b5a04 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b5a18:	d00f      	beq.n	b5a3a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b5a1a:	4601      	mov	r1, r0
   b5a1c:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b5a1e:	428b      	cmp	r3, r1
   b5a20:	d00b      	beq.n	b5a3a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b5a22:	b13a      	cbz	r2, b5a34 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b5a24:	f8d1 c000 	ldr.w	ip, [r1]
   b5a28:	f8c2 c000 	str.w	ip, [r2]
   b5a2c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b5a30:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b5a34:	3108      	adds	r1, #8
   b5a36:	3208      	adds	r2, #8
   b5a38:	e7f1      	b.n	b5a1e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b5a3a:	f7fe fee9 	bl	b4810 <free>
        data_ = d;
   b5a3e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5a40:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5a42:	e9d6 3100 	ldrd	r3, r1, [r6]
   b5a46:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b5a4a:	4298      	cmp	r0, r3
   b5a4c:	d006      	beq.n	b5a5c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b5a4e:	681a      	ldr	r2, [r3, #0]
   b5a50:	6022      	str	r2, [r4, #0]
   b5a52:	685a      	ldr	r2, [r3, #4]
   b5a54:	6062      	str	r2, [r4, #4]
   b5a56:	3308      	adds	r3, #8
   b5a58:	3408      	adds	r4, #8
   b5a5a:	e7f6      	b.n	b5a4a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b5a5c:	6069      	str	r1, [r5, #4]
}
   b5a5e:	4628      	mov	r0, r5
   b5a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5a62 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5a62:	b570      	push	{r4, r5, r6, lr}
   b5a64:	4604      	mov	r4, r0
        capacity_(0) {
   b5a66:	2000      	movs	r0, #0
   b5a68:	e9c4 0000 	strd	r0, r0, [r4]
   b5a6c:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5a6e:	684e      	ldr	r6, [r1, #4]
   b5a70:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5a72:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5a74:	dd12      	ble.n	b5a9c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b5a76:	0071      	lsls	r1, r6, #1
   b5a78:	f7fe fed2 	bl	b4820 <realloc>
            if (!d) {
   b5a7c:	b170      	cbz	r0, b5a9c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b5a7e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5a80:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5a82:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5a86:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b5a8a:	429a      	cmp	r2, r3
   b5a8c:	d004      	beq.n	b5a98 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b5a8e:	f833 1b02 	ldrh.w	r1, [r3], #2
   b5a92:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b5a96:	e7f8      	b.n	b5a8a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b5a98:	686b      	ldr	r3, [r5, #4]
   b5a9a:	6063      	str	r3, [r4, #4]
}
   b5a9c:	4620      	mov	r0, r4
   b5a9e:	bd70      	pop	{r4, r5, r6, pc}

000b5aa0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b5aa0:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b5aa2:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b5aa4:	4604      	mov	r4, r0
        if (!dismissed_) {
   b5aa6:	b923      	cbnz	r3, b5ab2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b5aa8:	6803      	ldr	r3, [r0, #0]
   b5aaa:	6818      	ldr	r0, [r3, #0]
   b5aac:	b108      	cbz	r0, b5ab2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b5aae:	f7fe feaf 	bl	b4810 <free>
            func_();
        }
    }
   b5ab2:	4620      	mov	r0, r4
   b5ab4:	bd10      	pop	{r4, pc}

000b5ab6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b5ab6:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b5ab8:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b5aba:	4604      	mov	r4, r0
        if (!dismissed_) {
   b5abc:	b923      	cbnz	r3, b5ac8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b5abe:	6803      	ldr	r3, [r0, #0]
   b5ac0:	6818      	ldr	r0, [r3, #0]
   b5ac2:	b108      	cbz	r0, b5ac8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b5ac4:	f7fe fea4 	bl	b4810 <free>
    }
   b5ac8:	4620      	mov	r0, r4
   b5aca:	bd10      	pop	{r4, pc}

000b5acc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b5acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b5ad0:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b5ad4:	b08f      	sub	sp, #60	; 0x3c
   b5ad6:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b5ad8:	f1b8 0f00 	cmp.w	r8, #0
   b5adc:	d072      	beq.n	b5bc4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b5ade:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b5ae0:	2d00      	cmp	r5, #0
   b5ae2:	d06f      	beq.n	b5bc4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b5ae4:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b5ae8:	231f      	movs	r3, #31
   b5aea:	2200      	movs	r2, #0
   b5aec:	21ff      	movs	r1, #255	; 0xff
   b5aee:	4648      	mov	r0, r9
   b5af0:	f7ff faef 	bl	b50d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b5af4:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5af6:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b5af8:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5afa:	2200      	movs	r2, #0
   b5afc:	4619      	mov	r1, r3
   b5afe:	4638      	mov	r0, r7
   b5b00:	f7ff fae7 	bl	b50d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b5b04:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5b06:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b5b08:	d006      	beq.n	b5b18 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b5b0a:	42ae      	cmp	r6, r5
   b5b0c:	d030      	beq.n	b5b70 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b5b0e:	2400      	movs	r4, #0
    }
   b5b10:	4620      	mov	r0, r4
   b5b12:	b00f      	add	sp, #60	; 0x3c
   b5b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b5b18:	4620      	mov	r0, r4
   b5b1a:	f7fe fe71 	bl	b4800 <malloc>
            dismissed_(false) {
   b5b1e:	ab03      	add	r3, sp, #12
   b5b20:	9304      	str	r3, [sp, #16]
   b5b22:	2300      	movs	r3, #0
   b5b24:	4604      	mov	r4, r0
   b5b26:	9003      	str	r0, [sp, #12]
   b5b28:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b5b2c:	b970      	cbnz	r0, b5b4c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b5b2e:	2320      	movs	r3, #32
   b5b30:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b5b34:	4b24      	ldr	r3, [pc, #144]	; (b5bc8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b5b36:	9300      	str	r3, [sp, #0]
   b5b38:	4924      	ldr	r1, [pc, #144]	; (b5bcc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b5b3a:	4603      	mov	r3, r0
   b5b3c:	aa06      	add	r2, sp, #24
   b5b3e:	2032      	movs	r0, #50	; 0x32
   b5b40:	f7fe fdd2 	bl	b46e8 <log_message>
                    return false;
   b5b44:	a804      	add	r0, sp, #16
   b5b46:	f7ff ffab 	bl	b5aa0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b5b4a:	e7e1      	b.n	b5b10 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b5b4c:	4602      	mov	r2, r0
   b5b4e:	21ff      	movs	r1, #255	; 0xff
   b5b50:	462b      	mov	r3, r5
   b5b52:	4648      	mov	r0, r9
   b5b54:	f7ff fabd 	bl	b50d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b5b58:	9803      	ldr	r0, [sp, #12]
   b5b5a:	462a      	mov	r2, r5
   b5b5c:	4641      	mov	r1, r8
   b5b5e:	f001 ff8f 	bl	b7a80 <memcmp>
   b5b62:	b118      	cbz	r0, b5b6c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b5b64:	a804      	add	r0, sp, #16
   b5b66:	f7ff ff9b 	bl	b5aa0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b5b6a:	e7ce      	b.n	b5b0a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b5b6c:	2401      	movs	r4, #1
   b5b6e:	e7e9      	b.n	b5b44 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b5b70:	4628      	mov	r0, r5
   b5b72:	f7fe fe45 	bl	b4800 <malloc>
   b5b76:	2400      	movs	r4, #0
   b5b78:	ab03      	add	r3, sp, #12
   b5b7a:	4606      	mov	r6, r0
   b5b7c:	9003      	str	r0, [sp, #12]
   b5b7e:	9304      	str	r3, [sp, #16]
   b5b80:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b5b84:	b978      	cbnz	r0, b5ba6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b5b86:	2320      	movs	r3, #32
   b5b88:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b5b8c:	4b0e      	ldr	r3, [pc, #56]	; (b5bc8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b5b8e:	9300      	str	r3, [sp, #0]
   b5b90:	490e      	ldr	r1, [pc, #56]	; (b5bcc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b5b92:	4603      	mov	r3, r0
   b5b94:	aa06      	add	r2, sp, #24
   b5b96:	2032      	movs	r0, #50	; 0x32
   b5b98:	f7fe fda6 	bl	b46e8 <log_message>
                    return false;
   b5b9c:	4634      	mov	r4, r6
   b5b9e:	a804      	add	r0, sp, #16
   b5ba0:	f7ff ff89 	bl	b5ab6 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b5ba4:	e7b4      	b.n	b5b10 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b5ba6:	4602      	mov	r2, r0
   b5ba8:	21ff      	movs	r1, #255	; 0xff
   b5baa:	462b      	mov	r3, r5
   b5bac:	4638      	mov	r0, r7
   b5bae:	f7ff fa90 	bl	b50d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b5bb2:	9803      	ldr	r0, [sp, #12]
   b5bb4:	462a      	mov	r2, r5
   b5bb6:	4641      	mov	r1, r8
   b5bb8:	f001 ff62 	bl	b7a80 <memcmp>
   b5bbc:	2800      	cmp	r0, #0
   b5bbe:	d1ee      	bne.n	b5b9e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b5bc0:	2401      	movs	r4, #1
   b5bc2:	e7ec      	b.n	b5b9e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b5bc4:	2401      	movs	r4, #1
   b5bc6:	e7a3      	b.n	b5b10 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b5bc8:	000b7de7 	.word	0x000b7de7
   b5bcc:	000b7da8 	.word	0x000b7da8

000b5bd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b5bd0:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b5bd2:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b5bd4:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5bd6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5bd8:	dd03      	ble.n	b5be2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b5bda:	f7fe fe21 	bl	b4820 <realloc>
            if (!d) {
   b5bde:	b918      	cbnz	r0, b5be8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5be0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b5be2:	f7fe fe15 	bl	b4810 <free>
        T* d = nullptr;
   b5be6:	2000      	movs	r0, #0
        data_ = d;
   b5be8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5bea:	60a5      	str	r5, [r4, #8]
        return true;
   b5bec:	2001      	movs	r0, #1
   b5bee:	e7f7      	b.n	b5be0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b5bf0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5bf0:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b5bf2:	6883      	ldr	r3, [r0, #8]
   b5bf4:	428b      	cmp	r3, r1
   b5bf6:	da02      	bge.n	b5bfe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b5bf8:	f7ff ffea 	bl	b5bd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b5bfc:	bd08      	pop	{r3, pc}
    return true;
   b5bfe:	2001      	movs	r0, #1
   b5c00:	e7fc      	b.n	b5bfc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b5c02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5c02:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5c04:	2300      	movs	r3, #0
   b5c06:	e9c0 3300 	strd	r3, r3, [r0]
   b5c0a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5c0c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5c0e:	6849      	ldr	r1, [r1, #4]
   b5c10:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5c12:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5c14:	dd10      	ble.n	b5c38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b5c16:	f7ff ffdb 	bl	b5bd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5c1a:	b168      	cbz	r0, b5c38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5c1c:	e9d5 3100 	ldrd	r3, r1, [r5]
   b5c20:	6822      	ldr	r2, [r4, #0]
   b5c22:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b5c24:	4299      	cmp	r1, r3
   b5c26:	d005      	beq.n	b5c34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b5c28:	b10a      	cbz	r2, b5c2e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b5c2a:	7818      	ldrb	r0, [r3, #0]
   b5c2c:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b5c2e:	3301      	adds	r3, #1
   b5c30:	3201      	adds	r2, #1
   b5c32:	e7f7      	b.n	b5c24 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b5c34:	686b      	ldr	r3, [r5, #4]
   b5c36:	6063      	str	r3, [r4, #4]
}
   b5c38:	4620      	mov	r0, r4
   b5c3a:	bd38      	pop	{r3, r4, r5, pc}

000b5c3c <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b5c3c:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b5c3e:	680b      	ldr	r3, [r1, #0]
   b5c40:	6003      	str	r3, [r0, #0]
   b5c42:	684b      	ldr	r3, [r1, #4]
   b5c44:	6043      	str	r3, [r0, #4]
   b5c46:	4604      	mov	r4, r0
   b5c48:	460d      	mov	r5, r1
class BleAdvertisingData {
   b5c4a:	3008      	adds	r0, #8
   b5c4c:	3108      	adds	r1, #8
   b5c4e:	f7ff ffd8 	bl	b5c02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b5c52:	f105 0114 	add.w	r1, r5, #20
   b5c56:	f104 0014 	add.w	r0, r4, #20
   b5c5a:	f7ff ffd2 	bl	b5c02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b5c5e:	f895 3020 	ldrb.w	r3, [r5, #32]
   b5c62:	f884 3020 	strb.w	r3, [r4, #32]
   b5c66:	4620      	mov	r0, r4
   b5c68:	bd38      	pop	{r3, r4, r5, pc}

000b5c6a <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b5c6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5c6c:	4604      	mov	r4, r0
   b5c6e:	a801      	add	r0, sp, #4
   b5c70:	f7ff ffc7 	bl	b5c02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5c74:	9b01      	ldr	r3, [sp, #4]
   b5c76:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c78:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5c7a:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c7c:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5c7e:	6062      	str	r2, [r4, #4]
   b5c80:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5c82:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c84:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5c86:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5c88:	9001      	str	r0, [sp, #4]
   b5c8a:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b5c8c:	f7fe fdc0 	bl	b4810 <free>
   b5c90:	b004      	add	sp, #16
   b5c92:	bd10      	pop	{r4, pc}

000b5c94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c98:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5c9a:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5c9c:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5c9e:	4419      	add	r1, r3
   b5ca0:	6883      	ldr	r3, [r0, #8]
   b5ca2:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5ca4:	4604      	mov	r4, r0
   b5ca6:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5ca8:	dc12      	bgt.n	b5cd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b5caa:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5cac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5cae:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5cb0:	1bd2      	subs	r2, r2, r7
   b5cb2:	4631      	mov	r1, r6
   b5cb4:	1970      	adds	r0, r6, r5
   b5cb6:	f001 ff01 	bl	b7abc <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b5cba:	462a      	mov	r2, r5
   b5cbc:	4641      	mov	r1, r8
   b5cbe:	4630      	mov	r0, r6
   b5cc0:	f001 feee 	bl	b7aa0 <memcpy>
    size_ += n;
   b5cc4:	6863      	ldr	r3, [r4, #4]
   b5cc6:	442b      	add	r3, r5
   b5cc8:	6063      	str	r3, [r4, #4]
    return true;
   b5cca:	2001      	movs	r0, #1
}
   b5ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5cd0:	f7ff ff7e 	bl	b5bd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5cd4:	2800      	cmp	r0, #0
   b5cd6:	d1e8      	bne.n	b5caa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b5cd8:	e7f8      	b.n	b5ccc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b5cda <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b5cda:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b5cdc:	460a      	mov	r2, r1
   b5cde:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b5ce0:	b510      	push	{r4, lr}
   b5ce2:	4604      	mov	r4, r0
    size_ = 0;
   b5ce4:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b5ce6:	b102      	cbz	r2, b5cea <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b5ce8:	b90b      	cbnz	r3, b5cee <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b5cea:	2000      	movs	r0, #0
}
   b5cec:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b5cee:	2bff      	cmp	r3, #255	; 0xff
   b5cf0:	bf28      	it	cs
   b5cf2:	23ff      	movcs	r3, #255	; 0xff
   b5cf4:	f7ff ffce 	bl	b5c94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b5cf8:	2800      	cmp	r0, #0
   b5cfa:	d0f7      	beq.n	b5cec <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b5cfc:	6860      	ldr	r0, [r4, #4]
   b5cfe:	e7f5      	b.n	b5cec <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b5d00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d02:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d04:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5d08:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5d0a:	4604      	mov	r4, r0
   b5d0c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d0e:	da0b      	bge.n	b5d28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b5d10:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5d12:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5d14:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5d16:	1b52      	subs	r2, r2, r5
   b5d18:	1c48      	adds	r0, r1, #1
   b5d1a:	f001 fecf 	bl	b7abc <memmove>
    new(p) T(std::move(value));
   b5d1e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b5d20:	6863      	ldr	r3, [r4, #4]
   b5d22:	3301      	adds	r3, #1
   b5d24:	6063      	str	r3, [r4, #4]
}
   b5d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d28:	3101      	adds	r1, #1
   b5d2a:	f7ff ff51 	bl	b5bd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5d2e:	2800      	cmp	r0, #0
   b5d30:	d1ee      	bne.n	b5d10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b5d32:	e7f8      	b.n	b5d26 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b5d34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5d34:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b5d36:	6841      	ldr	r1, [r0, #4]
   b5d38:	f7ff bfe2 	b.w	b5d00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b5d3c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5d3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5d40:	4604      	mov	r4, r0
   b5d42:	461d      	mov	r5, r3
   b5d44:	460f      	mov	r7, r1
   b5d46:	ab01      	add	r3, sp, #4
   b5d48:	4690      	mov	r8, r2
   b5d4a:	460a      	mov	r2, r1
   b5d4c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5d50:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b5d54:	f7fe ff28 	bl	b4ba8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b5d58:	1cae      	adds	r6, r5, #2
   b5d5a:	6863      	ldr	r3, [r4, #4]
   b5d5c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b5d5e:	f1b9 0f00 	cmp.w	r9, #0
   b5d62:	d126      	bne.n	b5db2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b5d64:	b328      	cbz	r0, b5db2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5d66:	4433      	add	r3, r6
   b5d68:	1a1b      	subs	r3, r3, r0
   b5d6a:	2bff      	cmp	r3, #255	; 0xff
   b5d6c:	d809      	bhi.n	b5d82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b5d6e:	9901      	ldr	r1, [sp, #4]
   b5d70:	4620      	mov	r0, r4
   b5d72:	f7ff fccb 	bl	b570c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5d76:	6861      	ldr	r1, [r4, #4]
   b5d78:	4620      	mov	r0, r4
   b5d7a:	4431      	add	r1, r6
   b5d7c:	f7ff ff38 	bl	b5bf0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5d80:	b918      	cbnz	r0, b5d8a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b5d82:	6860      	ldr	r0, [r4, #4]
}
   b5d84:	b003      	add	sp, #12
   b5d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b5d8a:	1c6a      	adds	r2, r5, #1
   b5d8c:	9901      	ldr	r1, [sp, #4]
   b5d8e:	b2d2      	uxtb	r2, r2
   b5d90:	4620      	mov	r0, r4
   b5d92:	f7ff ffb5 	bl	b5d00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b5d96:	9901      	ldr	r1, [sp, #4]
   b5d98:	463a      	mov	r2, r7
   b5d9a:	3101      	adds	r1, #1
   b5d9c:	4620      	mov	r0, r4
   b5d9e:	f7ff ffaf 	bl	b5d00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b5da2:	9901      	ldr	r1, [sp, #4]
   b5da4:	462b      	mov	r3, r5
   b5da6:	4642      	mov	r2, r8
   b5da8:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b5daa:	4620      	mov	r0, r4
   b5dac:	f7ff ff72 	bl	b5c94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b5db0:	e7e7      	b.n	b5d82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5db2:	18f1      	adds	r1, r6, r3
   b5db4:	29ff      	cmp	r1, #255	; 0xff
   b5db6:	d8e4      	bhi.n	b5d82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5db8:	4620      	mov	r0, r4
   b5dba:	f7ff ff19 	bl	b5bf0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5dbe:	2800      	cmp	r0, #0
   b5dc0:	d0df      	beq.n	b5d82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b5dc2:	1c69      	adds	r1, r5, #1
   b5dc4:	b2c9      	uxtb	r1, r1
   b5dc6:	4620      	mov	r0, r4
   b5dc8:	f7ff ffb4 	bl	b5d34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b5dcc:	4639      	mov	r1, r7
   b5dce:	4620      	mov	r0, r4
   b5dd0:	f7ff ffb0 	bl	b5d34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b5dd4:	6861      	ldr	r1, [r4, #4]
   b5dd6:	462b      	mov	r3, r5
   b5dd8:	4642      	mov	r2, r8
   b5dda:	e7e6      	b.n	b5daa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b5ddc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5ddc:	b430      	push	{r4, r5}
   b5dde:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b5de2:	b11a      	cbz	r2, b5dec <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b5de4:	9502      	str	r5, [sp, #8]
}
   b5de6:	bc30      	pop	{r4, r5}
   b5de8:	f7ff bfa8 	b.w	b5d3c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b5dec:	6840      	ldr	r0, [r0, #4]
}
   b5dee:	bc30      	pop	{r4, r5}
   b5df0:	4770      	bx	lr

000b5df2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b5df2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b5df4:	2300      	movs	r3, #0
   b5df6:	e9c0 3300 	strd	r3, r3, [r0]
   b5dfa:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5dfc:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5dfe:	9300      	str	r3, [sp, #0]
   b5e00:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5e02:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5e06:	4619      	mov	r1, r3
   b5e08:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b5e0c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5e0e:	f7ff ffe5 	bl	b5ddc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b5e12:	4620      	mov	r0, r4
   b5e14:	b004      	add	sp, #16
   b5e16:	bd10      	pop	{r4, pc}

000b5e18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5e18:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e1c:	4604      	mov	r4, r0
   b5e1e:	460d      	mov	r5, r1
   b5e20:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5e22:	d914      	bls.n	b5e4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5e24:	4290      	cmp	r0, r2
   b5e26:	d213      	bcs.n	b5e50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5e28:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5e2c:	1a75      	subs	r5, r6, r1
   b5e2e:	f1a1 0708 	sub.w	r7, r1, #8
   b5e32:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5e34:	42b7      	cmp	r7, r6
   b5e36:	d018      	beq.n	b5e6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5e38:	b11c      	cbz	r4, b5e42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5e3a:	4631      	mov	r1, r6
   b5e3c:	4620      	mov	r0, r4
   b5e3e:	f7ff fcb0 	bl	b57a2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5e42:	1d30      	adds	r0, r6, #4
   b5e44:	f7ff fcb7 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5e48:	3e08      	subs	r6, #8
   b5e4a:	3c08      	subs	r4, #8
   b5e4c:	e7f2      	b.n	b5e34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5e4e:	d00c      	beq.n	b5e6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5e50:	42b5      	cmp	r5, r6
   b5e52:	d00a      	beq.n	b5e6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5e54:	b11c      	cbz	r4, b5e5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5e56:	4629      	mov	r1, r5
   b5e58:	4620      	mov	r0, r4
   b5e5a:	f7ff fca2 	bl	b57a2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5e5e:	1d28      	adds	r0, r5, #4
   b5e60:	f7ff fca9 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5e64:	3508      	adds	r5, #8
   b5e66:	3408      	adds	r4, #8
   b5e68:	e7f2      	b.n	b5e50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5e6e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5e70:	6846      	ldr	r6, [r0, #4]
   b5e72:	4668      	mov	r0, sp
   b5e74:	f7ff fc95 	bl	b57a2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5e78:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b5e7c:	429f      	cmp	r7, r3
   b5e7e:	db12      	blt.n	b5ea6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b5e80:	3701      	adds	r7, #1
        if (n > 0) {
   b5e82:	2f00      	cmp	r7, #0
   b5e84:	dd29      	ble.n	b5eda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b5e86:	00f8      	lsls	r0, r7, #3
   b5e88:	f7fe fcba 	bl	b4800 <malloc>
            if (!d) {
   b5e8c:	4605      	mov	r5, r0
   b5e8e:	b1f0      	cbz	r0, b5ece <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b5e90:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5e94:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5e98:	f7ff ffbe 	bl	b5e18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5e9c:	6820      	ldr	r0, [r4, #0]
   b5e9e:	f7fe fcb7 	bl	b4810 <free>
        data_ = d;
   b5ea2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5ea4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5ea6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5ea8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5eaa:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b5eae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5eb2:	4631      	mov	r1, r6
   b5eb4:	f106 0008 	add.w	r0, r6, #8
   b5eb8:	f7ff ffae 	bl	b5e18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5ebc:	b11e      	cbz	r6, b5ec6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b5ebe:	4669      	mov	r1, sp
   b5ec0:	4630      	mov	r0, r6
   b5ec2:	f7ff fc6e 	bl	b57a2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b5ec6:	6863      	ldr	r3, [r4, #4]
   b5ec8:	3301      	adds	r3, #1
   b5eca:	6063      	str	r3, [r4, #4]
    return true;
   b5ecc:	2501      	movs	r5, #1
   b5ece:	a801      	add	r0, sp, #4
   b5ed0:	f7ff fc71 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5ed4:	4628      	mov	r0, r5
   b5ed6:	b003      	add	sp, #12
   b5ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b5eda:	2500      	movs	r5, #0
   b5edc:	e7de      	b.n	b5e9c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b5ede <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b5ee0:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5ee4:	4605      	mov	r5, r0
   b5ee6:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b5ee8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b5eec:	42a6      	cmp	r6, r4
   b5eee:	d005      	beq.n	b5efc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b5ef0:	4639      	mov	r1, r7
   b5ef2:	4620      	mov	r0, r4
   b5ef4:	f7ff fac5 	bl	b5482 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b5ef8:	b108      	cbz	r0, b5efe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b5efa:	b914      	cbnz	r4, b5f02 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b5efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b5efe:	3408      	adds	r4, #8
   b5f00:	e7f4      	b.n	b5eec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b5f02:	1d20      	adds	r0, r4, #4
   b5f04:	f7ff fc57 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b5f08:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5f0c:	f104 0108 	add.w	r1, r4, #8
   b5f10:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5f14:	4620      	mov	r0, r4
   b5f16:	f7ff ff7f 	bl	b5e18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b5f1a:	686b      	ldr	r3, [r5, #4]
   b5f1c:	3b01      	subs	r3, #1
   b5f1e:	606b      	str	r3, [r5, #4]
    return true;
   b5f20:	e7ec      	b.n	b5efc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b5f24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f28:	4605      	mov	r5, r0
   b5f2a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b5f2c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5f2e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b5f30:	f7fe ff22 	bl	b4d78 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b5f34:	682e      	ldr	r6, [r5, #0]
   b5f36:	2e04      	cmp	r6, #4
   b5f38:	d075      	beq.n	b6026 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
   b5f3a:	d807      	bhi.n	b5f4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b5f3c:	2e03      	cmp	r6, #3
   b5f3e:	d032      	beq.n	b5fa6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x82>
        WiringBleLock lk;
   b5f40:	a803      	add	r0, sp, #12
   b5f42:	f7fe ff27 	bl	b4d94 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b5f46:	b00e      	add	sp, #56	; 0x38
   b5f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b5f4c:	f1a6 030c 	sub.w	r3, r6, #12
   b5f50:	2b04      	cmp	r3, #4
   b5f52:	d8f5      	bhi.n	b5f40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5f54:	89a9      	ldrh	r1, [r5, #12]
   b5f56:	4620      	mov	r0, r4
   b5f58:	f7ff f94d 	bl	b51f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5f5c:	2800      	cmp	r0, #0
   b5f5e:	d0ef      	beq.n	b5f40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b5f60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b5f62:	2b00      	cmp	r3, #0
   b5f64:	d0ec      	beq.n	b5f40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEventPayload payload = {};
   b5f66:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5f68:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b5f6a:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5f6e:	d002      	beq.n	b5f76 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x52>
   b5f70:	2e10      	cmp	r6, #16
   b5f72:	f040 80a0 	bne.w	b60b6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x192>
                        BlePairingEventPayload payload = {};
   b5f76:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b5f78:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b5f7a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b5f7c:	2506      	movs	r5, #6
                        };
   b5f7e:	f88d 3015 	strb.w	r3, [sp, #21]
   b5f82:	9104      	str	r1, [sp, #16]
   b5f84:	f88d 2014 	strb.w	r2, [sp, #20]
   b5f88:	9006      	str	r0, [sp, #24]
   b5f8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b5f8e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b5f90:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b5f94:	9508      	str	r5, [sp, #32]
   b5f96:	e883 0003 	stmia.w	r3, {r0, r1}
   b5f9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5f9c:	a906      	add	r1, sp, #24
   b5f9e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5fa2:	4798      	blx	r3
   b5fa4:	e7cc      	b.n	b5f40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b5fa6:	a804      	add	r0, sp, #16
   b5fa8:	f7ff fa12 	bl	b53d0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b5fac:	9b04      	ldr	r3, [sp, #16]
   b5fae:	89aa      	ldrh	r2, [r5, #12]
   b5fb0:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b5fb2:	6869      	ldr	r1, [r5, #4]
   b5fb4:	9804      	ldr	r0, [sp, #16]
   b5fb6:	3108      	adds	r1, #8
   b5fb8:	3002      	adds	r0, #2
   b5fba:	f7fe fef7 	bl	b4dac <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b5fbe:	a904      	add	r1, sp, #16
   b5fc0:	a806      	add	r0, sp, #24
   b5fc2:	f7ff fbee 	bl	b57a2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b5fc6:	a906      	add	r1, sp, #24
   b5fc8:	f104 0018 	add.w	r0, r4, #24
   b5fcc:	f7ff ff4e 	bl	b5e6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b5fd0:	4605      	mov	r5, r0
   b5fd2:	a807      	add	r0, sp, #28
   b5fd4:	f7ff fbef 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5fd8:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b5fda:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b5fdc:	b98d      	cbnz	r5, b6002 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xde>
                    LOG(ERROR, "Failed to append peer Central device.");
   b5fde:	4b3d      	ldr	r3, [pc, #244]	; (b60d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b5fe0:	493d      	ldr	r1, [pc, #244]	; (b60d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b5fe2:	9300      	str	r3, [sp, #0]
   b5fe4:	2032      	movs	r0, #50	; 0x32
   b5fe6:	462b      	mov	r3, r5
   b5fe8:	aa06      	add	r2, sp, #24
   b5fea:	9507      	str	r5, [sp, #28]
   b5fec:	f7fe fb7c 	bl	b46e8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b5ff0:	9b04      	ldr	r3, [sp, #16]
   b5ff2:	4629      	mov	r1, r5
   b5ff4:	8818      	ldrh	r0, [r3, #0]
   b5ff6:	f7fe fa3f 	bl	b4478 <hal_ble_gap_disconnect>
   b5ffa:	a805      	add	r0, sp, #20
   b5ffc:	f7ff fbdb 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6000:	e79e      	b.n	b5f40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b6002:	4a36      	ldr	r2, [pc, #216]	; (b60dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b8>)
   b6004:	9200      	str	r2, [sp, #0]
   b6006:	2300      	movs	r3, #0
   b6008:	4933      	ldr	r1, [pc, #204]	; (b60d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b600a:	9307      	str	r3, [sp, #28]
   b600c:	aa06      	add	r2, sp, #24
   b600e:	2001      	movs	r0, #1
   b6010:	f7fe fb6a 	bl	b46e8 <log_message>
                if (impl->connectedCallback_) {
   b6014:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6016:	2b00      	cmp	r3, #0
   b6018:	d0ef      	beq.n	b5ffa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
                    impl->connectedCallback_(peer);
   b601a:	a904      	add	r1, sp, #16
   b601c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6020:	f7ff fc34 	bl	b588c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b6024:	e7e9      	b.n	b5ffa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6026:	89a9      	ldrh	r1, [r5, #12]
   b6028:	4620      	mov	r0, r4
   b602a:	f7ff f8e4 	bl	b51f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b602e:	4606      	mov	r6, r0
   b6030:	2800      	cmp	r0, #0
   b6032:	d085      	beq.n	b5f40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b6034:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b6036:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b603a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b603e:	8029      	strh	r1, [r5, #0]
   b6040:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b6044:	429a      	cmp	r2, r3
   b6046:	d003      	beq.n	b6050 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   b6048:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b604c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b604e:	e7f9      	b.n	b6044 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    destruct(data_, data_ + size_);
   b6050:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b6054:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6058:	45b8      	cmp	r8, r7
   b605a:	d004      	beq.n	b6066 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x142>
      ~__shared_ptr() = default;
   b605c:	1d38      	adds	r0, r7, #4
   b605e:	f7ff fbaa 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6062:	3708      	adds	r7, #8
   b6064:	e7f8      	b.n	b6058 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x134>
    size_ = 0;
   b6066:	2300      	movs	r3, #0
   b6068:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b606a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b606e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6072:	45b8      	cmp	r8, r7
   b6074:	d004      	beq.n	b6080 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
   b6076:	1d38      	adds	r0, r7, #4
   b6078:	f7ff fb9d 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b607c:	3708      	adds	r7, #8
   b607e:	e7f8      	b.n	b6072 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    size_ = 0;
   b6080:	2300      	movs	r3, #0
   b6082:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b6084:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b6086:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6088:	b123      	cbz	r3, b6094 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x170>
                        impl->disconnectedCallback_(*peer);
   b608a:	4631      	mov	r1, r6
   b608c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6090:	f7ff fbfc 	bl	b588c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b6094:	2300      	movs	r3, #0
   b6096:	2220      	movs	r2, #32
   b6098:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b609c:	4a10      	ldr	r2, [pc, #64]	; (b60e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1bc>)
   b609e:	9200      	str	r2, [sp, #0]
   b60a0:	490d      	ldr	r1, [pc, #52]	; (b60d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b60a2:	aa06      	add	r2, sp, #24
   b60a4:	2001      	movs	r0, #1
   b60a6:	f7fe fb1f 	bl	b46e8 <log_message>
                    impl->peers_.removeOne(*peer);
   b60aa:	4631      	mov	r1, r6
   b60ac:	f104 0018 	add.w	r0, r4, #24
   b60b0:	f7ff ff15 	bl	b5ede <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b60b4:	e744      	b.n	b5f40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b60b6:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b60b8:	bf01      	itttt	eq
   b60ba:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b60bc:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b60be:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b60c2:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b60c4:	bf0f      	iteee	eq
   b60c6:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b60ca:	461a      	movne	r2, r3
   b60cc:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b60ce:	461d      	movne	r5, r3
   b60d0:	e755      	b.n	b5f7e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5a>
   b60d2:	bf00      	nop
   b60d4:	000b7e02 	.word	0x000b7e02
   b60d8:	000b7da8 	.word	0x000b7da8
   b60dc:	000b7e28 	.word	0x000b7e28
   b60e0:	000b7e45 	.word	0x000b7e45

000b60e4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b60e4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b60e6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b60e8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b60ea:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b60ec:	dd05      	ble.n	b60fa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b60ee:	2114      	movs	r1, #20
   b60f0:	4369      	muls	r1, r5
   b60f2:	f7fe fb95 	bl	b4820 <realloc>
            if (!d) {
   b60f6:	b918      	cbnz	r0, b6100 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b60f8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b60fa:	f7fe fb89 	bl	b4810 <free>
        T* d = nullptr;
   b60fe:	2000      	movs	r0, #0
        data_ = d;
   b6100:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6102:	60a5      	str	r5, [r4, #8]
        return true;
   b6104:	2001      	movs	r0, #1
   b6106:	e7f7      	b.n	b60f8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b6108 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b610c:	2400      	movs	r4, #0
   b610e:	e9c0 4400 	strd	r4, r4, [r0]
   b6112:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6114:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6116:	6849      	ldr	r1, [r1, #4]
   b6118:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b611a:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b611c:	dd1a      	ble.n	b6154 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b611e:	f7ff ffe1 	bl	b60e4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6122:	b1b8      	cbz	r0, b6154 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6124:	e9d8 9300 	ldrd	r9, r3, [r8]
   b6128:	f04f 0c14 	mov.w	ip, #20
   b612c:	f8d7 e000 	ldr.w	lr, [r7]
   b6130:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b6134:	eb09 0504 	add.w	r5, r9, r4
   b6138:	45ac      	cmp	ip, r5
   b613a:	d008      	beq.n	b614e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b613c:	eb1e 0604 	adds.w	r6, lr, r4
   b6140:	bf1f      	itttt	ne
   b6142:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b6144:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b6146:	682b      	ldrne	r3, [r5, #0]
   b6148:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b614a:	3414      	adds	r4, #20
   b614c:	e7f2      	b.n	b6134 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b614e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6152:	607b      	str	r3, [r7, #4]
}
   b6154:	4638      	mov	r0, r7
   b6156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b615a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b615a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b615e:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b6162:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6164:	6883      	ldr	r3, [r0, #8]
   b6166:	19e9      	adds	r1, r5, r7
   b6168:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b616a:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b616c:	dc17      	bgt.n	b619e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b616e:	2314      	movs	r3, #20
   b6170:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b6172:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6174:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b6176:	fb03 f907 	mul.w	r9, r3, r7
   b617a:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b617c:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b617e:	1b52      	subs	r2, r2, r5
   b6180:	4631      	mov	r1, r6
   b6182:	eb06 0009 	add.w	r0, r6, r9
   b6186:	f001 fc99 	bl	b7abc <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b618a:	464a      	mov	r2, r9
   b618c:	4641      	mov	r1, r8
   b618e:	4630      	mov	r0, r6
   b6190:	f001 fc86 	bl	b7aa0 <memcpy>
    size_ += n;
   b6194:	6863      	ldr	r3, [r4, #4]
   b6196:	443b      	add	r3, r7
   b6198:	6063      	str	r3, [r4, #4]
}
   b619a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b619e:	f7ff ffa1 	bl	b60e4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b61a2:	2800      	cmp	r0, #0
   b61a4:	d1e3      	bne.n	b616e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b61a6:	e7f8      	b.n	b619a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b61a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b61a8:	b082      	sub	sp, #8
   b61aa:	b570      	push	{r4, r5, r6, lr}
   b61ac:	460c      	mov	r4, r1
   b61ae:	a904      	add	r1, sp, #16
   b61b0:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b61b4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b61b8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b61ba:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b61bc:	da17      	bge.n	b61ee <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b61be:	2314      	movs	r3, #20
   b61c0:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b61c4:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b61c6:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b61c8:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b61ca:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b61cc:	1a52      	subs	r2, r2, r1
   b61ce:	18e0      	adds	r0, r4, r3
   b61d0:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b61d2:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b61d4:	f001 fc72 	bl	b7abc <memmove>
    new(p) T(std::move(value));
   b61d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b61da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61dc:	6833      	ldr	r3, [r6, #0]
   b61de:	6023      	str	r3, [r4, #0]
    ++size_;
   b61e0:	686b      	ldr	r3, [r5, #4]
   b61e2:	3301      	adds	r3, #1
   b61e4:	606b      	str	r3, [r5, #4]
}
   b61e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b61ea:	b002      	add	sp, #8
   b61ec:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b61ee:	3101      	adds	r1, #1
   b61f0:	f7ff ff78 	bl	b60e4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b61f4:	2800      	cmp	r0, #0
   b61f6:	d1e2      	bne.n	b61be <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b61f8:	e7f5      	b.n	b61e6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b61fa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b61fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b61fe:	2400      	movs	r4, #0
   b6200:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b6202:	1e93      	subs	r3, r2, #2
   b6204:	e9c0 4400 	strd	r4, r4, [r0]
   b6208:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b620a:	4605      	mov	r5, r0
   b620c:	460f      	mov	r7, r1
   b620e:	4690      	mov	r8, r2
   b6210:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b6212:	9305      	str	r3, [sp, #20]
    return size_;
   b6214:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b6216:	428c      	cmp	r4, r1
   b6218:	da72      	bge.n	b6300 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b621a:	6838      	ldr	r0, [r7, #0]
   b621c:	ab07      	add	r3, sp, #28
   b621e:	4642      	mov	r2, r8
   b6220:	1b09      	subs	r1, r1, r4
   b6222:	4420      	add	r0, r4
   b6224:	f7fe fcc0 	bl	b4ba8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b6228:	4606      	mov	r6, r0
   b622a:	2800      	cmp	r0, #0
   b622c:	d068      	beq.n	b6300 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b622e:	9b05      	ldr	r3, [sp, #20]
   b6230:	2b01      	cmp	r3, #1
   b6232:	d82f      	bhi.n	b6294 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b6234:	f1a0 0b02 	sub.w	fp, r0, #2
   b6238:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b623c:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b6240:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b6244:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b6246:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b6248:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b624a:	d055      	beq.n	b62f8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b624c:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b624e:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b6252:	4413      	add	r3, r2
   b6254:	a808      	add	r0, sp, #32
   b6256:	78d9      	ldrb	r1, [r3, #3]
   b6258:	789b      	ldrb	r3, [r3, #2]
   b625a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b625e:	f7fe fe22 	bl	b4ea6 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b6262:	f10d 0e20 	add.w	lr, sp, #32
   b6266:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b626a:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b626e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6272:	f8de 3000 	ldr.w	r3, [lr]
   b6276:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b627a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b627e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b6282:	ab0d      	add	r3, sp, #52	; 0x34
   b6284:	cb0c      	ldmia	r3, {r2, r3}
   b6286:	6869      	ldr	r1, [r5, #4]
   b6288:	4628      	mov	r0, r5
   b628a:	f7ff ff8d 	bl	b61a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b628e:	f109 0901 	add.w	r9, r9, #1
   b6292:	e7d7      	b.n	b6244 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b6294:	f1a8 0306 	sub.w	r3, r8, #6
   b6298:	2b01      	cmp	r3, #1
   b629a:	d82d      	bhi.n	b62f8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b629c:	f1a0 0b02 	sub.w	fp, r0, #2
   b62a0:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b62a4:	f04f 0900 	mov.w	r9, #0
   b62a8:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b62ac:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b62ae:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b62b0:	d022      	beq.n	b62f8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b62b2:	3302      	adds	r3, #2
    return data_[i];
   b62b4:	6839      	ldr	r1, [r7, #0]
   b62b6:	4423      	add	r3, r4
   b62b8:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b62bc:	2201      	movs	r2, #1
   b62be:	4419      	add	r1, r3
   b62c0:	a808      	add	r0, sp, #32
   b62c2:	f7fe fdd1 	bl	b4e68 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b62c6:	f10d 0e20 	add.w	lr, sp, #32
   b62ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b62ce:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b62d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b62d6:	f8de 3000 	ldr.w	r3, [lr]
   b62da:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b62de:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b62e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b62e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b62ea:	6869      	ldr	r1, [r5, #4]
   b62ec:	4628      	mov	r0, r5
   b62ee:	f7ff ff5b 	bl	b61a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b62f2:	f109 0901 	add.w	r9, r9, #1
   b62f6:	e7d9      	b.n	b62ac <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b62f8:	9b07      	ldr	r3, [sp, #28]
   b62fa:	441c      	add	r4, r3
   b62fc:	4434      	add	r4, r6
   b62fe:	e789      	b.n	b6214 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b6300:	4628      	mov	r0, r5
   b6302:	b013      	add	sp, #76	; 0x4c
   b6304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6308 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b6308:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b630a:	2300      	movs	r3, #0
   b630c:	b085      	sub	sp, #20
   b630e:	e9c0 3300 	strd	r3, r3, [r0]
   b6312:	6083      	str	r3, [r0, #8]
   b6314:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b6316:	2202      	movs	r2, #2
   b6318:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b631a:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b631c:	f7ff ff6d 	bl	b61fa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6320:	a901      	add	r1, sp, #4
   b6322:	4620      	mov	r0, r4
   b6324:	f7ff ff19 	bl	b615a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6328:	a801      	add	r0, sp, #4
   b632a:	f7ff f9a4 	bl	b5676 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b632e:	2202      	movs	r2, #2
   b6330:	4629      	mov	r1, r5
   b6332:	a801      	add	r0, sp, #4
   b6334:	f7ff ff61 	bl	b61fa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6338:	a901      	add	r1, sp, #4
   b633a:	4620      	mov	r0, r4
   b633c:	f7ff ff0d 	bl	b615a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6340:	a801      	add	r0, sp, #4
   b6342:	f7ff f998 	bl	b5676 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b6346:	2203      	movs	r2, #3
   b6348:	4629      	mov	r1, r5
   b634a:	a801      	add	r0, sp, #4
   b634c:	f7ff ff55 	bl	b61fa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6350:	a901      	add	r1, sp, #4
   b6352:	4620      	mov	r0, r4
   b6354:	f7ff ff01 	bl	b615a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6358:	a801      	add	r0, sp, #4
   b635a:	f7ff f98c 	bl	b5676 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b635e:	2206      	movs	r2, #6
   b6360:	4629      	mov	r1, r5
   b6362:	a801      	add	r0, sp, #4
   b6364:	f7ff ff49 	bl	b61fa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6368:	a901      	add	r1, sp, #4
   b636a:	4620      	mov	r0, r4
   b636c:	f7ff fef5 	bl	b615a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6370:	a801      	add	r0, sp, #4
   b6372:	f7ff f980 	bl	b5676 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b6376:	2207      	movs	r2, #7
   b6378:	4629      	mov	r1, r5
   b637a:	a801      	add	r0, sp, #4
   b637c:	f7ff ff3d 	bl	b61fa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6380:	a901      	add	r1, sp, #4
   b6382:	4620      	mov	r0, r4
   b6384:	f7ff fee9 	bl	b615a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6388:	a801      	add	r0, sp, #4
   b638a:	f7ff f974 	bl	b5676 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b638e:	4620      	mov	r0, r4
   b6390:	b005      	add	sp, #20
   b6392:	bd30      	pop	{r4, r5, pc}

000b6394 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b6394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6398:	b085      	sub	sp, #20
   b639a:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b639c:	4601      	mov	r1, r0
   b639e:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b63a0:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b63a2:	f7ff ffb1 	bl	b6308 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   b63a6:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   b63a8:	9b02      	ldr	r3, [sp, #8]
   b63aa:	f04f 0e14 	mov.w	lr, #20
   b63ae:	fb0e 6c03 	mla	ip, lr, r3, r6
   b63b2:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   b63b4:	45b4      	cmp	ip, r6
   b63b6:	d00d      	beq.n	b63d4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   b63b8:	45b9      	cmp	r9, r7
   b63ba:	f106 0614 	add.w	r6, r6, #20
   b63be:	d009      	beq.n	b63d4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   b63c0:	f1a6 0514 	sub.w	r5, r6, #20
   b63c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b63c6:	fb0e 8407 	mla	r4, lr, r7, r8
   b63ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b63cc:	682b      	ldr	r3, [r5, #0]
   b63ce:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   b63d0:	3701      	adds	r7, #1
   b63d2:	e7ef      	b.n	b63b4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b63d4:	a801      	add	r0, sp, #4
   b63d6:	f7ff f94e 	bl	b5676 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b63da:	4638      	mov	r0, r7
   b63dc:	b005      	add	sp, #20
   b63de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b63e2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b63e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b63e6:	b08b      	sub	sp, #44	; 0x2c
   b63e8:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b63ea:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b63ee:	a801      	add	r0, sp, #4
   b63f0:	f7ff fe8a 	bl	b6108 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b63f4:	9b02      	ldr	r3, [sp, #8]
   b63f6:	2b00      	cmp	r3, #0
   b63f8:	dd4a      	ble.n	b6490 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b63fa:	f104 0114 	add.w	r1, r4, #20
   b63fe:	a804      	add	r0, sp, #16
   b6400:	f7ff ff82 	bl	b6308 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b6404:	f104 0108 	add.w	r1, r4, #8
   b6408:	a807      	add	r0, sp, #28
   b640a:	f7ff ff7d 	bl	b6308 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b640e:	9d05      	ldr	r5, [sp, #20]
   b6410:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b6412:	2d00      	cmp	r5, #0
   b6414:	dc01      	bgt.n	b641a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b6416:	2e00      	cmp	r6, #0
   b6418:	dd38      	ble.n	b648c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b641a:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b641c:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b641e:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b6422:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b6426:	2314      	movs	r3, #20
   b6428:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b642c:	fb03 8505 	mla	r5, r3, r5, r8
   b6430:	fb03 9606 	mla	r6, r3, r6, r9
   b6434:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b6436:	45ba      	cmp	sl, r7
   b6438:	d028      	beq.n	b648c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b643a:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b643c:	45ab      	cmp	fp, r5
   b643e:	d015      	beq.n	b646c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b6440:	4659      	mov	r1, fp
   b6442:	4650      	mov	r0, sl
   b6444:	f7fe fd39 	bl	b4eba <_ZNK8particle7BleUuideqERKS0_>
   b6448:	f10b 0b14 	add.w	fp, fp, #20
   b644c:	4604      	mov	r4, r0
   b644e:	2800      	cmp	r0, #0
   b6450:	d0f4      	beq.n	b643c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b6452:	a807      	add	r0, sp, #28
   b6454:	f7ff f90f 	bl	b5676 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b6458:	a804      	add	r0, sp, #16
   b645a:	f7ff f90c 	bl	b5676 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b645e:	a801      	add	r0, sp, #4
   b6460:	f7ff f909 	bl	b5676 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b6464:	4620      	mov	r0, r4
   b6466:	b00b      	add	sp, #44	; 0x2c
   b6468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b646c:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b646e:	45b3      	cmp	fp, r6
   b6470:	d009      	beq.n	b6486 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b6472:	4659      	mov	r1, fp
   b6474:	4650      	mov	r0, sl
   b6476:	f7fe fd20 	bl	b4eba <_ZNK8particle7BleUuideqERKS0_>
   b647a:	f10b 0b14 	add.w	fp, fp, #20
   b647e:	4604      	mov	r4, r0
   b6480:	2800      	cmp	r0, #0
   b6482:	d0f4      	beq.n	b646e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b6484:	e7e5      	b.n	b6452 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b6486:	f10a 0a14 	add.w	sl, sl, #20
   b648a:	e7d4      	b.n	b6436 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b648c:	2400      	movs	r4, #0
   b648e:	e7e0      	b.n	b6452 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b6490:	2401      	movs	r4, #1
   b6492:	e7e4      	b.n	b645e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b6494 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b6494:	b513      	push	{r0, r1, r4, lr}
   b6496:	460b      	mov	r3, r1
   b6498:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b649a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b649e:	466c      	mov	r4, sp
   b64a0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b64a4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b64a8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b64ac:	e894 0003 	ldmia.w	r4, {r0, r1}
   b64b0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b64b4:	b002      	add	sp, #8
   b64b6:	bd10      	pop	{r4, pc}

000b64b8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b64b8:	b538      	push	{r3, r4, r5, lr}
   b64ba:	4605      	mov	r5, r0
   b64bc:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b64be:	f7ff ffe9 	bl	b6494 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b64c2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b64c4:	68a2      	ldr	r2, [r4, #8]
   b64c6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b64c8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b64ca:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b64cc:	68e2      	ldr	r2, [r4, #12]
   b64ce:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b64d0:	60e3      	str	r3, [r4, #12]
      }
   b64d2:	bd38      	pop	{r3, r4, r5, pc}

000b64d4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b64d4:	b530      	push	{r4, r5, lr}
   b64d6:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b64d8:	2300      	movs	r3, #0
   b64da:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b64dc:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b64de:	4605      	mov	r5, r0
   b64e0:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b64e2:	b133      	cbz	r3, b64f2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b64e4:	2202      	movs	r2, #2
   b64e6:	4668      	mov	r0, sp
   b64e8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b64ea:	68e3      	ldr	r3, [r4, #12]
   b64ec:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b64ee:	68a3      	ldr	r3, [r4, #8]
   b64f0:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b64f2:	4629      	mov	r1, r5
   b64f4:	4668      	mov	r0, sp
   b64f6:	f7ff ffdf 	bl	b64b8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b64fa:	4668      	mov	r0, sp
   b64fc:	f7fe fbef 	bl	b4cde <_ZNSt14_Function_baseD1Ev>
      }
   b6500:	b005      	add	sp, #20
   b6502:	bd30      	pop	{r4, r5, pc}

000b6504 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b6504:	b538      	push	{r3, r4, r5, lr}
   b6506:	460d      	mov	r5, r1
      { return _M_ptr; }
   b6508:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b650a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b650c:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b650e:	b123      	cbz	r3, b651a <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b6510:	6828      	ldr	r0, [r5, #0]
   b6512:	314c      	adds	r1, #76	; 0x4c
   b6514:	304c      	adds	r0, #76	; 0x4c
   b6516:	f7ff ffdd 	bl	b64d4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b651a:	4620      	mov	r0, r4
   b651c:	682b      	ldr	r3, [r5, #0]
   b651e:	f840 3b04 	str.w	r3, [r0], #4
   b6522:	6869      	ldr	r1, [r5, #4]
   b6524:	f7fe fc03 	bl	b4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b6528:	4620      	mov	r0, r4
   b652a:	bd38      	pop	{r3, r4, r5, pc}

000b652c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b652c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6530:	4604      	mov	r4, r0
   b6532:	b087      	sub	sp, #28
    WiringBleLock lk;
   b6534:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b6536:	460e      	mov	r6, r1
   b6538:	4617      	mov	r7, r2
    WiringBleLock lk;
   b653a:	f7fe fc1d 	bl	b4d78 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b653e:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b6540:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b6544:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b6548:	4544      	cmp	r4, r8
   b654a:	46a1      	mov	r9, r4
   b654c:	d016      	beq.n	b657c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b654e:	4621      	mov	r1, r4
   b6550:	a801      	add	r0, sp, #4
   b6552:	f7fe fe7b 	bl	b524c <_ZNK8particle17BleCharacteristic4UUIDEv>
   b6556:	4639      	mov	r1, r7
   b6558:	a801      	add	r0, sp, #4
   b655a:	f7fe fcae 	bl	b4eba <_ZNK8particle7BleUuideqERKS0_>
   b655e:	3408      	adds	r4, #8
   b6560:	4605      	mov	r5, r0
   b6562:	2800      	cmp	r0, #0
   b6564:	d0f0      	beq.n	b6548 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b6566:	4649      	mov	r1, r9
   b6568:	4630      	mov	r0, r6
   b656a:	f7ff ffcb 	bl	b6504 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b656e:	4668      	mov	r0, sp
   b6570:	f7fe fc10 	bl	b4d94 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6574:	4628      	mov	r0, r5
   b6576:	b007      	add	sp, #28
   b6578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b657c:	2500      	movs	r5, #0
   b657e:	e7f6      	b.n	b656e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b6580 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b6580:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b6582:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b6584:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b6586:	344c      	adds	r4, #76	; 0x4c
   b6588:	b1b9      	cbz	r1, b65ba <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b658a:	e9cd 1200 	strd	r1, r2, [sp]
   b658e:	a802      	add	r0, sp, #8
   b6590:	4669      	mov	r1, sp
   b6592:	f7ff f8cf 	bl	b5734 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b6596:	2300      	movs	r3, #0
	__x.swap(*this);
   b6598:	a906      	add	r1, sp, #24
   b659a:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b659c:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b659e:	f7ff ff8b 	bl	b64b8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b65a2:	4621      	mov	r1, r4
   b65a4:	a806      	add	r0, sp, #24
   b65a6:	f7ff ff87 	bl	b64b8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b65aa:	a806      	add	r0, sp, #24
   b65ac:	f7fe fb97 	bl	b4cde <_ZNSt14_Function_baseD1Ev>
   b65b0:	a802      	add	r0, sp, #8
   b65b2:	f7fe fb94 	bl	b4cde <_ZNSt14_Function_baseD1Ev>
}
   b65b6:	b00a      	add	sp, #40	; 0x28
   b65b8:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b65ba:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b65bc:	e7eb      	b.n	b6596 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b65be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b65be:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b65c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b65c2:	4604      	mov	r4, r0
   b65c4:	460d      	mov	r5, r1
   b65c6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b65c8:	d914      	bls.n	b65f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b65ca:	4290      	cmp	r0, r2
   b65cc:	d213      	bcs.n	b65f6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b65ce:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b65d2:	1a75      	subs	r5, r6, r1
   b65d4:	f1a1 0708 	sub.w	r7, r1, #8
   b65d8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b65da:	42b7      	cmp	r7, r6
   b65dc:	d018      	beq.n	b6610 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b65de:	b11c      	cbz	r4, b65e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b65e0:	4631      	mov	r1, r6
   b65e2:	4620      	mov	r0, r4
   b65e4:	f7ff f8d3 	bl	b578e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b65e8:	1d30      	adds	r0, r6, #4
   b65ea:	f7ff f8e4 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b65ee:	3e08      	subs	r6, #8
   b65f0:	3c08      	subs	r4, #8
   b65f2:	e7f2      	b.n	b65da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b65f4:	d00c      	beq.n	b6610 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b65f6:	42b5      	cmp	r5, r6
   b65f8:	d00a      	beq.n	b6610 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b65fa:	b11c      	cbz	r4, b6604 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b65fc:	4629      	mov	r1, r5
   b65fe:	4620      	mov	r0, r4
   b6600:	f7ff f8c5 	bl	b578e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6604:	1d28      	adds	r0, r5, #4
   b6606:	f7ff f8d6 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b660a:	3508      	adds	r5, #8
   b660c:	3408      	adds	r4, #8
   b660e:	e7f2      	b.n	b65f6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6612 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6612:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6614:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6616:	4605      	mov	r5, r0
        if (n > 0) {
   b6618:	dd11      	ble.n	b663e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b661a:	00f0      	lsls	r0, r6, #3
   b661c:	f7fe f8f0 	bl	b4800 <malloc>
            if (!d) {
   b6620:	4604      	mov	r4, r0
   b6622:	b158      	cbz	r0, b663c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6624:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6628:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b662c:	f7ff ffc7 	bl	b65be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6630:	6828      	ldr	r0, [r5, #0]
   b6632:	f7fe f8ed 	bl	b4810 <free>
        data_ = d;
   b6636:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6638:	60ae      	str	r6, [r5, #8]
        return true;
   b663a:	2001      	movs	r0, #1
    }
   b663c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b663e:	2400      	movs	r4, #0
   b6640:	e7f6      	b.n	b6630 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6642 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b6646:	2300      	movs	r3, #0
   b6648:	e9c0 3300 	strd	r3, r3, [r0]
   b664c:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b664e:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6650:	6849      	ldr	r1, [r1, #4]
   b6652:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6654:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6656:	dd13      	ble.n	b6680 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b6658:	f7ff ffdb 	bl	b6612 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b665c:	b180      	cbz	r0, b6680 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b665e:	e9d5 6300 	ldrd	r6, r3, [r5]
   b6662:	6827      	ldr	r7, [r4, #0]
   b6664:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b6668:	45b0      	cmp	r8, r6
   b666a:	d007      	beq.n	b667c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b666c:	b11f      	cbz	r7, b6676 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b666e:	4631      	mov	r1, r6
   b6670:	4638      	mov	r0, r7
   b6672:	f7ff f88c 	bl	b578e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b6676:	3608      	adds	r6, #8
   b6678:	3708      	adds	r7, #8
   b667a:	e7f5      	b.n	b6668 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b667c:	686b      	ldr	r3, [r5, #4]
   b667e:	6063      	str	r3, [r4, #4]
}
   b6680:	4620      	mov	r0, r4
   b6682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6686 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b6686:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6688:	460d      	mov	r5, r1
   b668a:	4604      	mov	r4, r0
    WiringBleLock lk;
   b668c:	a801      	add	r0, sp, #4
   b668e:	f7fe fb73 	bl	b4d78 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b6692:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b6694:	4620      	mov	r0, r4
   b6696:	310c      	adds	r1, #12
   b6698:	f7ff ffd3 	bl	b6642 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b669c:	a801      	add	r0, sp, #4
   b669e:	f7fe fb79 	bl	b4d94 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b66a2:	4620      	mov	r0, r4
   b66a4:	b003      	add	sp, #12
   b66a6:	bd30      	pop	{r4, r5, pc}

000b66a8 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b66a8:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b66aa:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b66ac:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b66ae:	4605      	mov	r5, r0
   b66b0:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b66b2:	b933      	cbnz	r3, b66c2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b66b4:	4608      	mov	r0, r1
   b66b6:	f7fe fad7 	bl	b4c68 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b66ba:	b910      	cbnz	r0, b66c2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b66bc:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b66be:	2201      	movs	r2, #1
   b66c0:	729a      	strb	r2, [r3, #10]
    return services();
   b66c2:	4628      	mov	r0, r5
   b66c4:	4621      	mov	r1, r4
   b66c6:	f7ff ffde 	bl	b6686 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b66ca:	4628      	mov	r0, r5
   b66cc:	bd38      	pop	{r3, r4, r5, pc}

000b66ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b66ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b66d0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b66d2:	6845      	ldr	r5, [r0, #4]
   b66d4:	4668      	mov	r0, sp
   b66d6:	f7ff f85a 	bl	b578e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b66da:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b66de:	4299      	cmp	r1, r3
   b66e0:	da10      	bge.n	b6704 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b66e2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b66e4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b66e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b66ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b66ee:	4629      	mov	r1, r5
   b66f0:	f105 0008 	add.w	r0, r5, #8
   b66f4:	f7ff ff63 	bl	b65be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b66f8:	b98d      	cbnz	r5, b671e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b66fa:	6863      	ldr	r3, [r4, #4]
   b66fc:	3301      	adds	r3, #1
   b66fe:	6063      	str	r3, [r4, #4]
    return true;
   b6700:	2601      	movs	r6, #1
   b6702:	e006      	b.n	b6712 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6704:	3101      	adds	r1, #1
   b6706:	4620      	mov	r0, r4
   b6708:	f7ff ff83 	bl	b6612 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b670c:	4606      	mov	r6, r0
   b670e:	2800      	cmp	r0, #0
   b6710:	d1e7      	bne.n	b66e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b6712:	a801      	add	r0, sp, #4
   b6714:	f7ff f84f 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6718:	4630      	mov	r0, r6
   b671a:	b002      	add	sp, #8
   b671c:	bd70      	pop	{r4, r5, r6, pc}
   b671e:	4669      	mov	r1, sp
   b6720:	4628      	mov	r0, r5
   b6722:	f7ff f834 	bl	b578e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6726:	e7e8      	b.n	b66fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6728 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b6728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b672c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b67e8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b6730:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b67ec <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b6734:	b093      	sub	sp, #76	; 0x4c
   b6736:	4605      	mov	r5, r0
   b6738:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b673a:	2700      	movs	r7, #0
   b673c:	682b      	ldr	r3, [r5, #0]
   b673e:	42bb      	cmp	r3, r7
   b6740:	d94e      	bls.n	b67e0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b6742:	a803      	add	r0, sp, #12
   b6744:	f7fe fe28 	bl	b5398 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b6748:	261c      	movs	r6, #28
   b674a:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b674c:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b674e:	437e      	muls	r6, r7
   b6750:	4432      	add	r2, r6
   b6752:	f10d 0c14 	add.w	ip, sp, #20
   b6756:	1d13      	adds	r3, r2, #4
   b6758:	46e3      	mov	fp, ip
   b675a:	3214      	adds	r2, #20
   b675c:	6818      	ldr	r0, [r3, #0]
   b675e:	6859      	ldr	r1, [r3, #4]
   b6760:	46e6      	mov	lr, ip
   b6762:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b6766:	3308      	adds	r3, #8
   b6768:	4293      	cmp	r3, r2
   b676a:	46f4      	mov	ip, lr
   b676c:	d1f6      	bne.n	b675c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b676e:	6818      	ldr	r0, [r3, #0]
   b6770:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b6774:	4659      	mov	r1, fp
   b6776:	a80a      	add	r0, sp, #40	; 0x28
   b6778:	f7fe fb54 	bl	b4e24 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b677c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b6780:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6786:	f8dc 3000 	ldr.w	r3, [ip]
   b678a:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b678c:	686b      	ldr	r3, [r5, #4]
   b678e:	9a03      	ldr	r2, [sp, #12]
   b6790:	4433      	add	r3, r6
   b6792:	a903      	add	r1, sp, #12
   b6794:	8b1b      	ldrh	r3, [r3, #24]
   b6796:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b6798:	686b      	ldr	r3, [r5, #4]
   b679a:	4433      	add	r3, r6
   b679c:	8b5b      	ldrh	r3, [r3, #26]
   b679e:	82d3      	strh	r3, [r2, #22]
        return services_;
   b67a0:	f8d8 0000 	ldr.w	r0, [r8]
   b67a4:	f100 040c 	add.w	r4, r0, #12
   b67a8:	a80a      	add	r0, sp, #40	; 0x28
   b67aa:	f7fe fff0 	bl	b578e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b67ae:	4620      	mov	r0, r4
   b67b0:	a90a      	add	r1, sp, #40	; 0x28
   b67b2:	f7ff ff8c 	bl	b66ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b67b6:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b67b8:	a80b      	add	r0, sp, #44	; 0x2c
   b67ba:	f7fe fffc 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b67be:	b954      	cbnz	r4, b67d6 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b67c0:	2320      	movs	r3, #32
   b67c2:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b67c6:	f8cd 9000 	str.w	r9, [sp]
   b67ca:	4623      	mov	r3, r4
   b67cc:	aa0a      	add	r2, sp, #40	; 0x28
   b67ce:	4651      	mov	r1, sl
   b67d0:	2032      	movs	r0, #50	; 0x32
   b67d2:	f7fd ff89 	bl	b46e8 <log_message>
   b67d6:	a804      	add	r0, sp, #16
   b67d8:	f7fe ffed 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b67dc:	3701      	adds	r7, #1
   b67de:	e7ad      	b.n	b673c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b67e0:	b013      	add	sp, #76	; 0x4c
   b67e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b67e6:	bf00      	nop
   b67e8:	000b7e64 	.word	0x000b7e64
   b67ec:	000b7da8 	.word	0x000b7da8

000b67f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b67f0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b67f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b67f4:	4604      	mov	r4, r0
   b67f6:	460d      	mov	r5, r1
   b67f8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b67fa:	d914      	bls.n	b6826 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b67fc:	4290      	cmp	r0, r2
   b67fe:	d213      	bcs.n	b6828 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6800:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6804:	1a75      	subs	r5, r6, r1
   b6806:	f1a1 0708 	sub.w	r7, r1, #8
   b680a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b680c:	42b7      	cmp	r7, r6
   b680e:	d018      	beq.n	b6842 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6810:	b11c      	cbz	r4, b681a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6812:	4631      	mov	r1, r6
   b6814:	4620      	mov	r0, r4
   b6816:	f7fe ffac 	bl	b5772 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b681a:	1d30      	adds	r0, r6, #4
   b681c:	f7fe ffcb 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6820:	3e08      	subs	r6, #8
   b6822:	3c08      	subs	r4, #8
   b6824:	e7f2      	b.n	b680c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6826:	d00c      	beq.n	b6842 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6828:	42b5      	cmp	r5, r6
   b682a:	d00a      	beq.n	b6842 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b682c:	b11c      	cbz	r4, b6836 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b682e:	4629      	mov	r1, r5
   b6830:	4620      	mov	r0, r4
   b6832:	f7fe ff9e 	bl	b5772 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6836:	1d28      	adds	r0, r5, #4
   b6838:	f7fe ffbd 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b683c:	3508      	adds	r5, #8
   b683e:	3408      	adds	r4, #8
   b6840:	e7f2      	b.n	b6828 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6844 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6844:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6846:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6848:	4605      	mov	r5, r0
        if (n > 0) {
   b684a:	dd11      	ble.n	b6870 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b684c:	00f0      	lsls	r0, r6, #3
   b684e:	f7fd ffd7 	bl	b4800 <malloc>
            if (!d) {
   b6852:	4604      	mov	r4, r0
   b6854:	b158      	cbz	r0, b686e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6856:	e9d5 1200 	ldrd	r1, r2, [r5]
   b685a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b685e:	f7ff ffc7 	bl	b67f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6862:	6828      	ldr	r0, [r5, #0]
   b6864:	f7fd ffd4 	bl	b4810 <free>
        data_ = d;
   b6868:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b686a:	60ae      	str	r6, [r5, #8]
        return true;
   b686c:	2001      	movs	r0, #1
    }
   b686e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6870:	2400      	movs	r4, #0
   b6872:	e7f6      	b.n	b6862 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6874 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b6878:	2300      	movs	r3, #0
   b687a:	e9c0 3300 	strd	r3, r3, [r0]
   b687e:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6880:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6882:	6849      	ldr	r1, [r1, #4]
   b6884:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6886:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6888:	dd13      	ble.n	b68b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b688a:	f7ff ffdb 	bl	b6844 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b688e:	b180      	cbz	r0, b68b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6890:	e9d5 6300 	ldrd	r6, r3, [r5]
   b6894:	6827      	ldr	r7, [r4, #0]
   b6896:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b689a:	45b0      	cmp	r8, r6
   b689c:	d007      	beq.n	b68ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b689e:	b11f      	cbz	r7, b68a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b68a0:	4631      	mov	r1, r6
   b68a2:	4638      	mov	r0, r7
   b68a4:	f7fe ff65 	bl	b5772 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b68a8:	3608      	adds	r6, #8
   b68aa:	3708      	adds	r7, #8
   b68ac:	e7f5      	b.n	b689a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b68ae:	686b      	ldr	r3, [r5, #4]
   b68b0:	6063      	str	r3, [r4, #4]
}
   b68b2:	4620      	mov	r0, r4
   b68b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b68b8 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b68b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b68ba:	460d      	mov	r5, r1
   b68bc:	4604      	mov	r4, r0
    WiringBleLock lk;
   b68be:	a801      	add	r0, sp, #4
   b68c0:	f7fe fa5a 	bl	b4d78 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b68c4:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b68c6:	4620      	mov	r0, r4
   b68c8:	3118      	adds	r1, #24
   b68ca:	f7ff ffd3 	bl	b6874 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b68ce:	a801      	add	r0, sp, #4
   b68d0:	f7fe fa60 	bl	b4d94 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b68d4:	4620      	mov	r0, r4
   b68d6:	b003      	add	sp, #12
   b68d8:	bd30      	pop	{r4, r5, pc}

000b68da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b68da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b68dc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b68de:	6845      	ldr	r5, [r0, #4]
   b68e0:	4668      	mov	r0, sp
   b68e2:	f7fe ff46 	bl	b5772 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b68e6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b68ea:	4299      	cmp	r1, r3
   b68ec:	da10      	bge.n	b6910 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b68ee:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b68f0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b68f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b68f6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b68fa:	4629      	mov	r1, r5
   b68fc:	f105 0008 	add.w	r0, r5, #8
   b6900:	f7ff ff76 	bl	b67f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6904:	b98d      	cbnz	r5, b692a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6906:	6863      	ldr	r3, [r4, #4]
   b6908:	3301      	adds	r3, #1
   b690a:	6063      	str	r3, [r4, #4]
    return true;
   b690c:	2601      	movs	r6, #1
   b690e:	e006      	b.n	b691e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6910:	3101      	adds	r1, #1
   b6912:	4620      	mov	r0, r4
   b6914:	f7ff ff96 	bl	b6844 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6918:	4606      	mov	r6, r0
   b691a:	2800      	cmp	r0, #0
   b691c:	d1e7      	bne.n	b68ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b691e:	a801      	add	r0, sp, #4
   b6920:	f7fe ff49 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6924:	4630      	mov	r0, r6
   b6926:	b002      	add	sp, #8
   b6928:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b692a:	4669      	mov	r1, sp
   b692c:	4628      	mov	r0, r5
   b692e:	f7fe ff20 	bl	b5772 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6932:	e7e8      	b.n	b6906 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6934 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b6934:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6936:	b085      	sub	sp, #20
   b6938:	4605      	mov	r5, r0
    WiringBleLock lk;
   b693a:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b693c:	460c      	mov	r4, r1
   b693e:	4617      	mov	r7, r2
    WiringBleLock lk;
   b6940:	f7fe fa1a 	bl	b4d78 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b6944:	2300      	movs	r3, #0
   b6946:	e9c5 3300 	strd	r3, r3, [r5]
   b694a:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b694c:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b694e:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b6952:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b6956:	42b4      	cmp	r4, r6
   b6958:	d011      	beq.n	b697e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b695a:	6838      	ldr	r0, [r7, #0]
   b695c:	4621      	mov	r1, r4
   b695e:	f7fe fc35 	bl	b51cc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b6962:	b150      	cbz	r0, b697a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b6964:	4621      	mov	r1, r4
   b6966:	a802      	add	r0, sp, #8
   b6968:	f7fe ff03 	bl	b5772 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b696c:	a902      	add	r1, sp, #8
   b696e:	4628      	mov	r0, r5
   b6970:	f7ff ffb3 	bl	b68da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b6974:	a803      	add	r0, sp, #12
   b6976:	f7fe ff1e 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b697a:	3408      	adds	r4, #8
   b697c:	e7eb      	b.n	b6956 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b697e:	a801      	add	r0, sp, #4
   b6980:	f7fe fa08 	bl	b4d94 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6984:	4628      	mov	r0, r5
   b6986:	b005      	add	sp, #20
   b6988:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b698c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b698c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b6990:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b6992:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b6994:	b091      	sub	sp, #68	; 0x44
   b6996:	4606      	mov	r6, r0
   b6998:	460f      	mov	r7, r1
   b699a:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b699c:	b933      	cbnz	r3, b69ac <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b699e:	e9c0 3300 	strd	r3, r3, [r0]
   b69a2:	6083      	str	r3, [r0, #8]
}
   b69a4:	4630      	mov	r0, r6
   b69a6:	b011      	add	sp, #68	; 0x44
   b69a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b69ac:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b69ae:	7e0d      	ldrb	r5, [r1, #24]
   b69b0:	2d00      	cmp	r5, #0
   b69b2:	d158      	bne.n	b6a66 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b69b4:	2320      	movs	r3, #32
   b69b6:	462a      	mov	r2, r5
   b69b8:	a803      	add	r0, sp, #12
   b69ba:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b69be:	f7fe fb78 	bl	b50b2 <_ZNK8particle7BleUuid8toStringEb>
   b69c2:	9b03      	ldr	r3, [sp, #12]
   b69c4:	9301      	str	r3, [sp, #4]
   b69c6:	4b2b      	ldr	r3, [pc, #172]	; (b6a74 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b69c8:	492b      	ldr	r1, [pc, #172]	; (b6a78 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b69ca:	9300      	str	r3, [sp, #0]
   b69cc:	aa08      	add	r2, sp, #32
   b69ce:	462b      	mov	r3, r5
   b69d0:	2001      	movs	r0, #1
   b69d2:	f7fd fe89 	bl	b46e8 <log_message>
   b69d6:	a803      	add	r0, sp, #12
   b69d8:	f7fd ff9a 	bl	b4910 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b69dc:	231c      	movs	r3, #28
   b69de:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b69e2:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b69e6:	8a9a      	ldrh	r2, [r3, #20]
   b69e8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b69ec:	8adb      	ldrh	r3, [r3, #22]
   b69ee:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b69f2:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b69f4:	4a21      	ldr	r2, [pc, #132]	; (b6a7c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b69f6:	8818      	ldrh	r0, [r3, #0]
   b69f8:	9500      	str	r5, [sp, #0]
   b69fa:	a908      	add	r1, sp, #32
   b69fc:	f7fd fd5a 	bl	b44b4 <hal_ble_gatt_client_discover_characteristics>
   b6a00:	2800      	cmp	r0, #0
   b6a02:	db30      	blt.n	b6a66 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b6a04:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b6a06:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b6a0a:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b6a0e:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b6a10:	f1a4 0308 	sub.w	r3, r4, #8
   b6a14:	4599      	cmp	r9, r3
   b6a16:	d022      	beq.n	b6a5e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b6a18:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b6a1c:	89db      	ldrh	r3, [r3, #14]
   b6a1e:	2b00      	cmp	r3, #0
   b6a20:	d0f5      	beq.n	b6a0e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b6a22:	2210      	movs	r2, #16
   b6a24:	2100      	movs	r1, #0
   b6a26:	eb0d 0002 	add.w	r0, sp, r2
   b6a2a:	9503      	str	r5, [sp, #12]
   b6a2c:	f001 f860 	bl	b7af0 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b6a30:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b6a34:	89d9      	ldrh	r1, [r3, #14]
   b6a36:	683b      	ldr	r3, [r7, #0]
   b6a38:	aa03      	add	r2, sp, #12
   b6a3a:	8818      	ldrh	r0, [r3, #0]
   b6a3c:	9500      	str	r5, [sp, #0]
   b6a3e:	2313      	movs	r3, #19
   b6a40:	f7fd fd56 	bl	b44f0 <hal_ble_gatt_client_read>
                if (len > 0) {
   b6a44:	2800      	cmp	r0, #0
   b6a46:	d0e2      	beq.n	b6a0e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b6a48:	ab10      	add	r3, sp, #64	; 0x40
   b6a4a:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b6a4c:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b6a4e:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b6a52:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b6a56:	303c      	adds	r0, #60	; 0x3c
   b6a58:	f7fd fffb 	bl	b4a52 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b6a5c:	e7d7      	b.n	b6a0e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b6a5e:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b6a62:	2201      	movs	r2, #1
   b6a64:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b6a66:	4642      	mov	r2, r8
   b6a68:	4639      	mov	r1, r7
   b6a6a:	4630      	mov	r0, r6
   b6a6c:	f7ff ff62 	bl	b6934 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b6a70:	e798      	b.n	b69a4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b6a72:	bf00      	nop
   b6a74:	000b7e89 	.word	0x000b7e89
   b6a78:	000b7da8 	.word	0x000b7da8
   b6a7c:	000b6c25 	.word	0x000b6c25

000b6a80 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b6a80:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b6a82:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b6a84:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b6a86:	b085      	sub	sp, #20
   b6a88:	4606      	mov	r6, r0
   b6a8a:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b6a8c:	b92b      	cbnz	r3, b6a9a <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b6a8e:	a801      	add	r0, sp, #4
   b6a90:	f7ff fe0a 	bl	b66a8 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b6a94:	a801      	add	r0, sp, #4
   b6a96:	f7fe fe9d 	bl	b57d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b6a9a:	682b      	ldr	r3, [r5, #0]
   b6a9c:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b6aa0:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b6aa4:	42bc      	cmp	r4, r7
   b6aa6:	d009      	beq.n	b6abc <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b6aa8:	4622      	mov	r2, r4
   b6aaa:	4629      	mov	r1, r5
   b6aac:	a801      	add	r0, sp, #4
   b6aae:	f7ff ff6d 	bl	b698c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b6ab2:	a801      	add	r0, sp, #4
   b6ab4:	f7fe fea0 	bl	b57f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b6ab8:	3408      	adds	r4, #8
   b6aba:	e7f3      	b.n	b6aa4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b6abc:	4630      	mov	r0, r6
   b6abe:	4629      	mov	r1, r5
   b6ac0:	f7ff fefa 	bl	b68b8 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b6ac4:	4630      	mov	r0, r6
   b6ac6:	b005      	add	sp, #20
   b6ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b6acc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b6acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6ad0:	4605      	mov	r5, r0
   b6ad2:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b6ad4:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b6ad6:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b6ad8:	460f      	mov	r7, r1
    return address_;
   b6ada:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b6adc:	4698      	mov	r8, r3
    return address_;
   b6ade:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b6ae0:	4b41      	ldr	r3, [pc, #260]	; (b6be8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b6ae2:	9304      	str	r3, [sp, #16]
    return address_;
   b6ae4:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b6ae6:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b6ae8:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b6aec:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b6af0:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b6af4:	f7fe fd16 	bl	b5524 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6af8:	4b3c      	ldr	r3, [pc, #240]	; (b6bec <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b6afa:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b6afc:	f7fe fd12 	bl	b5524 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b6b00:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6b02:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b6b04:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b6b06:	464a      	mov	r2, r9
   b6b08:	a804      	add	r0, sp, #16
   b6b0a:	f7fd fcfb 	bl	b4504 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b6b0e:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b6b10:	4604      	mov	r4, r0
   b6b12:	b138      	cbz	r0, b6b24 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b6b14:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6b1a:	801a      	strh	r2, [r3, #0]
}
   b6b1c:	4620      	mov	r0, r4
   b6b1e:	b013      	add	sp, #76	; 0x4c
   b6b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   b6b24:	4639      	mov	r1, r7
   b6b26:	4628      	mov	r0, r5
   b6b28:	f7fe fc86 	bl	b5438 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   b6b2c:	a803      	add	r0, sp, #12
   b6b2e:	f7fe f923 	bl	b4d78 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b6b32:	f7fe fcf7 	bl	b5524 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b6b36:	6807      	ldr	r7, [r0, #0]
   b6b38:	4629      	mov	r1, r5
   b6b3a:	3718      	adds	r7, #24
   b6b3c:	4630      	mov	r0, r6
   b6b3e:	f7fe fe30 	bl	b57a2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b6b42:	4631      	mov	r1, r6
   b6b44:	4638      	mov	r0, r7
   b6b46:	f7ff f991 	bl	b5e6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b6b4a:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b6b4c:	a80b      	add	r0, sp, #44	; 0x2c
   b6b4e:	f7fe fe32 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6b52:	f04f 0920 	mov.w	r9, #32
   b6b56:	bb1f      	cbnz	r7, b6ba0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b6b58:	4632      	mov	r2, r6
   b6b5a:	4b25      	ldr	r3, [pc, #148]	; (b6bf0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   b6b5c:	4e25      	ldr	r6, [pc, #148]	; (b6bf4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b6b5e:	4926      	ldr	r1, [pc, #152]	; (b6bf8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b6b60:	9300      	str	r3, [sp, #0]
   b6b62:	2032      	movs	r0, #50	; 0x32
   b6b64:	4623      	mov	r3, r4
   b6b66:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b6b6a:	f7fd fdbd 	bl	b46e8 <log_message>
   b6b6e:	6830      	ldr	r0, [r6, #0]
   b6b70:	f7fd fd0a 	bl	b4588 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b6b74:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b6b76:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b6b7a:	4621      	mov	r1, r4
   b6b7c:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b6b7e:	4c1f      	ldr	r4, [pc, #124]	; (b6bfc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b6b80:	f7fd fc7a 	bl	b4478 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b6b84:	6830      	ldr	r0, [r6, #0]
   b6b86:	f7fd fcf7 	bl	b4578 <os_mutex_recursive_lock>
        locked_ = true;
   b6b8a:	2301      	movs	r3, #1
   b6b8c:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b6b90:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6b92:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6b96:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b6b98:	a803      	add	r0, sp, #12
   b6b9a:	f7fe f8fb 	bl	b4d94 <_ZN8particle3ble13WiringBleLockD1Ev>
   b6b9e:	e7bd      	b.n	b6b1c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b6ba0:	a803      	add	r0, sp, #12
   b6ba2:	f7fe f8f7 	bl	b4d94 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b6ba6:	4b16      	ldr	r3, [pc, #88]	; (b6c00 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b6ba8:	9300      	str	r3, [sp, #0]
   b6baa:	4913      	ldr	r1, [pc, #76]	; (b6bf8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b6bac:	4623      	mov	r3, r4
   b6bae:	4632      	mov	r2, r6
   b6bb0:	2001      	movs	r0, #1
   b6bb2:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b6bb6:	f7fd fd97 	bl	b46e8 <log_message>
    if (automatic) {
   b6bba:	f1b8 0f00 	cmp.w	r8, #0
   b6bbe:	d0ad      	beq.n	b6b1c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b6bc0:	4629      	mov	r1, r5
   b6bc2:	4630      	mov	r0, r6
   b6bc4:	f7ff ff5c 	bl	b6a80 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b6bc8:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b6bcc:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b6bd0:	42bd      	cmp	r5, r7
   b6bd2:	d005      	beq.n	b6be0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b6bd4:	4628      	mov	r0, r5
   b6bd6:	2101      	movs	r1, #1
   b6bd8:	f7fe fba4 	bl	b5324 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b6bdc:	3508      	adds	r5, #8
   b6bde:	e7f7      	b.n	b6bd0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b6be0:	4630      	mov	r0, r6
   b6be2:	f7fe fe09 	bl	b57f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6be6:	e799      	b.n	b6b1c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b6be8:	00180003 	.word	0x00180003
   b6bec:	000b5f25 	.word	0x000b5f25
   b6bf0:	000b7ebb 	.word	0x000b7ebb
   b6bf4:	2003e6f0 	.word	0x2003e6f0
   b6bf8:	000b7da8 	.word	0x000b7da8
   b6bfc:	fffffefc 	.word	0xfffffefc
   b6c00:	000b7ed7 	.word	0x000b7ed7

000b6c04 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b6c04:	b513      	push	{r0, r1, r4, lr}
   b6c06:	4604      	mov	r4, r0
   b6c08:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b6c0c:	f7fe fbe0 	bl	b53d0 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b6c10:	9b00      	ldr	r3, [sp, #0]
   b6c12:	9901      	ldr	r1, [sp, #4]
   b6c14:	2200      	movs	r2, #0
   b6c16:	4620      	mov	r0, r4
   b6c18:	f7ff ff58 	bl	b6acc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   b6c1c:	4620      	mov	r0, r4
   b6c1e:	b002      	add	sp, #8
   b6c20:	bd10      	pop	{r4, pc}
	...

000b6c24 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b6c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b6c28:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b6c2a:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b6c2c:	2600      	movs	r6, #0
   b6c2e:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b6c32:	4b66      	ldr	r3, [pc, #408]	; (b6dcc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b6c34:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b6c36:	4605      	mov	r5, r0
   b6c38:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b6c3a:	4633      	mov	r3, r6
   b6c3c:	4964      	ldr	r1, [pc, #400]	; (b6dd0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b6c3e:	f8df 9194 	ldr.w	r9, [pc, #404]	; b6dd4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b6c42:	f8df 818c 	ldr.w	r8, [pc, #396]	; b6dd0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b6c46:	f8df a190 	ldr.w	sl, [pc, #400]	; b6dd8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b6c4a:	aa0c      	add	r2, sp, #48	; 0x30
   b6c4c:	2001      	movs	r0, #1
   b6c4e:	f7fd fd4b 	bl	b46e8 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b6c52:	682b      	ldr	r3, [r5, #0]
   b6c54:	42b3      	cmp	r3, r6
   b6c56:	f240 80b5 	bls.w	b6dc4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b6c5a:	a803      	add	r0, sp, #12
   b6c5c:	f7fe fadc 	bl	b5218 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b6c60:	a805      	add	r0, sp, #20
   b6c62:	f7fe fb99 	bl	b5398 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b6c66:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b6c6a:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b6c6c:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b6c6e:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b6c72:	445b      	add	r3, fp
        this->size = halHandles.size;
   b6c74:	8bd9      	ldrh	r1, [r3, #30]
   b6c76:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b6c78:	8c19      	ldrh	r1, [r3, #32]
   b6c7a:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b6c7c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b6c7e:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b6c80:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b6c82:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b6c84:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b6c86:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b6c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b6c8a:	8253      	strh	r3, [r2, #18]
   b6c8c:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b6c90:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b6c94:	429a      	cmp	r2, r3
   b6c96:	d07d      	beq.n	b6d94 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b6c98:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b6c9a:	8ac4      	ldrh	r4, [r0, #22]
   b6c9c:	428c      	cmp	r4, r1
   b6c9e:	d377      	bcc.n	b6d90 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b6ca0:	8a84      	ldrh	r4, [r0, #20]
   b6ca2:	428c      	cmp	r4, r1
   b6ca4:	d874      	bhi.n	b6d90 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6ca6:	6859      	ldr	r1, [r3, #4]
   b6ca8:	9005      	str	r0, [sp, #20]
   b6caa:	a806      	add	r0, sp, #24
   b6cac:	f7fe f83f 	bl	b4d2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b6cb0:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b6cb4:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b6cb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6cbc:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b6cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6cc2:	f8dc 3000 	ldr.w	r3, [ip]
   b6cc6:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b6cc8:	892b      	ldrh	r3, [r5, #8]
   b6cca:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b6cce:	686b      	ldr	r3, [r5, #4]
   b6cd0:	9c03      	ldr	r4, [sp, #12]
   b6cd2:	445b      	add	r3, fp
   b6cd4:	7e5b      	ldrb	r3, [r3, #25]
   b6cd6:	f013 0f02 	tst.w	r3, #2
   b6cda:	d16e      	bne.n	b6dba <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b6cdc:	686b      	ldr	r3, [r5, #4]
   b6cde:	445b      	add	r3, fp
   b6ce0:	7e5b      	ldrb	r3, [r3, #25]
   b6ce2:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b6ce4:	bf42      	ittt	mi
   b6ce6:	7923      	ldrbmi	r3, [r4, #4]
   b6ce8:	f043 0304 	orrmi.w	r3, r3, #4
   b6cec:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b6cee:	686b      	ldr	r3, [r5, #4]
   b6cf0:	445b      	add	r3, fp
   b6cf2:	7e5b      	ldrb	r3, [r3, #25]
   b6cf4:	0719      	lsls	r1, r3, #28
   b6cf6:	bf42      	ittt	mi
   b6cf8:	7923      	ldrbmi	r3, [r4, #4]
   b6cfa:	f043 0308 	orrmi.w	r3, r3, #8
   b6cfe:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b6d00:	686b      	ldr	r3, [r5, #4]
   b6d02:	445b      	add	r3, fp
   b6d04:	7e5b      	ldrb	r3, [r3, #25]
   b6d06:	06da      	lsls	r2, r3, #27
   b6d08:	bf42      	ittt	mi
   b6d0a:	7923      	ldrbmi	r3, [r4, #4]
   b6d0c:	f043 0310 	orrmi.w	r3, r3, #16
   b6d10:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b6d12:	686b      	ldr	r3, [r5, #4]
   b6d14:	445b      	add	r3, fp
   b6d16:	aa07      	add	r2, sp, #28
   b6d18:	7e5b      	ldrb	r3, [r3, #25]
   b6d1a:	069b      	lsls	r3, r3, #26
   b6d1c:	bf42      	ittt	mi
   b6d1e:	7923      	ldrbmi	r3, [r4, #4]
   b6d20:	f043 0320 	orrmi.w	r3, r3, #32
   b6d24:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b6d26:	686b      	ldr	r3, [r5, #4]
   b6d28:	449b      	add	fp, r3
   b6d2a:	f10b 0304 	add.w	r3, fp, #4
   b6d2e:	4696      	mov	lr, r2
   b6d30:	f10b 0b14 	add.w	fp, fp, #20
   b6d34:	6818      	ldr	r0, [r3, #0]
   b6d36:	6859      	ldr	r1, [r3, #4]
   b6d38:	4694      	mov	ip, r2
   b6d3a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b6d3e:	3308      	adds	r3, #8
   b6d40:	455b      	cmp	r3, fp
   b6d42:	4662      	mov	r2, ip
   b6d44:	d1f6      	bne.n	b6d34 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b6d46:	6818      	ldr	r0, [r3, #0]
   b6d48:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b6d4c:	4671      	mov	r1, lr
   b6d4e:	a80c      	add	r0, sp, #48	; 0x30
   b6d50:	f7fe f868 	bl	b4e24 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b6d54:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b6d58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6d5c:	3414      	adds	r4, #20
   b6d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d60:	f8dc 3000 	ldr.w	r3, [ip]
   b6d64:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b6d66:	a903      	add	r1, sp, #12
   b6d68:	a80c      	add	r0, sp, #48	; 0x30
   b6d6a:	f7fe fd02 	bl	b5772 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6d6e:	a90c      	add	r1, sp, #48	; 0x30
   b6d70:	f107 0018 	add.w	r0, r7, #24
   b6d74:	f7ff fdb1 	bl	b68da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b6d78:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6d7a:	a80d      	add	r0, sp, #52	; 0x34
   b6d7c:	f7fe fd1b 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6d80:	b99c      	cbnz	r4, b6daa <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b6d82:	2320      	movs	r3, #32
   b6d84:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b6d88:	f8cd a000 	str.w	sl, [sp]
   b6d8c:	4623      	mov	r3, r4
   b6d8e:	e007      	b.n	b6da0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b6d90:	3308      	adds	r3, #8
   b6d92:	e77f      	b.n	b6c94 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b6d94:	2420      	movs	r4, #32
   b6d96:	2300      	movs	r3, #0
   b6d98:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b6d9c:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b6da0:	aa0c      	add	r2, sp, #48	; 0x30
   b6da2:	4641      	mov	r1, r8
   b6da4:	2032      	movs	r0, #50	; 0x32
   b6da6:	f7fd fc9f 	bl	b46e8 <log_message>
   b6daa:	a806      	add	r0, sp, #24
   b6dac:	f7fe fd03 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6db0:	a804      	add	r0, sp, #16
   b6db2:	f7fe fd00 	bl	b57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b6db6:	3601      	adds	r6, #1
   b6db8:	e74b      	b.n	b6c52 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b6dba:	7923      	ldrb	r3, [r4, #4]
   b6dbc:	f043 0302 	orr.w	r3, r3, #2
   b6dc0:	7123      	strb	r3, [r4, #4]
   b6dc2:	e78b      	b.n	b6cdc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b6dc4:	b015      	add	sp, #84	; 0x54
   b6dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6dca:	bf00      	nop
   b6dcc:	000b7ef4 	.word	0x000b7ef4
   b6dd0:	000b7da8 	.word	0x000b7da8
   b6dd4:	000b7f0f 	.word	0x000b7f0f
   b6dd8:	000b7f3e 	.word	0x000b7f3e

000b6ddc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6ddc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6de0:	4604      	mov	r4, r0
   b6de2:	460d      	mov	r5, r1
   b6de4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6de6:	d914      	bls.n	b6e12 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6de8:	4290      	cmp	r0, r2
   b6dea:	d213      	bcs.n	b6e14 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6dec:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b6df0:	1a75      	subs	r5, r6, r1
   b6df2:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b6df6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6df8:	42b7      	cmp	r7, r6
   b6dfa:	d018      	beq.n	b6e2e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6dfc:	b11c      	cbz	r4, b6e06 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6dfe:	4631      	mov	r1, r6
   b6e00:	4620      	mov	r0, r4
   b6e02:	f7fe ff1b 	bl	b5c3c <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b6e06:	4630      	mov	r0, r6
   b6e08:	f7fe fbf6 	bl	b55f8 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b6e0c:	3e24      	subs	r6, #36	; 0x24
   b6e0e:	3c24      	subs	r4, #36	; 0x24
   b6e10:	e7f2      	b.n	b6df8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6e12:	d00c      	beq.n	b6e2e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6e14:	42b5      	cmp	r5, r6
   b6e16:	d00a      	beq.n	b6e2e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6e18:	b11c      	cbz	r4, b6e22 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6e1a:	4629      	mov	r1, r5
   b6e1c:	4620      	mov	r0, r4
   b6e1e:	f7fe ff0d 	bl	b5c3c <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b6e22:	4628      	mov	r0, r5
   b6e24:	f7fe fbe8 	bl	b55f8 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b6e28:	3524      	adds	r5, #36	; 0x24
   b6e2a:	3424      	adds	r4, #36	; 0x24
   b6e2c:	e7f2      	b.n	b6e14 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6e30 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b6e32:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6e34:	4605      	mov	r5, r0
        if (n > 0) {
   b6e36:	dd13      	ble.n	b6e60 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b6e38:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b6e3a:	fb07 f006 	mul.w	r0, r7, r6
   b6e3e:	f7fd fcdf 	bl	b4800 <malloc>
            if (!d) {
   b6e42:	4604      	mov	r4, r0
   b6e44:	b158      	cbz	r0, b6e5e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b6e46:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6e4a:	fb07 1202 	mla	r2, r7, r2, r1
   b6e4e:	f7ff ffc5 	bl	b6ddc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6e52:	6828      	ldr	r0, [r5, #0]
   b6e54:	f7fd fcdc 	bl	b4810 <free>
        data_ = d;
   b6e58:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6e5a:	60ae      	str	r6, [r5, #8]
        return true;
   b6e5c:	2001      	movs	r0, #1
    }
   b6e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b6e60:	2400      	movs	r4, #0
   b6e62:	e7f6      	b.n	b6e52 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b6e64 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b6e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6e68:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b6e6a:	ad01      	add	r5, sp, #4
   b6e6c:	4606      	mov	r6, r0
   b6e6e:	4628      	mov	r0, r5
   b6e70:	460c      	mov	r4, r1
   b6e72:	f7fd ffbc 	bl	b4dee <_ZN8particle10BleAddressC1Ev>
   b6e76:	a803      	add	r0, sp, #12
   b6e78:	f7fe ffbb 	bl	b5df2 <_ZN8particle18BleAdvertisingDataC1Ev>
   b6e7c:	a806      	add	r0, sp, #24
   b6e7e:	f7fe ffb8 	bl	b5df2 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b6e82:	6930      	ldr	r0, [r6, #16]
   b6e84:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b6e86:	89f2      	ldrh	r2, [r6, #14]
   b6e88:	ab13      	add	r3, sp, #76	; 0x4c
   b6e8a:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b6e8c:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b6e90:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b6e92:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b6e94:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b6e98:	a806      	add	r0, sp, #24
   b6e9a:	f7fe ff1e 	bl	b5cda <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b6e9e:	89b2      	ldrh	r2, [r6, #12]
   b6ea0:	6871      	ldr	r1, [r6, #4]
   b6ea2:	a803      	add	r0, sp, #12
   b6ea4:	f7fe ff19 	bl	b5cda <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b6ea8:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b6eac:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b6eae:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b6eb0:	d003      	beq.n	b6eba <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b6eb2:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b6eb6:	429a      	cmp	r2, r3
   b6eb8:	db5c      	blt.n	b6f74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b6eba:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b6ebe:	2b7f      	cmp	r3, #127	; 0x7f
   b6ec0:	d003      	beq.n	b6eca <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b6ec2:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b6ec6:	429a      	cmp	r2, r3
   b6ec8:	dc54      	bgt.n	b6f74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b6eca:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b6ece:	4638      	mov	r0, r7
   b6ed0:	f7fe fd7c 	bl	b59cc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b6ed4:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b6ed6:	2b00      	cmp	r3, #0
   b6ed8:	dd52      	ble.n	b6f80 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b6eda:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b6edc:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b6ee0:	45b1      	cmp	r9, r6
   b6ee2:	d050      	beq.n	b6f86 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b6ee4:	4630      	mov	r0, r6
   b6ee6:	4629      	mov	r1, r5
   b6ee8:	f7fd ff6d 	bl	b4dc6 <_ZNK8particle10BleAddresseqERKS0_>
   b6eec:	3608      	adds	r6, #8
   b6eee:	4680      	mov	r8, r0
   b6ef0:	2800      	cmp	r0, #0
   b6ef2:	d0f5      	beq.n	b6ee0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b6ef4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b6ef6:	f7fd fc8b 	bl	b4810 <free>
        if (!delegator->filterByRssi(result) ||
   b6efa:	f1b8 0f00 	cmp.w	r8, #0
   b6efe:	d039      	beq.n	b6f74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b6f00:	4629      	mov	r1, r5
   b6f02:	4620      	mov	r0, r4
   b6f04:	f7fe fd25 	bl	b5952 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b6f08:	b3a0      	cbz	r0, b6f74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b6f0a:	4629      	mov	r1, r5
   b6f0c:	4620      	mov	r0, r4
   b6f0e:	f7ff fa68 	bl	b63e2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b6f12:	4606      	mov	r6, r0
   b6f14:	b370      	cbz	r0, b6f74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b6f16:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b6f1a:	4638      	mov	r0, r7
   b6f1c:	f7fe fda1 	bl	b5a62 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b6f20:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b6f22:	2b00      	cmp	r3, #0
   b6f24:	dd12      	ble.n	b6f4c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b6f26:	a806      	add	r0, sp, #24
   b6f28:	f7fe f924 	bl	b5174 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b6f2c:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b6f2e:	a803      	add	r0, sp, #12
   b6f30:	f7fe f920 	bl	b5174 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b6f34:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b6f38:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b6f3c:	429a      	cmp	r2, r3
   b6f3e:	d025      	beq.n	b6f8c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b6f40:	f833 1b02 	ldrh.w	r1, [r3], #2
   b6f44:	4588      	cmp	r8, r1
   b6f46:	d001      	beq.n	b6f4c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b6f48:	4288      	cmp	r0, r1
   b6f4a:	d1f7      	bne.n	b6f3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b6f4c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b6f4e:	f7fd fc5f 	bl	b4810 <free>
              !delegator->filterByServiceUUID(result) ||
   b6f52:	b17e      	cbz	r6, b6f74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b6f54:	4629      	mov	r1, r5
   b6f56:	4620      	mov	r0, r4
   b6f58:	f7fe fdb8 	bl	b5acc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b6f5c:	b150      	cbz	r0, b6f74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b6f5e:	6a23      	ldr	r3, [r4, #32]
   b6f60:	b1b3      	cbz	r3, b6f90 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b6f62:	6963      	ldr	r3, [r4, #20]
   b6f64:	9513      	str	r5, [sp, #76]	; 0x4c
   b6f66:	3301      	adds	r3, #1
   b6f68:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6f6c:	4639      	mov	r1, r7
   b6f6e:	f104 0018 	add.w	r0, r4, #24
   b6f72:	4798      	blx	r3
            return;
   b6f74:	4628      	mov	r0, r5
   b6f76:	f7fe fb3f 	bl	b55f8 <_ZN8particle13BleScanResultD1Ev>
    }
   b6f7a:	b01d      	add	sp, #116	; 0x74
   b6f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b6f80:	f04f 0801 	mov.w	r8, #1
   b6f84:	e7b6      	b.n	b6ef4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b6f86:	f04f 0800 	mov.w	r8, #0
   b6f8a:	e7b3      	b.n	b6ef4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b6f8c:	2600      	movs	r6, #0
   b6f8e:	e7dd      	b.n	b6f4c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b6f90:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b6f94:	f1b8 0f00 	cmp.w	r8, #0
   b6f98:	d007      	beq.n	b6faa <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b6f9a:	6963      	ldr	r3, [r4, #20]
   b6f9c:	3301      	adds	r3, #1
   b6f9e:	6163      	str	r3, [r4, #20]
   b6fa0:	4629      	mov	r1, r5
   b6fa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b6fa4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6fa8:	e7e3      	b.n	b6f72 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b6faa:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b6fae:	f1bc 0f00 	cmp.w	ip, #0
   b6fb2:	d025      	beq.n	b7000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b6fb4:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b6fb6:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b6fb8:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b6fba:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b6fbc:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b6fbe:	d8d9      	bhi.n	b6f74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b6fc0:	2224      	movs	r2, #36	; 0x24
   b6fc2:	4353      	muls	r3, r2
    address_ = addr.address_;
   b6fc4:	462a      	mov	r2, r5
   b6fc6:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b6fc8:	3b24      	subs	r3, #36	; 0x24
   b6fca:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b6fce:	f84c 0003 	str.w	r0, [ip, r3]
   b6fd2:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b6fd4:	f106 0008 	add.w	r0, r6, #8
   b6fd8:	a903      	add	r1, sp, #12
   b6fda:	f7fe fe46 	bl	b5c6a <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b6fde:	a906      	add	r1, sp, #24
   b6fe0:	f106 0014 	add.w	r0, r6, #20
   b6fe4:	f7fe fe41 	bl	b5c6a <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b6fe8:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b6fec:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b6ff0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b6ff4:	429a      	cmp	r2, r3
   b6ff6:	d3bd      	bcc.n	b6f74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b6ff8:	4640      	mov	r0, r8
   b6ffa:	f7fd fa33 	bl	b4464 <hal_ble_gap_stop_scan>
   b6ffe:	e7b9      	b.n	b6f74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b7000:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7004:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b7008:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b700c:	a903      	add	r1, sp, #12
   b700e:	a80c      	add	r0, sp, #48	; 0x30
   b7010:	f7fe fdf7 	bl	b5c02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b7014:	a906      	add	r1, sp, #24
   b7016:	a80f      	add	r0, sp, #60	; 0x3c
   b7018:	f7fe fdf3 	bl	b5c02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b701c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b7020:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b7024:	4641      	mov	r1, r8
   b7026:	4638      	mov	r0, r7
   b7028:	6866      	ldr	r6, [r4, #4]
   b702a:	f7fe fe07 	bl	b5c3c <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b702e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7032:	4299      	cmp	r1, r3
   b7034:	da10      	bge.n	b7058 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b7036:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7038:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b703a:	2224      	movs	r2, #36	; 0x24
   b703c:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b7040:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b7044:	fb02 3201 	mla	r2, r2, r1, r3
   b7048:	4631      	mov	r1, r6
   b704a:	f7ff fec7 	bl	b6ddc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b704e:	b986      	cbnz	r6, b7072 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b7050:	6863      	ldr	r3, [r4, #4]
   b7052:	3301      	adds	r3, #1
   b7054:	6063      	str	r3, [r4, #4]
    return true;
   b7056:	e005      	b.n	b7064 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7058:	3101      	adds	r1, #1
   b705a:	4620      	mov	r0, r4
   b705c:	f7ff fee8 	bl	b6e30 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7060:	2800      	cmp	r0, #0
   b7062:	d1e8      	bne.n	b7036 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b7064:	4638      	mov	r0, r7
   b7066:	f7fe fac7 	bl	b55f8 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b706a:	4640      	mov	r0, r8
   b706c:	f7fe fac4 	bl	b55f8 <_ZN8particle13BleScanResultD1Ev>
   b7070:	e780      	b.n	b6f74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b7072:	4639      	mov	r1, r7
   b7074:	4630      	mov	r0, r6
   b7076:	f7fe fde1 	bl	b5c3c <_ZN8particle13BleScanResultC1EOS0_>
   b707a:	e7e9      	b.n	b7050 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000b707c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b707c:	4802      	ldr	r0, [pc, #8]	; (b7088 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b707e:	2300      	movs	r3, #0
   b7080:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7082:	f7fd ba71 	b.w	b4568 <os_mutex_recursive_create>
   b7086:	bf00      	nop
   b7088:	2003e6f0 	.word	0x2003e6f0

000b708c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b708e:	4606      	mov	r6, r0
   b7090:	460d      	mov	r5, r1
  size_t n = 0;
   b7092:	188f      	adds	r7, r1, r2
   b7094:	2400      	movs	r4, #0
  while (size--) {
   b7096:	42bd      	cmp	r5, r7
   b7098:	d00c      	beq.n	b70b4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b709a:	6833      	ldr	r3, [r6, #0]
   b709c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b70a0:	689b      	ldr	r3, [r3, #8]
   b70a2:	4630      	mov	r0, r6
   b70a4:	4798      	blx	r3
     if (chunk>=0)
   b70a6:	1e03      	subs	r3, r0, #0
   b70a8:	db01      	blt.n	b70ae <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b70aa:	441c      	add	r4, r3
  while (size--) {
   b70ac:	e7f3      	b.n	b7096 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b70ae:	2c00      	cmp	r4, #0
   b70b0:	bf08      	it	eq
   b70b2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b70b4:	4620      	mov	r0, r4
   b70b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b70b8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b70b8:	b513      	push	{r0, r1, r4, lr}
   b70ba:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b70bc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b70be:	b159      	cbz	r1, b70d8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b70c0:	9101      	str	r1, [sp, #4]
   b70c2:	f000 fd5d 	bl	b7b80 <strlen>
   b70c6:	6823      	ldr	r3, [r4, #0]
   b70c8:	9901      	ldr	r1, [sp, #4]
   b70ca:	68db      	ldr	r3, [r3, #12]
   b70cc:	4602      	mov	r2, r0
   b70ce:	4620      	mov	r0, r4
    }
   b70d0:	b002      	add	sp, #8
   b70d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b70d6:	4718      	bx	r3
    }
   b70d8:	b002      	add	sp, #8
   b70da:	bd10      	pop	{r4, pc}

000b70dc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b70dc:	6803      	ldr	r3, [r0, #0]
   b70de:	689b      	ldr	r3, [r3, #8]
   b70e0:	4718      	bx	r3

000b70e2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b70e2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b70e4:	210d      	movs	r1, #13
{
   b70e6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b70e8:	f7ff fff8 	bl	b70dc <_ZN5Print5printEc>
  n += print('\n');
   b70ec:	210a      	movs	r1, #10
  size_t n = print('\r');
   b70ee:	4604      	mov	r4, r0
  n += print('\n');
   b70f0:	4628      	mov	r0, r5
   b70f2:	f7ff fff3 	bl	b70dc <_ZN5Print5printEc>
  return n;
}
   b70f6:	4420      	add	r0, r4
   b70f8:	bd38      	pop	{r3, r4, r5, pc}

000b70fa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b70fa:	b530      	push	{r4, r5, lr}
   b70fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b70fe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7100:	2a01      	cmp	r2, #1
  *str = '\0';
   b7102:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7106:	bf98      	it	ls
   b7108:	220a      	movls	r2, #10
   b710a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b710c:	460d      	mov	r5, r1
   b710e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7112:	fb01 5312 	mls	r3, r1, r2, r5
   b7116:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b711a:	2b09      	cmp	r3, #9
   b711c:	bf94      	ite	ls
   b711e:	3330      	addls	r3, #48	; 0x30
   b7120:	3337      	addhi	r3, #55	; 0x37
   b7122:	b2db      	uxtb	r3, r3
  } while(n);
   b7124:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7126:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b712a:	d9ef      	bls.n	b710c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b712c:	4621      	mov	r1, r4
   b712e:	f7ff ffc3 	bl	b70b8 <_ZN5Print5writeEPKc>
}
   b7132:	b00b      	add	sp, #44	; 0x2c
   b7134:	bd30      	pop	{r4, r5, pc}

000b7136 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b713a:	b086      	sub	sp, #24
   b713c:	af00      	add	r7, sp, #0
   b713e:	4605      	mov	r5, r0
   b7140:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7142:	1d38      	adds	r0, r7, #4
   b7144:	2114      	movs	r1, #20
{
   b7146:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7148:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b714a:	f7fd fb71 	bl	b4830 <vsnprintf>

    if (n<bufsize)
   b714e:	2813      	cmp	r0, #19
   b7150:	d80e      	bhi.n	b7170 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7152:	1d39      	adds	r1, r7, #4
   b7154:	4628      	mov	r0, r5
   b7156:	f7ff ffaf 	bl	b70b8 <_ZN5Print5writeEPKc>
   b715a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b715c:	b11e      	cbz	r6, b7166 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b715e:	4628      	mov	r0, r5
   b7160:	f7ff ffbf 	bl	b70e2 <_ZN5Print7printlnEv>
   b7164:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7166:	4620      	mov	r0, r4
   b7168:	3718      	adds	r7, #24
   b716a:	46bd      	mov	sp, r7
   b716c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7170:	f100 0308 	add.w	r3, r0, #8
   b7174:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7178:	46e8      	mov	r8, sp
        char bigger[n+1];
   b717a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b717e:	4622      	mov	r2, r4
   b7180:	1c41      	adds	r1, r0, #1
   b7182:	683b      	ldr	r3, [r7, #0]
   b7184:	4668      	mov	r0, sp
   b7186:	f7fd fb53 	bl	b4830 <vsnprintf>
  return write(str);
   b718a:	4669      	mov	r1, sp
   b718c:	4628      	mov	r0, r5
   b718e:	f7ff ff93 	bl	b70b8 <_ZN5Print5writeEPKc>
   b7192:	4604      	mov	r4, r0
   b7194:	46c5      	mov	sp, r8
   b7196:	e7e1      	b.n	b715c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7198 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b7198:	2300      	movs	r3, #0
   b719a:	6840      	ldr	r0, [r0, #4]
   b719c:	461a      	mov	r2, r3
   b719e:	4619      	mov	r1, r3
   b71a0:	f7fd bae6 	b.w	b4770 <network_on>

000b71a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b71a4:	4b01      	ldr	r3, [pc, #4]	; (b71ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b71a6:	4a02      	ldr	r2, [pc, #8]	; (b71b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b71a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b71aa:	4770      	bx	lr
   b71ac:	2003e6f8 	.word	0x2003e6f8
   b71b0:	000b7fde 	.word	0x000b7fde

000b71b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b71b4:	4b02      	ldr	r3, [pc, #8]	; (b71c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b71b6:	681a      	ldr	r2, [r3, #0]
   b71b8:	4b02      	ldr	r3, [pc, #8]	; (b71c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b71ba:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b71bc:	4770      	bx	lr
   b71be:	bf00      	nop
   b71c0:	2003e174 	.word	0x2003e174
   b71c4:	2003e6fc 	.word	0x2003e6fc

000b71c8 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   b71c8:	b510      	push	{r4, lr}
   b71ca:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   b71cc:	f7fd fa74 	bl	b46b8 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   b71d0:	4284      	cmp	r4, r0
   b71d2:	d008      	beq.n	b71e6 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   b71d4:	b11c      	cbz	r4, b71de <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   b71d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   b71da:	f7fd ba5d 	b.w	b4698 <LED_Signaling_Start>
}
   b71de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   b71e2:	f7fd ba61 	b.w	b46a8 <LED_Signaling_Stop>
}
   b71e6:	bd10      	pop	{r4, pc}

000b71e8 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   b71e8:	b570      	push	{r4, r5, r6, lr}
   b71ea:	4605      	mov	r5, r0
   b71ec:	460e      	mov	r6, r1
   b71ee:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   b71f0:	f7fd fa62 	bl	b46b8 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   b71f4:	b150      	cbz	r0, b720c <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   b71f6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
   b71fa:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
   b71fe:	f7fd fa43 	bl	b4688 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   b7202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   b7206:	20e7      	movs	r0, #231	; 0xe7
   b7208:	f7fd ba5e 	b.w	b46c8 <LED_On>
}
   b720c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7210 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7210:	4b01      	ldr	r3, [pc, #4]	; (b7218 <_GLOBAL__sub_I_RGB+0x8>)
   b7212:	2200      	movs	r2, #0
   b7214:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7216:	4770      	bx	lr
   b7218:	2003e700 	.word	0x2003e700

000b721c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b721c:	4b01      	ldr	r3, [pc, #4]	; (b7224 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b721e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7220:	4770      	bx	lr
   b7222:	bf00      	nop
   b7224:	2003e178 	.word	0x2003e178

000b7228 <serialEventRun>:
{
   b7228:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b722a:	4b0b      	ldr	r3, [pc, #44]	; (b7258 <serialEventRun+0x30>)
   b722c:	b143      	cbz	r3, b7240 <serialEventRun+0x18>
   b722e:	f000 f967 	bl	b7500 <_Z16_fetch_usbserialv>
   b7232:	6803      	ldr	r3, [r0, #0]
   b7234:	691b      	ldr	r3, [r3, #16]
   b7236:	4798      	blx	r3
   b7238:	2800      	cmp	r0, #0
   b723a:	dd01      	ble.n	b7240 <serialEventRun+0x18>
        serialEvent();
   b723c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7240:	4b06      	ldr	r3, [pc, #24]	; (b725c <serialEventRun+0x34>)
   b7242:	b143      	cbz	r3, b7256 <serialEventRun+0x2e>
   b7244:	f000 fada 	bl	b77fc <_Z22__fetch_global_Serial1v>
   b7248:	6803      	ldr	r3, [r0, #0]
   b724a:	691b      	ldr	r3, [r3, #16]
   b724c:	4798      	blx	r3
   b724e:	2800      	cmp	r0, #0
   b7250:	dd01      	ble.n	b7256 <serialEventRun+0x2e>
        serialEvent1();
   b7252:	f3af 8000 	nop.w
}
   b7256:	bd08      	pop	{r3, pc}
	...

000b7260 <_post_loop>:
{
   b7260:	b508      	push	{r3, lr}
	serialEventRun();
   b7262:	f7ff ffe1 	bl	b7228 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7266:	f7fd f8e5 	bl	b4434 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b726a:	4b01      	ldr	r3, [pc, #4]	; (b7270 <_post_loop+0x10>)
   b726c:	6018      	str	r0, [r3, #0]
}
   b726e:	bd08      	pop	{r3, pc}
   b7270:	2003e758 	.word	0x2003e758

000b7274 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7274:	4805      	ldr	r0, [pc, #20]	; (b728c <_Z33system_initialize_user_backup_ramv+0x18>)
   b7276:	4a06      	ldr	r2, [pc, #24]	; (b7290 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7278:	4906      	ldr	r1, [pc, #24]	; (b7294 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b727a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b727c:	1a12      	subs	r2, r2, r0
   b727e:	f000 fc0f 	bl	b7aa0 <memcpy>
    __backup_sram_signature = signature;
   b7282:	4b05      	ldr	r3, [pc, #20]	; (b7298 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7284:	4a05      	ldr	r2, [pc, #20]	; (b729c <_Z33system_initialize_user_backup_ramv+0x28>)
   b7286:	601a      	str	r2, [r3, #0]
}
   b7288:	bd08      	pop	{r3, pc}
   b728a:	bf00      	nop
   b728c:	2003f400 	.word	0x2003f400
   b7290:	2003f404 	.word	0x2003f404
   b7294:	000b82a0 	.word	0x000b82a0
   b7298:	2003f400 	.word	0x2003f400
   b729c:	9a271c1e 	.word	0x9a271c1e

000b72a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b72a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b72a2:	2300      	movs	r3, #0
   b72a4:	9300      	str	r3, [sp, #0]
   b72a6:	461a      	mov	r2, r3
   b72a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b72ac:	f7fd fa36 	bl	b471c <system_ctrl_set_result>
}
   b72b0:	b003      	add	sp, #12
   b72b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b72b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b72b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b72ba:	8843      	ldrh	r3, [r0, #2]
   b72bc:	2b0a      	cmp	r3, #10
   b72be:	d008      	beq.n	b72d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b72c0:	2b50      	cmp	r3, #80	; 0x50
   b72c2:	d10b      	bne.n	b72dc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b72c4:	4b09      	ldr	r3, [pc, #36]	; (b72ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b72c6:	681b      	ldr	r3, [r3, #0]
   b72c8:	b14b      	cbz	r3, b72de <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b72ca:	b003      	add	sp, #12
   b72cc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b72d0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b72d2:	f7ff ffe5 	bl	b72a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b72d6:	b003      	add	sp, #12
   b72d8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b72dc:	2300      	movs	r3, #0
   b72de:	9300      	str	r3, [sp, #0]
   b72e0:	461a      	mov	r2, r3
   b72e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b72e6:	f7fd fa19 	bl	b471c <system_ctrl_set_result>
}
   b72ea:	e7f4      	b.n	b72d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b72ec:	2003e714 	.word	0x2003e714

000b72f0 <module_user_init_hook>:
{
   b72f0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b72f2:	4812      	ldr	r0, [pc, #72]	; (b733c <module_user_init_hook+0x4c>)
   b72f4:	2100      	movs	r1, #0
   b72f6:	f7fd fab3 	bl	b4860 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b72fa:	4b11      	ldr	r3, [pc, #68]	; (b7340 <module_user_init_hook+0x50>)
   b72fc:	681a      	ldr	r2, [r3, #0]
   b72fe:	4b11      	ldr	r3, [pc, #68]	; (b7344 <module_user_init_hook+0x54>)
   b7300:	429a      	cmp	r2, r3
   b7302:	4b11      	ldr	r3, [pc, #68]	; (b7348 <module_user_init_hook+0x58>)
   b7304:	bf0c      	ite	eq
   b7306:	2201      	moveq	r2, #1
   b7308:	2200      	movne	r2, #0
   b730a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b730c:	d001      	beq.n	b7312 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b730e:	f7ff ffb1 	bl	b7274 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7312:	f7fd f87f 	bl	b4414 <HAL_RNG_GetRandomNumber>
   b7316:	4604      	mov	r4, r0
    srand(seed);
   b7318:	f000 fbf2 	bl	b7b00 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b731c:	4b0b      	ldr	r3, [pc, #44]	; (b734c <module_user_init_hook+0x5c>)
   b731e:	b113      	cbz	r3, b7326 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7320:	4620      	mov	r0, r4
   b7322:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7326:	2100      	movs	r1, #0
   b7328:	4808      	ldr	r0, [pc, #32]	; (b734c <module_user_init_hook+0x5c>)
   b732a:	f7fd fa61 	bl	b47f0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b732e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7332:	4807      	ldr	r0, [pc, #28]	; (b7350 <module_user_init_hook+0x60>)
   b7334:	2100      	movs	r1, #0
   b7336:	f7fd b9e7 	b.w	b4708 <system_ctrl_set_app_request_handler>
   b733a:	bf00      	nop
   b733c:	000b721d 	.word	0x000b721d
   b7340:	2003f400 	.word	0x2003f400
   b7344:	9a271c1e 	.word	0x9a271c1e
   b7348:	2003e710 	.word	0x2003e710
   b734c:	00000000 	.word	0x00000000
   b7350:	000b72b9 	.word	0x000b72b9

000b7354 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7354:	4770      	bx	lr

000b7356 <_ZN9IPAddressD0Ev>:
   b7356:	b510      	push	{r4, lr}
   b7358:	2118      	movs	r1, #24
   b735a:	4604      	mov	r4, r0
   b735c:	f7fc fe9d 	bl	b409a <_ZdlPvj>
   b7360:	4620      	mov	r0, r4
   b7362:	bd10      	pop	{r4, pc}

000b7364 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7364:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7366:	7d03      	ldrb	r3, [r0, #20]
   b7368:	2b06      	cmp	r3, #6
{
   b736a:	b08d      	sub	sp, #52	; 0x34
   b736c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b736e:	f100 0704 	add.w	r7, r0, #4
   b7372:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7376:	d012      	beq.n	b739e <_ZNK9IPAddress7printToER5Print+0x3a>
   b7378:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b737c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7380:	220a      	movs	r2, #10
   b7382:	4630      	mov	r0, r6
   b7384:	f7ff feb9 	bl	b70fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7388:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b738a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b738c:	d019      	beq.n	b73c2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b738e:	2c00      	cmp	r4, #0
   b7390:	d0f4      	beq.n	b737c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7392:	212e      	movs	r1, #46	; 0x2e
   b7394:	4630      	mov	r0, r6
   b7396:	f7ff fea1 	bl	b70dc <_ZN5Print5printEc>
   b739a:	4404      	add	r4, r0
   b739c:	e7ee      	b.n	b737c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b739e:	232f      	movs	r3, #47	; 0x2f
   b73a0:	466a      	mov	r2, sp
   b73a2:	4639      	mov	r1, r7
   b73a4:	200a      	movs	r0, #10
		buf[0] = 0;
   b73a6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b73aa:	f7fd f8f5 	bl	b4598 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b73ae:	4668      	mov	r0, sp
   b73b0:	f000 fbe6 	bl	b7b80 <strlen>
   b73b4:	6833      	ldr	r3, [r6, #0]
   b73b6:	4602      	mov	r2, r0
   b73b8:	68db      	ldr	r3, [r3, #12]
   b73ba:	4669      	mov	r1, sp
   b73bc:	4630      	mov	r0, r6
   b73be:	4798      	blx	r3
   b73c0:	4604      	mov	r4, r0
    }
    return n;
}
   b73c2:	4620      	mov	r0, r4
   b73c4:	b00d      	add	sp, #52	; 0x34
   b73c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b73c8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b73c8:	b510      	push	{r4, lr}
   b73ca:	4b05      	ldr	r3, [pc, #20]	; (b73e0 <_ZN9IPAddressC1Ev+0x18>)
   b73cc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b73ce:	2211      	movs	r2, #17
   b73d0:	f840 3b04 	str.w	r3, [r0], #4
   b73d4:	2100      	movs	r1, #0
   b73d6:	f000 fb8b 	bl	b7af0 <memset>
}
   b73da:	4620      	mov	r0, r4
   b73dc:	bd10      	pop	{r4, pc}
   b73de:	bf00      	nop
   b73e0:	000b8008 	.word	0x000b8008

000b73e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b73e4:	4603      	mov	r3, r0
   b73e6:	4a07      	ldr	r2, [pc, #28]	; (b7404 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b73e8:	b510      	push	{r4, lr}
   b73ea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b73ee:	f101 0210 	add.w	r2, r1, #16
   b73f2:	f851 4b04 	ldr.w	r4, [r1], #4
   b73f6:	f843 4b04 	str.w	r4, [r3], #4
   b73fa:	4291      	cmp	r1, r2
   b73fc:	d1f9      	bne.n	b73f2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b73fe:	780a      	ldrb	r2, [r1, #0]
   b7400:	701a      	strb	r2, [r3, #0]
}
   b7402:	bd10      	pop	{r4, pc}
   b7404:	000b8008 	.word	0x000b8008

000b7408 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7408:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b740a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b740e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7412:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7416:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b741a:	2304      	movs	r3, #4
   b741c:	6041      	str	r1, [r0, #4]
   b741e:	7503      	strb	r3, [r0, #20]
}
   b7420:	bd10      	pop	{r4, pc}
	...

000b7424 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7424:	b507      	push	{r0, r1, r2, lr}
   b7426:	4b06      	ldr	r3, [pc, #24]	; (b7440 <_ZN9IPAddressC1EPKh+0x1c>)
   b7428:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b742a:	78cb      	ldrb	r3, [r1, #3]
   b742c:	9300      	str	r3, [sp, #0]
   b742e:	788b      	ldrb	r3, [r1, #2]
   b7430:	784a      	ldrb	r2, [r1, #1]
   b7432:	7809      	ldrb	r1, [r1, #0]
   b7434:	f7ff ffe8 	bl	b7408 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7438:	b003      	add	sp, #12
   b743a:	f85d fb04 	ldr.w	pc, [sp], #4
   b743e:	bf00      	nop
   b7440:	000b8008 	.word	0x000b8008

000b7444 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7444:	7441      	strb	r1, [r0, #17]
}
   b7446:	4770      	bx	lr

000b7448 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7448:	4770      	bx	lr

000b744a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b744a:	4770      	bx	lr

000b744c <_ZN9USBSerial4readEv>:
{
   b744c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b744e:	2100      	movs	r1, #0
   b7450:	7c00      	ldrb	r0, [r0, #16]
   b7452:	f7fd f901 	bl	b4658 <HAL_USB_USART_Receive_Data>
}
   b7456:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b745a:	bd08      	pop	{r3, pc}

000b745c <_ZN9USBSerial4peekEv>:
{
   b745c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b745e:	2101      	movs	r1, #1
   b7460:	7c00      	ldrb	r0, [r0, #16]
   b7462:	f7fd f8f9 	bl	b4658 <HAL_USB_USART_Receive_Data>
}
   b7466:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b746a:	bd08      	pop	{r3, pc}

000b746c <_ZN9USBSerial17availableForWriteEv>:
{
   b746c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b746e:	7c00      	ldrb	r0, [r0, #16]
   b7470:	f7fd f8ea 	bl	b4648 <HAL_USB_USART_Available_Data_For_Write>
}
   b7474:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7478:	bd08      	pop	{r3, pc}

000b747a <_ZN9USBSerial9availableEv>:
{
   b747a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b747c:	7c00      	ldrb	r0, [r0, #16]
   b747e:	f7fd f8db 	bl	b4638 <HAL_USB_USART_Available_Data>
}
   b7482:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7486:	bd08      	pop	{r3, pc}

000b7488 <_ZN9USBSerial5writeEh>:
{
   b7488:	b513      	push	{r0, r1, r4, lr}
   b748a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b748c:	7c00      	ldrb	r0, [r0, #16]
{
   b748e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7490:	f7fd f8da 	bl	b4648 <HAL_USB_USART_Available_Data_For_Write>
   b7494:	2800      	cmp	r0, #0
   b7496:	9901      	ldr	r1, [sp, #4]
   b7498:	dc01      	bgt.n	b749e <_ZN9USBSerial5writeEh+0x16>
   b749a:	7c60      	ldrb	r0, [r4, #17]
   b749c:	b120      	cbz	r0, b74a8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b749e:	7c20      	ldrb	r0, [r4, #16]
   b74a0:	f7fd f8e2 	bl	b4668 <HAL_USB_USART_Send_Data>
   b74a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b74a8:	b002      	add	sp, #8
   b74aa:	bd10      	pop	{r4, pc}

000b74ac <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b74ac:	7c00      	ldrb	r0, [r0, #16]
   b74ae:	f7fd b8e3 	b.w	b4678 <HAL_USB_USART_Flush_Data>

000b74b2 <_ZN9USBSerialD0Ev>:
   b74b2:	b510      	push	{r4, lr}
   b74b4:	2114      	movs	r1, #20
   b74b6:	4604      	mov	r4, r0
   b74b8:	f7fc fdef 	bl	b409a <_ZdlPvj>
   b74bc:	4620      	mov	r0, r4
   b74be:	bd10      	pop	{r4, pc}

000b74c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b74c0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b74c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b74c6:	4604      	mov	r4, r0
   b74c8:	4608      	mov	r0, r1
   b74ca:	2100      	movs	r1, #0
   b74cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b74d0:	4b04      	ldr	r3, [pc, #16]	; (b74e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b74d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b74d4:	2301      	movs	r3, #1
  _serial = serial;
   b74d6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b74d8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b74da:	4611      	mov	r1, r2
   b74dc:	f7fd f89c 	bl	b4618 <HAL_USB_USART_Init>
}
   b74e0:	4620      	mov	r0, r4
   b74e2:	bd10      	pop	{r4, pc}
   b74e4:	000b801c 	.word	0x000b801c

000b74e8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b74e8:	7c00      	ldrb	r0, [r0, #16]
   b74ea:	2200      	movs	r2, #0
   b74ec:	f7fd b89c 	b.w	b4628 <HAL_USB_USART_Begin>

000b74f0 <_Z19acquireSerialBufferv>:
{
   b74f0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b74f2:	2214      	movs	r2, #20
{
   b74f4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b74f6:	2100      	movs	r1, #0
   b74f8:	f000 fafa 	bl	b7af0 <memset>
}
   b74fc:	4620      	mov	r0, r4
   b74fe:	bd10      	pop	{r4, pc}

000b7500 <_Z16_fetch_usbserialv>:
{
   b7500:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7502:	4c0f      	ldr	r4, [pc, #60]	; (b7540 <_Z16_fetch_usbserialv+0x40>)
{
   b7504:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7506:	a803      	add	r0, sp, #12
   b7508:	f7ff fff2 	bl	b74f0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b750c:	7821      	ldrb	r1, [r4, #0]
   b750e:	f3bf 8f5b 	dmb	ish
   b7512:	f011 0101 	ands.w	r1, r1, #1
   b7516:	d10f      	bne.n	b7538 <_Z16_fetch_usbserialv+0x38>
   b7518:	4620      	mov	r0, r4
   b751a:	9101      	str	r1, [sp, #4]
   b751c:	f7fc fdbf 	bl	b409e <__cxa_guard_acquire>
   b7520:	9901      	ldr	r1, [sp, #4]
   b7522:	b148      	cbz	r0, b7538 <_Z16_fetch_usbserialv+0x38>
   b7524:	aa03      	add	r2, sp, #12
   b7526:	4807      	ldr	r0, [pc, #28]	; (b7544 <_Z16_fetch_usbserialv+0x44>)
   b7528:	f7ff ffca 	bl	b74c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b752c:	4620      	mov	r0, r4
   b752e:	f7fc fdbb 	bl	b40a8 <__cxa_guard_release>
   b7532:	4805      	ldr	r0, [pc, #20]	; (b7548 <_Z16_fetch_usbserialv+0x48>)
   b7534:	f000 fa9e 	bl	b7a74 <atexit>
	return _usbserial;
}
   b7538:	4802      	ldr	r0, [pc, #8]	; (b7544 <_Z16_fetch_usbserialv+0x44>)
   b753a:	b008      	add	sp, #32
   b753c:	bd10      	pop	{r4, pc}
   b753e:	bf00      	nop
   b7540:	2003e718 	.word	0x2003e718
   b7544:	2003e71c 	.word	0x2003e71c
   b7548:	000b7449 	.word	0x000b7449

000b754c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b754c:	4770      	bx	lr

000b754e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b754e:	7441      	strb	r1, [r0, #17]
}
   b7550:	4770      	bx	lr

000b7552 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7552:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7554:	7c00      	ldrb	r0, [r0, #16]
   b7556:	f7fd f84f 	bl	b45f8 <hal_usart_available_data_for_write>
}
   b755a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b755e:	bd08      	pop	{r3, pc}

000b7560 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7560:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7562:	7c00      	ldrb	r0, [r0, #16]
   b7564:	f7fd f828 	bl	b45b8 <hal_usart_available>
}
   b7568:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b756c:	bd08      	pop	{r3, pc}

000b756e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b756e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7570:	7c00      	ldrb	r0, [r0, #16]
   b7572:	f7fd f831 	bl	b45d8 <hal_usart_peek>
}
   b7576:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b757a:	bd08      	pop	{r3, pc}

000b757c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b757c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b757e:	7c00      	ldrb	r0, [r0, #16]
   b7580:	f7fd f822 	bl	b45c8 <hal_usart_read>
}
   b7584:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7588:	bd08      	pop	{r3, pc}

000b758a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b758a:	7c00      	ldrb	r0, [r0, #16]
   b758c:	f7fd b82c 	b.w	b45e8 <hal_usart_flush>

000b7590 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7590:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7592:	7c45      	ldrb	r5, [r0, #17]
{
   b7594:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7596:	b12d      	cbz	r5, b75a4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7598:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b759a:	b003      	add	sp, #12
   b759c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b75a0:	f7fd b802 	b.w	b45a8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b75a4:	7c00      	ldrb	r0, [r0, #16]
   b75a6:	9101      	str	r1, [sp, #4]
   b75a8:	f7fd f826 	bl	b45f8 <hal_usart_available_data_for_write>
   b75ac:	2800      	cmp	r0, #0
   b75ae:	9901      	ldr	r1, [sp, #4]
   b75b0:	dcf2      	bgt.n	b7598 <_ZN11USARTSerial5writeEh+0x8>
}
   b75b2:	4628      	mov	r0, r5
   b75b4:	b003      	add	sp, #12
   b75b6:	bd30      	pop	{r4, r5, pc}

000b75b8 <_ZN11USARTSerialD0Ev>:
   b75b8:	b510      	push	{r4, lr}
   b75ba:	2114      	movs	r1, #20
   b75bc:	4604      	mov	r4, r0
   b75be:	f7fc fd6c 	bl	b409a <_ZdlPvj>
   b75c2:	4620      	mov	r0, r4
   b75c4:	bd10      	pop	{r4, pc}
	...

000b75c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b75c8:	b510      	push	{r4, lr}
   b75ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b75ce:	4604      	mov	r4, r0
   b75d0:	4608      	mov	r0, r1
   b75d2:	4611      	mov	r1, r2
   b75d4:	2200      	movs	r2, #0
   b75d6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b75da:	4b04      	ldr	r3, [pc, #16]	; (b75ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b75dc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b75de:	2301      	movs	r3, #1
  _serial = serial;
   b75e0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b75e2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b75e4:	f7fd f810 	bl	b4608 <hal_usart_init_ex>
}
   b75e8:	4620      	mov	r0, r4
   b75ea:	bd10      	pop	{r4, pc}
   b75ec:	000b804c 	.word	0x000b804c

000b75f0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b75f0:	2200      	movs	r2, #0
   b75f2:	6840      	ldr	r0, [r0, #4]
   b75f4:	4611      	mov	r1, r2
   b75f6:	f7fd b8b3 	b.w	b4760 <network_ready>

000b75fa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b75fa:	2200      	movs	r2, #0
   b75fc:	6840      	ldr	r0, [r0, #4]
   b75fe:	4611      	mov	r1, r2
   b7600:	f7fd b8ce 	b.w	b47a0 <network_listening>

000b7604 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7604:	2200      	movs	r2, #0
   b7606:	6840      	ldr	r0, [r0, #4]
   b7608:	4611      	mov	r1, r2
   b760a:	f7fd b8d9 	b.w	b47c0 <network_get_listen_timeout>

000b760e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b760e:	6840      	ldr	r0, [r0, #4]
   b7610:	2200      	movs	r2, #0
   b7612:	f7fd b8cd 	b.w	b47b0 <network_set_listen_timeout>

000b7616 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7616:	6840      	ldr	r0, [r0, #4]
   b7618:	2200      	movs	r2, #0
   b761a:	f081 0101 	eor.w	r1, r1, #1
   b761e:	f7fd b8b7 	b.w	b4790 <network_listen>

000b7622 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7622:	2300      	movs	r3, #0
   b7624:	6840      	ldr	r0, [r0, #4]
   b7626:	461a      	mov	r2, r3
   b7628:	4619      	mov	r1, r3
   b762a:	f7fd b8a9 	b.w	b4780 <network_off>

000b762e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b762e:	2200      	movs	r2, #0
   b7630:	6840      	ldr	r0, [r0, #4]
   b7632:	4611      	mov	r1, r2
   b7634:	f7fd b884 	b.w	b4740 <network_connecting>

000b7638 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7638:	6840      	ldr	r0, [r0, #4]
   b763a:	2200      	movs	r2, #0
   b763c:	2102      	movs	r1, #2
   b763e:	f7fd b887 	b.w	b4750 <network_disconnect>

000b7642 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7642:	2300      	movs	r3, #0
   b7644:	6840      	ldr	r0, [r0, #4]
   b7646:	461a      	mov	r2, r3
   b7648:	f7fd b872 	b.w	b4730 <network_connect>

000b764c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b764c:	4b02      	ldr	r3, [pc, #8]	; (b7658 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b764e:	2204      	movs	r2, #4
   b7650:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7652:	4a02      	ldr	r2, [pc, #8]	; (b765c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7654:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7656:	4770      	bx	lr
   b7658:	2003e730 	.word	0x2003e730
   b765c:	000b807c 	.word	0x000b807c

000b7660 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7660:	2300      	movs	r3, #0
   b7662:	6840      	ldr	r0, [r0, #4]
   b7664:	461a      	mov	r2, r3
   b7666:	f7fd b863 	b.w	b4730 <network_connect>

000b766a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b766a:	6840      	ldr	r0, [r0, #4]
   b766c:	2200      	movs	r2, #0
   b766e:	2102      	movs	r1, #2
   b7670:	f7fd b86e 	b.w	b4750 <network_disconnect>

000b7674 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7674:	2200      	movs	r2, #0
   b7676:	6840      	ldr	r0, [r0, #4]
   b7678:	4611      	mov	r1, r2
   b767a:	f7fd b861 	b.w	b4740 <network_connecting>

000b767e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b767e:	2200      	movs	r2, #0
   b7680:	6840      	ldr	r0, [r0, #4]
   b7682:	4611      	mov	r1, r2
   b7684:	f7fd b86c 	b.w	b4760 <network_ready>

000b7688 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7688:	2300      	movs	r3, #0
   b768a:	6840      	ldr	r0, [r0, #4]
   b768c:	461a      	mov	r2, r3
   b768e:	4619      	mov	r1, r3
   b7690:	f7fd b86e 	b.w	b4770 <network_on>

000b7694 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7694:	2300      	movs	r3, #0
   b7696:	6840      	ldr	r0, [r0, #4]
   b7698:	461a      	mov	r2, r3
   b769a:	4619      	mov	r1, r3
   b769c:	f7fd b870 	b.w	b4780 <network_off>

000b76a0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b76a0:	6840      	ldr	r0, [r0, #4]
   b76a2:	2100      	movs	r1, #0
   b76a4:	f7fd b894 	b.w	b47d0 <network_is_on>

000b76a8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b76a8:	6840      	ldr	r0, [r0, #4]
   b76aa:	2100      	movs	r1, #0
   b76ac:	f7fd b898 	b.w	b47e0 <network_is_off>

000b76b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b76b0:	6840      	ldr	r0, [r0, #4]
   b76b2:	2200      	movs	r2, #0
   b76b4:	f081 0101 	eor.w	r1, r1, #1
   b76b8:	f7fd b86a 	b.w	b4790 <network_listen>

000b76bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b76bc:	6840      	ldr	r0, [r0, #4]
   b76be:	2200      	movs	r2, #0
   b76c0:	f7fd b876 	b.w	b47b0 <network_set_listen_timeout>

000b76c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b76c4:	2200      	movs	r2, #0
   b76c6:	6840      	ldr	r0, [r0, #4]
   b76c8:	4611      	mov	r1, r2
   b76ca:	f7fd b879 	b.w	b47c0 <network_get_listen_timeout>

000b76ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b76ce:	2200      	movs	r2, #0
   b76d0:	6840      	ldr	r0, [r0, #4]
   b76d2:	4611      	mov	r1, r2
   b76d4:	f7fd b864 	b.w	b47a0 <network_listening>

000b76d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b76d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b76dc:	b095      	sub	sp, #84	; 0x54
   b76de:	4614      	mov	r4, r2
   b76e0:	460d      	mov	r5, r1
   b76e2:	4607      	mov	r7, r0
    IPAddress addr;
   b76e4:	f7ff fe70 	bl	b73c8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b76e8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b76ea:	221c      	movs	r2, #28
   b76ec:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b76ee:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b76f0:	f000 f9fe 	bl	b7af0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b76f4:	2340      	movs	r3, #64	; 0x40
   b76f6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b76f8:	4620      	mov	r0, r4
   b76fa:	466b      	mov	r3, sp
   b76fc:	aa0c      	add	r2, sp, #48	; 0x30
   b76fe:	2100      	movs	r1, #0
   b7700:	f7fc fe80 	bl	b4404 <netdb_getaddrinfo>
    if (!r) {
   b7704:	4604      	mov	r4, r0
   b7706:	2800      	cmp	r0, #0
   b7708:	d14b      	bne.n	b77a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b770a:	4602      	mov	r2, r0
   b770c:	2101      	movs	r1, #1
   b770e:	6868      	ldr	r0, [r5, #4]
   b7710:	f7fd f826 	bl	b4760 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7714:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7716:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7718:	4622      	mov	r2, r4
   b771a:	6868      	ldr	r0, [r5, #4]
   b771c:	f7fd f820 	bl	b4760 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7720:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7722:	4681      	mov	r9, r0
        bool ok = false;
   b7724:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7726:	2e00      	cmp	r6, #0
   b7728:	d03b      	beq.n	b77a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b772a:	2900      	cmp	r1, #0
   b772c:	d139      	bne.n	b77a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b772e:	6873      	ldr	r3, [r6, #4]
   b7730:	2b02      	cmp	r3, #2
   b7732:	d003      	beq.n	b773c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7734:	2b0a      	cmp	r3, #10
   b7736:	d011      	beq.n	b775c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7738:	69f6      	ldr	r6, [r6, #28]
   b773a:	e7f4      	b.n	b7726 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b773c:	f1b8 0f00 	cmp.w	r8, #0
   b7740:	d0fa      	beq.n	b7738 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7742:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7744:	a806      	add	r0, sp, #24
   b7746:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7748:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b774a:	f7ff fe6b 	bl	b7424 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b774e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7750:	1d3c      	adds	r4, r7, #4
   b7752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7754:	682b      	ldr	r3, [r5, #0]
   b7756:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7758:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b775a:	e7ed      	b.n	b7738 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b775c:	f1b9 0f00 	cmp.w	r9, #0
   b7760:	d0ea      	beq.n	b7738 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7762:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7764:	2210      	movs	r2, #16
   b7766:	a801      	add	r0, sp, #4
   b7768:	f000 f9c2 	bl	b7af0 <memset>
                    a.v = 6;
   b776c:	2306      	movs	r3, #6
   b776e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7772:	ad01      	add	r5, sp, #4
   b7774:	f104 0308 	add.w	r3, r4, #8
   b7778:	3418      	adds	r4, #24
   b777a:	6818      	ldr	r0, [r3, #0]
   b777c:	6859      	ldr	r1, [r3, #4]
   b777e:	462a      	mov	r2, r5
   b7780:	c203      	stmia	r2!, {r0, r1}
   b7782:	3308      	adds	r3, #8
   b7784:	42a3      	cmp	r3, r4
   b7786:	4615      	mov	r5, r2
   b7788:	d1f7      	bne.n	b777a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b778a:	a901      	add	r1, sp, #4
   b778c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b778e:	ad07      	add	r5, sp, #28
   b7790:	f7ff fe28 	bl	b73e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7796:	1d3c      	adds	r4, r7, #4
   b7798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b779a:	682b      	ldr	r3, [r5, #0]
   b779c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b779e:	4649      	mov	r1, r9
   b77a0:	e7ca      	b.n	b7738 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b77a2:	9800      	ldr	r0, [sp, #0]
   b77a4:	f7fc fe26 	bl	b43f4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b77a8:	4638      	mov	r0, r7
   b77aa:	b015      	add	sp, #84	; 0x54
   b77ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b77b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b77b0:	4b02      	ldr	r3, [pc, #8]	; (b77bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b77b2:	4a03      	ldr	r2, [pc, #12]	; (b77c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b77b4:	601a      	str	r2, [r3, #0]
   b77b6:	2200      	movs	r2, #0
   b77b8:	605a      	str	r2, [r3, #4]

} // spark
   b77ba:	4770      	bx	lr
   b77bc:	2003e738 	.word	0x2003e738
   b77c0:	000b80b8 	.word	0x000b80b8

000b77c4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b77c4:	4770      	bx	lr
	...

000b77c8 <_Z20acquireSerial1Bufferv>:
{
   b77c8:	b538      	push	{r3, r4, r5, lr}
   b77ca:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b77cc:	2514      	movs	r5, #20
   b77ce:	462a      	mov	r2, r5
   b77d0:	2100      	movs	r1, #0
   b77d2:	f000 f98d 	bl	b7af0 <memset>
   b77d6:	8025      	strh	r5, [r4, #0]
   b77d8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77da:	4907      	ldr	r1, [pc, #28]	; (b77f8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b77dc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77de:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b77e0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77e2:	f000 f82f 	bl	b7844 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77e6:	4904      	ldr	r1, [pc, #16]	; (b77f8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b77e8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77ea:	4628      	mov	r0, r5
   b77ec:	f000 f82a 	bl	b7844 <_ZnajRKSt9nothrow_t>
    };
   b77f0:	60e0      	str	r0, [r4, #12]
}
   b77f2:	4620      	mov	r0, r4
   b77f4:	bd38      	pop	{r3, r4, r5, pc}
   b77f6:	bf00      	nop
   b77f8:	000b80ec 	.word	0x000b80ec

000b77fc <_Z22__fetch_global_Serial1v>:
{
   b77fc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b77fe:	4d0e      	ldr	r5, [pc, #56]	; (b7838 <_Z22__fetch_global_Serial1v+0x3c>)
   b7800:	7829      	ldrb	r1, [r5, #0]
   b7802:	f3bf 8f5b 	dmb	ish
   b7806:	f011 0401 	ands.w	r4, r1, #1
{
   b780a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b780c:	d111      	bne.n	b7832 <_Z22__fetch_global_Serial1v+0x36>
   b780e:	4628      	mov	r0, r5
   b7810:	f7fc fc45 	bl	b409e <__cxa_guard_acquire>
   b7814:	b168      	cbz	r0, b7832 <_Z22__fetch_global_Serial1v+0x36>
   b7816:	a801      	add	r0, sp, #4
   b7818:	f7ff ffd6 	bl	b77c8 <_Z20acquireSerial1Bufferv>
   b781c:	aa01      	add	r2, sp, #4
   b781e:	4621      	mov	r1, r4
   b7820:	4806      	ldr	r0, [pc, #24]	; (b783c <_Z22__fetch_global_Serial1v+0x40>)
   b7822:	f7ff fed1 	bl	b75c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7826:	4628      	mov	r0, r5
   b7828:	f7fc fc3e 	bl	b40a8 <__cxa_guard_release>
   b782c:	4804      	ldr	r0, [pc, #16]	; (b7840 <_Z22__fetch_global_Serial1v+0x44>)
   b782e:	f000 f921 	bl	b7a74 <atexit>
    return serial1;
}
   b7832:	4802      	ldr	r0, [pc, #8]	; (b783c <_Z22__fetch_global_Serial1v+0x40>)
   b7834:	b007      	add	sp, #28
   b7836:	bd30      	pop	{r4, r5, pc}
   b7838:	2003e740 	.word	0x2003e740
   b783c:	2003e744 	.word	0x2003e744
   b7840:	000b77c5 	.word	0x000b77c5

000b7844 <_ZnajRKSt9nothrow_t>:
   b7844:	f7fc bc27 	b.w	b4096 <_Znaj>

000b7848 <_ZSt25__throw_bad_function_callv>:
   b7848:	b508      	push	{r3, lr}
   b784a:	f7fc fff9 	bl	b4840 <abort>
	...

000b7850 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7850:	4901      	ldr	r1, [pc, #4]	; (b7858 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7852:	f000 b8f9 	b.w	b7a48 <_ZNKSt9type_infoeqERKS_>
   b7856:	bf00      	nop
   b7858:	000b8108 	.word	0x000b8108

000b785c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b785c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b785e:	2400      	movs	r4, #0
   b7860:	2310      	movs	r3, #16
   b7862:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7866:	6803      	ldr	r3, [r0, #0]
   b7868:	4615      	mov	r5, r2
   b786a:	699e      	ldr	r6, [r3, #24]
   b786c:	6812      	ldr	r2, [r2, #0]
   b786e:	466b      	mov	r3, sp
   b7870:	e9cd 4400 	strd	r4, r4, [sp]
   b7874:	47b0      	blx	r6
   b7876:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b787a:	f003 0306 	and.w	r3, r3, #6
   b787e:	2b06      	cmp	r3, #6
   b7880:	bf03      	ittte	eq
   b7882:	9b00      	ldreq	r3, [sp, #0]
   b7884:	602b      	streq	r3, [r5, #0]
   b7886:	2001      	moveq	r0, #1
   b7888:	4620      	movne	r0, r4
   b788a:	b004      	add	sp, #16
   b788c:	bd70      	pop	{r4, r5, r6, pc}

000b788e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b788e:	9800      	ldr	r0, [sp, #0]
   b7890:	4290      	cmp	r0, r2
   b7892:	bf14      	ite	ne
   b7894:	2001      	movne	r0, #1
   b7896:	2006      	moveq	r0, #6
   b7898:	4770      	bx	lr
	...

000b789c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b789c:	b510      	push	{r4, lr}
   b789e:	4b03      	ldr	r3, [pc, #12]	; (b78ac <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b78a0:	6003      	str	r3, [r0, #0]
   b78a2:	4604      	mov	r4, r0
   b78a4:	f000 f8cd 	bl	b7a42 <_ZNSt9type_infoD1Ev>
   b78a8:	4620      	mov	r0, r4
   b78aa:	bd10      	pop	{r4, pc}
   b78ac:	000b8148 	.word	0x000b8148

000b78b0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b78b0:	b510      	push	{r4, lr}
   b78b2:	4604      	mov	r4, r0
   b78b4:	f7ff fff2 	bl	b789c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b78b8:	4620      	mov	r0, r4
   b78ba:	2108      	movs	r1, #8
   b78bc:	f7fc fbed 	bl	b409a <_ZdlPvj>
   b78c0:	4620      	mov	r0, r4
   b78c2:	bd10      	pop	{r4, pc}

000b78c4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b78c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b78c8:	461f      	mov	r7, r3
   b78ca:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b78ce:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b78d2:	4598      	cmp	r8, r3
   b78d4:	4606      	mov	r6, r0
   b78d6:	4615      	mov	r5, r2
   b78d8:	d107      	bne.n	b78ea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b78da:	9907      	ldr	r1, [sp, #28]
   b78dc:	f000 f8b4 	bl	b7a48 <_ZNKSt9type_infoeqERKS_>
   b78e0:	b118      	cbz	r0, b78ea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b78e2:	7165      	strb	r5, [r4, #5]
   b78e4:	2000      	movs	r0, #0
   b78e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b78ea:	4639      	mov	r1, r7
   b78ec:	4630      	mov	r0, r6
   b78ee:	f000 f8ab 	bl	b7a48 <_ZNKSt9type_infoeqERKS_>
   b78f2:	2800      	cmp	r0, #0
   b78f4:	d0f6      	beq.n	b78e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b78f6:	2301      	movs	r3, #1
   b78f8:	f8c4 8000 	str.w	r8, [r4]
   b78fc:	7125      	strb	r5, [r4, #4]
   b78fe:	71a3      	strb	r3, [r4, #6]
   b7900:	e7f0      	b.n	b78e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7902 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7902:	b538      	push	{r3, r4, r5, lr}
   b7904:	4615      	mov	r5, r2
   b7906:	461c      	mov	r4, r3
   b7908:	f000 f89e 	bl	b7a48 <_ZNKSt9type_infoeqERKS_>
   b790c:	b120      	cbz	r0, b7918 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b790e:	2308      	movs	r3, #8
   b7910:	60e3      	str	r3, [r4, #12]
   b7912:	2306      	movs	r3, #6
   b7914:	6025      	str	r5, [r4, #0]
   b7916:	7123      	strb	r3, [r4, #4]
   b7918:	bd38      	pop	{r3, r4, r5, pc}

000b791a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b791a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b791c:	4605      	mov	r5, r0
   b791e:	460c      	mov	r4, r1
   b7920:	9201      	str	r2, [sp, #4]
   b7922:	461e      	mov	r6, r3
   b7924:	f000 f890 	bl	b7a48 <_ZNKSt9type_infoeqERKS_>
   b7928:	b950      	cbnz	r0, b7940 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b792a:	2e03      	cmp	r6, #3
   b792c:	d808      	bhi.n	b7940 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b792e:	6823      	ldr	r3, [r4, #0]
   b7930:	9a01      	ldr	r2, [sp, #4]
   b7932:	695b      	ldr	r3, [r3, #20]
   b7934:	4629      	mov	r1, r5
   b7936:	4620      	mov	r0, r4
   b7938:	b002      	add	sp, #8
   b793a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b793e:	4718      	bx	r3
   b7940:	b002      	add	sp, #8
   b7942:	bd70      	pop	{r4, r5, r6, pc}

000b7944 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7944:	b510      	push	{r4, lr}
   b7946:	4b03      	ldr	r3, [pc, #12]	; (b7954 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7948:	6003      	str	r3, [r0, #0]
   b794a:	4604      	mov	r4, r0
   b794c:	f7ff ffa6 	bl	b789c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7950:	4620      	mov	r0, r4
   b7952:	bd10      	pop	{r4, pc}
   b7954:	000b81a8 	.word	0x000b81a8

000b7958 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7958:	b510      	push	{r4, lr}
   b795a:	4604      	mov	r4, r0
   b795c:	f7ff fff2 	bl	b7944 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7960:	4620      	mov	r0, r4
   b7962:	210c      	movs	r1, #12
   b7964:	f7fc fb99 	bl	b409a <_ZdlPvj>
   b7968:	4620      	mov	r0, r4
   b796a:	bd10      	pop	{r4, pc}

000b796c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b796c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b796e:	9f08      	ldr	r7, [sp, #32]
   b7970:	4297      	cmp	r7, r2
   b7972:	4605      	mov	r5, r0
   b7974:	460e      	mov	r6, r1
   b7976:	4614      	mov	r4, r2
   b7978:	d00a      	beq.n	b7990 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b797a:	68a8      	ldr	r0, [r5, #8]
   b797c:	6802      	ldr	r2, [r0, #0]
   b797e:	9708      	str	r7, [sp, #32]
   b7980:	6a15      	ldr	r5, [r2, #32]
   b7982:	4631      	mov	r1, r6
   b7984:	4622      	mov	r2, r4
   b7986:	46ac      	mov	ip, r5
   b7988:	b003      	add	sp, #12
   b798a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b798e:	4760      	bx	ip
   b7990:	4619      	mov	r1, r3
   b7992:	9301      	str	r3, [sp, #4]
   b7994:	f000 f858 	bl	b7a48 <_ZNKSt9type_infoeqERKS_>
   b7998:	9b01      	ldr	r3, [sp, #4]
   b799a:	2800      	cmp	r0, #0
   b799c:	d0ed      	beq.n	b797a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b799e:	2006      	movs	r0, #6
   b79a0:	b003      	add	sp, #12
   b79a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b79a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b79a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79a8:	460d      	mov	r5, r1
   b79aa:	4619      	mov	r1, r3
   b79ac:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b79b0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b79b4:	4681      	mov	r9, r0
   b79b6:	4617      	mov	r7, r2
   b79b8:	4698      	mov	r8, r3
   b79ba:	f000 f845 	bl	b7a48 <_ZNKSt9type_infoeqERKS_>
   b79be:	b190      	cbz	r0, b79e6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b79c0:	2d00      	cmp	r5, #0
   b79c2:	6034      	str	r4, [r6, #0]
   b79c4:	7137      	strb	r7, [r6, #4]
   b79c6:	db09      	blt.n	b79dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b79c8:	1961      	adds	r1, r4, r5
   b79ca:	458a      	cmp	sl, r1
   b79cc:	bf0c      	ite	eq
   b79ce:	2106      	moveq	r1, #6
   b79d0:	2101      	movne	r1, #1
   b79d2:	71b1      	strb	r1, [r6, #6]
   b79d4:	2000      	movs	r0, #0
   b79d6:	b001      	add	sp, #4
   b79d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b79dc:	3502      	adds	r5, #2
   b79de:	d1f9      	bne.n	b79d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b79e0:	2301      	movs	r3, #1
   b79e2:	71b3      	strb	r3, [r6, #6]
   b79e4:	e7f6      	b.n	b79d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b79e6:	4554      	cmp	r4, sl
   b79e8:	d106      	bne.n	b79f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b79ea:	4659      	mov	r1, fp
   b79ec:	4648      	mov	r0, r9
   b79ee:	f000 f82b 	bl	b7a48 <_ZNKSt9type_infoeqERKS_>
   b79f2:	b108      	cbz	r0, b79f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b79f4:	7177      	strb	r7, [r6, #5]
   b79f6:	e7ed      	b.n	b79d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b79f8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b79fc:	6803      	ldr	r3, [r0, #0]
   b79fe:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7a02:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7a06:	69dc      	ldr	r4, [r3, #28]
   b7a08:	463a      	mov	r2, r7
   b7a0a:	4643      	mov	r3, r8
   b7a0c:	4629      	mov	r1, r5
   b7a0e:	46a4      	mov	ip, r4
   b7a10:	b001      	add	sp, #4
   b7a12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a16:	4760      	bx	ip

000b7a18 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a1c:	4607      	mov	r7, r0
   b7a1e:	460c      	mov	r4, r1
   b7a20:	4615      	mov	r5, r2
   b7a22:	461e      	mov	r6, r3
   b7a24:	f7ff ff6d 	bl	b7902 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7a28:	b948      	cbnz	r0, b7a3e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7a2a:	68b8      	ldr	r0, [r7, #8]
   b7a2c:	6803      	ldr	r3, [r0, #0]
   b7a2e:	699f      	ldr	r7, [r3, #24]
   b7a30:	462a      	mov	r2, r5
   b7a32:	4633      	mov	r3, r6
   b7a34:	4621      	mov	r1, r4
   b7a36:	46bc      	mov	ip, r7
   b7a38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7a3c:	4760      	bx	ip
   b7a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7a42 <_ZNSt9type_infoD1Ev>:
   b7a42:	4770      	bx	lr

000b7a44 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7a44:	2000      	movs	r0, #0
   b7a46:	4770      	bx	lr

000b7a48 <_ZNKSt9type_infoeqERKS_>:
   b7a48:	4281      	cmp	r1, r0
   b7a4a:	b508      	push	{r3, lr}
   b7a4c:	d00e      	beq.n	b7a6c <_ZNKSt9type_infoeqERKS_+0x24>
   b7a4e:	6840      	ldr	r0, [r0, #4]
   b7a50:	7803      	ldrb	r3, [r0, #0]
   b7a52:	2b2a      	cmp	r3, #42	; 0x2a
   b7a54:	d00c      	beq.n	b7a70 <_ZNKSt9type_infoeqERKS_+0x28>
   b7a56:	6849      	ldr	r1, [r1, #4]
   b7a58:	780b      	ldrb	r3, [r1, #0]
   b7a5a:	2b2a      	cmp	r3, #42	; 0x2a
   b7a5c:	bf08      	it	eq
   b7a5e:	3101      	addeq	r1, #1
   b7a60:	f000 f87c 	bl	b7b5c <strcmp>
   b7a64:	fab0 f080 	clz	r0, r0
   b7a68:	0940      	lsrs	r0, r0, #5
   b7a6a:	bd08      	pop	{r3, pc}
   b7a6c:	2001      	movs	r0, #1
   b7a6e:	e7fc      	b.n	b7a6a <_ZNKSt9type_infoeqERKS_+0x22>
   b7a70:	2000      	movs	r0, #0
   b7a72:	e7fa      	b.n	b7a6a <_ZNKSt9type_infoeqERKS_+0x22>

000b7a74 <atexit>:
   b7a74:	2300      	movs	r3, #0
   b7a76:	4601      	mov	r1, r0
   b7a78:	461a      	mov	r2, r3
   b7a7a:	4618      	mov	r0, r3
   b7a7c:	f000 b894 	b.w	b7ba8 <__register_exitproc>

000b7a80 <memcmp>:
   b7a80:	b510      	push	{r4, lr}
   b7a82:	3901      	subs	r1, #1
   b7a84:	4402      	add	r2, r0
   b7a86:	4290      	cmp	r0, r2
   b7a88:	d101      	bne.n	b7a8e <memcmp+0xe>
   b7a8a:	2000      	movs	r0, #0
   b7a8c:	e005      	b.n	b7a9a <memcmp+0x1a>
   b7a8e:	7803      	ldrb	r3, [r0, #0]
   b7a90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7a94:	42a3      	cmp	r3, r4
   b7a96:	d001      	beq.n	b7a9c <memcmp+0x1c>
   b7a98:	1b18      	subs	r0, r3, r4
   b7a9a:	bd10      	pop	{r4, pc}
   b7a9c:	3001      	adds	r0, #1
   b7a9e:	e7f2      	b.n	b7a86 <memcmp+0x6>

000b7aa0 <memcpy>:
   b7aa0:	440a      	add	r2, r1
   b7aa2:	4291      	cmp	r1, r2
   b7aa4:	f100 33ff 	add.w	r3, r0, #4294967295
   b7aa8:	d100      	bne.n	b7aac <memcpy+0xc>
   b7aaa:	4770      	bx	lr
   b7aac:	b510      	push	{r4, lr}
   b7aae:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7ab6:	4291      	cmp	r1, r2
   b7ab8:	d1f9      	bne.n	b7aae <memcpy+0xe>
   b7aba:	bd10      	pop	{r4, pc}

000b7abc <memmove>:
   b7abc:	4288      	cmp	r0, r1
   b7abe:	b510      	push	{r4, lr}
   b7ac0:	eb01 0402 	add.w	r4, r1, r2
   b7ac4:	d902      	bls.n	b7acc <memmove+0x10>
   b7ac6:	4284      	cmp	r4, r0
   b7ac8:	4623      	mov	r3, r4
   b7aca:	d807      	bhi.n	b7adc <memmove+0x20>
   b7acc:	1e43      	subs	r3, r0, #1
   b7ace:	42a1      	cmp	r1, r4
   b7ad0:	d008      	beq.n	b7ae4 <memmove+0x28>
   b7ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7ada:	e7f8      	b.n	b7ace <memmove+0x12>
   b7adc:	4402      	add	r2, r0
   b7ade:	4601      	mov	r1, r0
   b7ae0:	428a      	cmp	r2, r1
   b7ae2:	d100      	bne.n	b7ae6 <memmove+0x2a>
   b7ae4:	bd10      	pop	{r4, pc}
   b7ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7aee:	e7f7      	b.n	b7ae0 <memmove+0x24>

000b7af0 <memset>:
   b7af0:	4402      	add	r2, r0
   b7af2:	4603      	mov	r3, r0
   b7af4:	4293      	cmp	r3, r2
   b7af6:	d100      	bne.n	b7afa <memset+0xa>
   b7af8:	4770      	bx	lr
   b7afa:	f803 1b01 	strb.w	r1, [r3], #1
   b7afe:	e7f9      	b.n	b7af4 <memset+0x4>

000b7b00 <srand>:
   b7b00:	b538      	push	{r3, r4, r5, lr}
   b7b02:	4b10      	ldr	r3, [pc, #64]	; (b7b44 <srand+0x44>)
   b7b04:	681d      	ldr	r5, [r3, #0]
   b7b06:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7b08:	4604      	mov	r4, r0
   b7b0a:	b9b3      	cbnz	r3, b7b3a <srand+0x3a>
   b7b0c:	2018      	movs	r0, #24
   b7b0e:	f7fc fe77 	bl	b4800 <malloc>
   b7b12:	4602      	mov	r2, r0
   b7b14:	63a8      	str	r0, [r5, #56]	; 0x38
   b7b16:	b920      	cbnz	r0, b7b22 <srand+0x22>
   b7b18:	4b0b      	ldr	r3, [pc, #44]	; (b7b48 <srand+0x48>)
   b7b1a:	480c      	ldr	r0, [pc, #48]	; (b7b4c <srand+0x4c>)
   b7b1c:	2142      	movs	r1, #66	; 0x42
   b7b1e:	f7fc fe97 	bl	b4850 <__assert_func>
   b7b22:	490b      	ldr	r1, [pc, #44]	; (b7b50 <srand+0x50>)
   b7b24:	4b0b      	ldr	r3, [pc, #44]	; (b7b54 <srand+0x54>)
   b7b26:	e9c0 1300 	strd	r1, r3, [r0]
   b7b2a:	4b0b      	ldr	r3, [pc, #44]	; (b7b58 <srand+0x58>)
   b7b2c:	6083      	str	r3, [r0, #8]
   b7b2e:	230b      	movs	r3, #11
   b7b30:	8183      	strh	r3, [r0, #12]
   b7b32:	2100      	movs	r1, #0
   b7b34:	2001      	movs	r0, #1
   b7b36:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7b3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7b3c:	2200      	movs	r2, #0
   b7b3e:	611c      	str	r4, [r3, #16]
   b7b40:	615a      	str	r2, [r3, #20]
   b7b42:	bd38      	pop	{r3, r4, r5, pc}
   b7b44:	2003e178 	.word	0x2003e178
   b7b48:	000b81e1 	.word	0x000b81e1
   b7b4c:	000b81f8 	.word	0x000b81f8
   b7b50:	abcd330e 	.word	0xabcd330e
   b7b54:	e66d1234 	.word	0xe66d1234
   b7b58:	0005deec 	.word	0x0005deec

000b7b5c <strcmp>:
   b7b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7b60:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7b64:	2a01      	cmp	r2, #1
   b7b66:	bf28      	it	cs
   b7b68:	429a      	cmpcs	r2, r3
   b7b6a:	d0f7      	beq.n	b7b5c <strcmp>
   b7b6c:	1ad0      	subs	r0, r2, r3
   b7b6e:	4770      	bx	lr

000b7b70 <strcpy>:
   b7b70:	4603      	mov	r3, r0
   b7b72:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7b76:	f803 2b01 	strb.w	r2, [r3], #1
   b7b7a:	2a00      	cmp	r2, #0
   b7b7c:	d1f9      	bne.n	b7b72 <strcpy+0x2>
   b7b7e:	4770      	bx	lr

000b7b80 <strlen>:
   b7b80:	4603      	mov	r3, r0
   b7b82:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7b86:	2a00      	cmp	r2, #0
   b7b88:	d1fb      	bne.n	b7b82 <strlen+0x2>
   b7b8a:	1a18      	subs	r0, r3, r0
   b7b8c:	3801      	subs	r0, #1
   b7b8e:	4770      	bx	lr

000b7b90 <strnlen>:
   b7b90:	b510      	push	{r4, lr}
   b7b92:	4602      	mov	r2, r0
   b7b94:	4401      	add	r1, r0
   b7b96:	428a      	cmp	r2, r1
   b7b98:	4613      	mov	r3, r2
   b7b9a:	d003      	beq.n	b7ba4 <strnlen+0x14>
   b7b9c:	781c      	ldrb	r4, [r3, #0]
   b7b9e:	3201      	adds	r2, #1
   b7ba0:	2c00      	cmp	r4, #0
   b7ba2:	d1f8      	bne.n	b7b96 <strnlen+0x6>
   b7ba4:	1a18      	subs	r0, r3, r0
   b7ba6:	bd10      	pop	{r4, pc}

000b7ba8 <__register_exitproc>:
   b7ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7bac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7c68 <__register_exitproc+0xc0>
   b7bb0:	4606      	mov	r6, r0
   b7bb2:	f8d8 0000 	ldr.w	r0, [r8]
   b7bb6:	461f      	mov	r7, r3
   b7bb8:	460d      	mov	r5, r1
   b7bba:	4691      	mov	r9, r2
   b7bbc:	f000 f856 	bl	b7c6c <__retarget_lock_acquire_recursive>
   b7bc0:	4b25      	ldr	r3, [pc, #148]	; (b7c58 <__register_exitproc+0xb0>)
   b7bc2:	681c      	ldr	r4, [r3, #0]
   b7bc4:	b934      	cbnz	r4, b7bd4 <__register_exitproc+0x2c>
   b7bc6:	4c25      	ldr	r4, [pc, #148]	; (b7c5c <__register_exitproc+0xb4>)
   b7bc8:	601c      	str	r4, [r3, #0]
   b7bca:	4b25      	ldr	r3, [pc, #148]	; (b7c60 <__register_exitproc+0xb8>)
   b7bcc:	b113      	cbz	r3, b7bd4 <__register_exitproc+0x2c>
   b7bce:	681b      	ldr	r3, [r3, #0]
   b7bd0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7bd4:	6863      	ldr	r3, [r4, #4]
   b7bd6:	2b1f      	cmp	r3, #31
   b7bd8:	dd07      	ble.n	b7bea <__register_exitproc+0x42>
   b7bda:	f8d8 0000 	ldr.w	r0, [r8]
   b7bde:	f000 f847 	bl	b7c70 <__retarget_lock_release_recursive>
   b7be2:	f04f 30ff 	mov.w	r0, #4294967295
   b7be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7bea:	b34e      	cbz	r6, b7c40 <__register_exitproc+0x98>
   b7bec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7bf0:	b988      	cbnz	r0, b7c16 <__register_exitproc+0x6e>
   b7bf2:	4b1c      	ldr	r3, [pc, #112]	; (b7c64 <__register_exitproc+0xbc>)
   b7bf4:	b923      	cbnz	r3, b7c00 <__register_exitproc+0x58>
   b7bf6:	f8d8 0000 	ldr.w	r0, [r8]
   b7bfa:	f000 f838 	bl	b7c6e <__retarget_lock_release>
   b7bfe:	e7f0      	b.n	b7be2 <__register_exitproc+0x3a>
   b7c00:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7c04:	f7fc fdfc 	bl	b4800 <malloc>
   b7c08:	2800      	cmp	r0, #0
   b7c0a:	d0f4      	beq.n	b7bf6 <__register_exitproc+0x4e>
   b7c0c:	2300      	movs	r3, #0
   b7c0e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7c12:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7c16:	6863      	ldr	r3, [r4, #4]
   b7c18:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7c1c:	2201      	movs	r2, #1
   b7c1e:	409a      	lsls	r2, r3
   b7c20:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7c24:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7c28:	4313      	orrs	r3, r2
   b7c2a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7c2e:	2e02      	cmp	r6, #2
   b7c30:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7c34:	bf02      	ittt	eq
   b7c36:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7c3a:	4313      	orreq	r3, r2
   b7c3c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7c40:	6863      	ldr	r3, [r4, #4]
   b7c42:	f8d8 0000 	ldr.w	r0, [r8]
   b7c46:	1c5a      	adds	r2, r3, #1
   b7c48:	3302      	adds	r3, #2
   b7c4a:	6062      	str	r2, [r4, #4]
   b7c4c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7c50:	f000 f80e 	bl	b7c70 <__retarget_lock_release_recursive>
   b7c54:	2000      	movs	r0, #0
   b7c56:	e7c6      	b.n	b7be6 <__register_exitproc+0x3e>
   b7c58:	2003e7e8 	.word	0x2003e7e8
   b7c5c:	2003e75c 	.word	0x2003e75c
   b7c60:	00000000 	.word	0x00000000
   b7c64:	000b4801 	.word	0x000b4801
   b7c68:	2003e1dc 	.word	0x2003e1dc

000b7c6c <__retarget_lock_acquire_recursive>:
   b7c6c:	4770      	bx	lr

000b7c6e <__retarget_lock_release>:
   b7c6e:	4770      	bx	lr

000b7c70 <__retarget_lock_release_recursive>:
   b7c70:	4770      	bx	lr

000b7c72 <link_code_end>:
	...

000b7c74 <dynalib_user>:
   b7c74:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7c84:	0000 0000 6425 0a20 6200 3234 3035 3034     ....%d ..b425040
   b7c94:	2d30 6266 6234 342d 3437 2d36 3262 3062     0-fb4b-4746-b2b0
   b7ca4:	392d 6633 6530 3136 3231 6332 0036 3462     -93f0e61122c6.b4
   b7cb4:	3532 3430 3130 662d 3462 2d62 3734 3634     250401-fb4b-4746
   b7cc4:	622d 6232 2d30 3339 3066 3665 3131 3232     -b2b0-93f0e61122
   b7cd4:	3663 6200 3234 3035 3034 2d34 6266 6234     c6.b4250404-fb4b
   b7ce4:	342d 3437 2d36 3262 3062 392d 6633 6530     -4746-b2b0-93f0e
   b7cf4:	3136 3231 6332 0036 3462 3532 3530 3030     61122c6.b4250500
   b7d04:	662d 3462 2d62 3734 3634 622d 6232 2d30     -fb4b-4746-b2b0-
   b7d14:	3339 3066 3665 3131 3232 3663 6200 3234     93f0e61122c6.b42
   b7d24:	3035 3035 2d31 6266 6234 342d 3437 2d36     50501-fb4b-4746-
   b7d34:	3262 3062 392d 6633 6530 3136 3231 6332     b2b0-93f0e61122c
   b7d44:	0036 3462 3532 3530 3430 662d 3462 2d62     6.b4250504-fb4b-
   b7d54:	3734 3634 622d 6232 2d30 3339 3066 3665     4746-b2b0-93f0e6
   b7d64:	3131 3232 3663 0000                         1122c6..

000b7d6c <_ZTVN5spark13EthernetClassE>:
	...
   b7d74:	48cf 000b 48c5 000b 48bb 000b 48b1 000b     .H...H...H...H..
   b7d84:	48a5 000b 4899 000b 76a1 000b 76a9 000b     .H...H...v...v..
   b7d94:	488d 000b 4885 000b 487b 000b 4871 000b     .H...H..{H..qH..
   b7da4:	76d9 000b 6977 6972 676e 622e 656c 5300     .v..wiring.ble.S
   b7db4:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   b7dc4:	7320 7265 6976 6563 2e73 5000 6565 2072      services..Peer 
   b7dd4:	6564 6976 6563 6920 2073 696d 7373 6e69     device is missin
   b7de4:	2167 4600 6961 656c 2064 6f74 6120 6c6c     g!.Failed to all
   b7df4:	636f 7461 2065 656d 6f6d 7972 0021 6146     ocate memory!.Fa
   b7e04:	6c69 6465 7420 206f 7061 6570 646e 7020     iled to append p
   b7e14:	6565 2072 6543 746e 6172 206c 6564 6976     eer Central devi
   b7e24:	6563 002e 6f43 6e6e 6365 6574 2064 7962     ce..Connected by
   b7e34:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   b7e44:	4400 7369 6f63 6e6e 6365 6574 2064 7962     .Disconnected by
   b7e54:	7220 6d65 746f 2065 6564 6976 6563 002e      remote device..
   b7e64:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   b7e74:	6420 7369 6f63 6576 6572 2064 6573 7672      discovered serv
   b7e84:	6369 2e65 5300 6174 7472 6420 7369 6f63     ice..Start disco
   b7e94:	6576 6972 676e 6320 6168 6172 7463 7265     vering character
   b7ea4:	7369 6974 7363 6f20 2066 6573 7672 6369     istics of servic
   b7eb4:	3a65 2520 2e73 4300 6e61 6f6e 2074 6461     e: %s..Cannot ad
   b7ec4:	2064 656e 2077 6570 7265 6420 7665 6369     d new peer devic
   b7ed4:	2e65 4e00 7765 7020 7265 7069 6568 6172     e..New periphera
   b7ee4:	206c 7369 6320 6e6f 656e 7463 6465 002e     l is connected..
   b7ef4:	6843 7261 6361 6574 6972 7473 6369 6420     Characteristic d
   b7f04:	7369 6f63 6576 6572 2e64 4400 7369 6f63     iscovered..Disco
   b7f14:	6576 6572 2064 6863 7261 6361 6574 6972     vered characteri
   b7f24:	7473 6369 7327 6820 6e61 6c64 2065 7369     stic's handle is
   b7f34:	6920 766e 6c61 6469 002e 6146 6c69 6465      invalid..Failed
   b7f44:	7420 206f 7061 6570 646e 6420 7369 6f63      to append disco
   b7f54:	6576 6572 2064 6863 7261 6361 6574 6972     vered characteri
   b7f64:	7473 6369 002e 0000                         stic....

000b7f6c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7f74:	4b09 000b 4b6d 000b 4cf1 000b 4b97 000b     .K..mK...L...K..
   b7f84:	4b0d 000b                                   .K..

000b7f88 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7f90:	4b05 000b 4b7b 000b 4b07 000b 4b9d 000b     .K..{K...K...K..
   b7fa0:	4b2d 000b                                   -K..

000b7fa4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7fac:	4b03 000b 4b89 000b 581d 000b 4ba3 000b     .K...K...X...K..
   b7fbc:	4b4d 000b                                   MK..

000b7fc0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b7fcc:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   b7fdc:	0000 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   b7fec:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   b7ffc:	0065 0000                                   e...

000b8000 <_ZTV9IPAddress>:
	...
   b8008:	7365 000b 7355 000b 7357 000b               es..Us..Ws..

000b8014 <_ZTV9USBSerial>:
	...
   b801c:	744b 000b 74b3 000b 7489 000b 708d 000b     Kt...t...t...p..
   b802c:	747b 000b 744d 000b 745d 000b 74ad 000b     {t..Mt..]t...t..
   b803c:	746d 000b 7445 000b                         mt..Et..

000b8044 <_ZTV11USARTSerial>:
	...
   b804c:	754d 000b 75b9 000b 7591 000b 708d 000b     Mu...u...u...p..
   b805c:	7561 000b 757d 000b 756f 000b 758b 000b     au..}u..ou...u..
   b806c:	754f 000b 7553 000b                         Ou..Su..

000b8074 <_ZTVN5spark9WiFiClassE>:
	...
   b807c:	7643 000b 7639 000b 762f 000b 75f1 000b     Cv..9v../v...u..
   b808c:	7199 000b 7623 000b 76a1 000b 76a9 000b     .q..#v...v...v..
   b809c:	7617 000b 760f 000b 7605 000b 75fb 000b     .v...v...v...u..
   b80ac:	76d9 000b                                   .v..

000b80b0 <_ZTVN5spark12NetworkClassE>:
	...
   b80b8:	7661 000b 766b 000b 7675 000b 767f 000b     av..kv..uv...v..
   b80c8:	7689 000b 7695 000b 76a1 000b 76a9 000b     .v...v...v...v..
   b80d8:	76b1 000b 76bd 000b 76c5 000b 76cf 000b     .v...v...v...v..
   b80e8:	76d9 000b                                   .v..

000b80ec <_ZSt7nothrow>:
	...

000b80ed <_ZTSSt19_Sp_make_shared_tag>:
   b80ed:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b80fd:	6572 5f64 6174 0067 0000                     red_tag....

000b8108 <_ZTISt19_Sp_make_shared_tag>:
   b8108:	8148 000b 80ed 000b                         H.......

000b8110 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8110:	81a8 000b 811c 000b 81cc 000b               ............

000b811c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b811c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b812c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b813c:	0045 0000                                   E...

000b8140 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8140:	0000 0000 8110 000b 789d 000b 78b1 000b     .........x...x..
   b8150:	7a45 000b 7a45 000b 791b 000b 785d 000b     Ez..Ez...y..]x..
   b8160:	7903 000b 78c5 000b 788f 000b               .y...x...x..

000b816c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b816c:	81a8 000b 8178 000b 8110 000b               ....x.......

000b8178 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8178:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b8188:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b8198:	666e 456f 0000 0000                         nfoE....

000b81a0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b81a0:	0000 0000 816c 000b 7945 000b 7959 000b     ....l...Ey..Yy..
   b81b0:	7a45 000b 7a45 000b 791b 000b 785d 000b     Ez..Ez...y..]x..
   b81c0:	7a19 000b 79a5 000b 796d 000b               .z...y..my..

000b81cc <_ZTISt9type_info>:
   b81cc:	8148 000b 81d4 000b                         H.......

000b81d4 <_ZTSSt9type_info>:
   b81d4:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b81e4:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b81f4:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b8204:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b8214:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b8224:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8234:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8244:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b8254:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8264:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b8275 <link_const_variable_data_end>:
   b8275:	00          	.byte	0x00
	...

000b8278 <link_constructors_location>:
   b8278:	000b430d 	.word	0x000b430d
   b827c:	000b48d9 	.word	0x000b48d9
   b8280:	000b48ed 	.word	0x000b48ed
   b8284:	000b707d 	.word	0x000b707d
   b8288:	000b71a5 	.word	0x000b71a5
   b828c:	000b71b5 	.word	0x000b71b5
   b8290:	000b7211 	.word	0x000b7211
   b8294:	000b764d 	.word	0x000b764d
   b8298:	000b77b1 	.word	0x000b77b1

000b829c <link_constructors_end>:
   b829c:	00000000 	.word	0x00000000


c:/Users/Mikyla/Documents/GitHub/ELEC4740-A1/assignment1/elec4740_a1_c3315274/target/3.2.0/argon/elec4740_a1_c3315274.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000035c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b75e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e614  000b75e4  0001e614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000016c  2003e684  2003e684  0002e684  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b7654  000b7654  00027654  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b767c  000b767c  0002767c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ff2f1  00000000  00000000  00027680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00010ae5  00000000  00000000  00126971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00030faf  00000000  00000000  00137456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000025e8  00000000  00000000  00168405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009180  00000000  00000000  0016a9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003596e  00000000  00000000  00173b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003580f  00000000  00000000  001a94db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001259d1  00000000  00000000  001decea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00006e3c  00000000  00000000  003046bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 f8bb 	bl	b71ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 f8c3 	bl	b71c8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e614 	.word	0x2003e614
   b404c:	000b75e4 	.word	0x000b75e4
   b4050:	2003e684 	.word	0x2003e684
   b4054:	2003e684 	.word	0x2003e684
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 fe33 	bl	b4ccc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b75bc 	.word	0x000b75bc
   b4080:	000b75e0 	.word	0x000b75e0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b821 	b.w	b40ca <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f839 	bl	b4100 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 bdd3 	b.w	b4c3c <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 bb91 	b.w	b47bc <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bb97 	b.w	b47cc <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ae:	b40e      	push	{r1, r2, r3}
   b40b0:	b503      	push	{r0, r1, lr}
   b40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40bc:	f000 fd48 	bl	b4b50 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c0:	b002      	add	sp, #8
   b40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c6:	b003      	add	sp, #12
   b40c8:	4770      	bx	lr

000b40ca <setup>:
float soundDba      = 0;    // Calculated sound value in dBa.

/************************************
 *          SETUP                   *
 ************************************/
void setup() {
   b40ca:	b508      	push	{r3, lr}
    Serial.begin(9600);
   b40cc:	f000 ff06 	bl	b4edc <_Z16_fetch_usbserialv>
   b40d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d4:	f000 fef6 	bl	b4ec4 <_ZN9USBSerial5beginEl>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b40d8:	f000 fb60 	bl	b479c <spark_cloud_flag_connect>
    Particle.connect();

    // Initialise the light sensor
    pinMode(lightPin, INPUT); 
   b40dc:	2100      	movs	r1, #0
   b40de:	2012      	movs	r0, #18
   b40e0:	f001 f8da 	bl	b5298 <pinMode>

    // Initialise the sound sensor
    pinMode(soundPin, INPUT); 
   b40e4:	2100      	movs	r1, #0
   b40e6:	2011      	movs	r0, #17
   b40e8:	f001 f8d6 	bl	b5298 <pinMode>

    // Initialise the movement sensor
    pinMode(echoPin, INPUT); 
   b40ec:	2100      	movs	r1, #0
   b40ee:	2001      	movs	r0, #1
   b40f0:	f001 f8d2 	bl	b5298 <pinMode>
    pinMode(trigPin, OUTPUT);

}
   b40f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pinMode(trigPin, OUTPUT);
   b40f8:	2101      	movs	r1, #1
   b40fa:	2000      	movs	r0, #0
   b40fc:	f001 b8cc 	b.w	b5298 <pinMode>

000b4100 <loop>:

/************************************
 *          LOOP                    *
 ************************************/
void loop() {
   b4100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    // ------------- LIGHT SENSOR -------------
    lightLux[1] = lightLux[0];
   b4104:	4db2      	ldr	r5, [pc, #712]	; (b43d0 <loop+0x2d0>)
   b4106:	682b      	ldr	r3, [r5, #0]
   b4108:	606b      	str	r3, [r5, #4]
   b410a:	2464      	movs	r4, #100	; 0x64
    unsigned int avgLightRead = 0;  // Summation of light reads.
   b410c:	2600      	movs	r6, #0

    for (int i = 0; i < NUM_LIGHT_READS; i++)
    {
        avgLightRead += analogRead(lightPin);
   b410e:	2012      	movs	r0, #18
   b4110:	f001 f8ec 	bl	b52ec <analogRead>
    for (int i = 0; i < NUM_LIGHT_READS; i++)
   b4114:	3c01      	subs	r4, #1
        avgLightRead += analogRead(lightPin);
   b4116:	4406      	add	r6, r0
    for (int i = 0; i < NUM_LIGHT_READS; i++)
   b4118:	d1f9      	bne.n	b410e <loop+0xe>
    }

    lightRead = avgLightRead/NUM_LIGHT_READS;   // Read the ADC value for the light resistor.
   b411a:	4bae      	ldr	r3, [pc, #696]	; (b43d4 <loop+0x2d4>)
   b411c:	2064      	movs	r0, #100	; 0x64
   b411e:	fbb6 f0f0 	udiv	r0, r6, r0
   b4122:	6018      	str	r0, [r3, #0]
    
    // Transfer function for the ADC reaidng to Vout
    lightVout = 3.3 * lightRead/4096;
   b4124:	f002 fc7a 	bl	b6a1c <__aeabi_ui2d>
   b4128:	a38f      	add	r3, pc, #572	; (adr r3, b4368 <loop+0x268>)
   b412a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b412e:	f002 fcef 	bl	b6b10 <__aeabi_dmul>
   b4132:	2200      	movs	r2, #0
   b4134:	4ba8      	ldr	r3, [pc, #672]	; (b43d8 <loop+0x2d8>)
   b4136:	f002 fceb 	bl	b6b10 <__aeabi_dmul>
   b413a:	f002 ffe1 	bl	b7100 <__aeabi_d2f>
   b413e:	4ba7      	ldr	r3, [pc, #668]	; (b43dc <loop+0x2dc>)
   b4140:	6018      	str	r0, [r3, #0]
    rPcc = (rTwo * 3.3) / (lightVout) - rTwo;
   b4142:	f002 fc8d 	bl	b6a60 <__aeabi_f2d>
   b4146:	4602      	mov	r2, r0
   b4148:	460b      	mov	r3, r1
   b414a:	a189      	add	r1, pc, #548	; (adr r1, b4370 <loop+0x270>)
   b414c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4150:	f002 fe08 	bl	b6d64 <__aeabi_ddiv>
   b4154:	2200      	movs	r2, #0
   b4156:	4ba2      	ldr	r3, [pc, #648]	; (b43e0 <loop+0x2e0>)
   b4158:	f002 fb22 	bl	b67a0 <__aeabi_dsub>
   b415c:	f002 ffb0 	bl	b70c0 <__aeabi_d2uiz>
   b4160:	4ba0      	ldr	r3, [pc, #640]	; (b43e4 <loop+0x2e4>)
   b4162:	6018      	str	r0, [r3, #0]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4164:	f002 fc5a 	bl	b6a1c <__aeabi_ui2d>
   b4168:	ed9f 1b83 	vldr	d1, [pc, #524]	; b4378 <loop+0x278>
   b416c:	ec41 0b10 	vmov	d0, r0, r1
   b4170:	f001 f952 	bl	b5418 <pow>

    // Calculate lux value with no offset applied.
    lightLux[0] = 5*pow(10,11) * pow(rPcc, -2.335);
   b4174:	a382      	add	r3, pc, #520	; (adr r3, b4380 <loop+0x280>)
   b4176:	e9d3 2300 	ldrd	r2, r3, [r3]
   b417a:	ec51 0b10 	vmov	r0, r1, d0
   b417e:	f002 fcc7 	bl	b6b10 <__aeabi_dmul>
   b4182:	f002 ff9d 	bl	b70c0 <__aeabi_d2uiz>

    // Determine offset based on hysteresis of the light sensor.
    if (lightLux[0] >= lightLux[1]) // Light level is increasing.
   b4186:	686a      	ldr	r2, [r5, #4]
    lightLux[0] = 5*pow(10,11) * pow(rPcc, -2.335);
   b4188:	6028      	str	r0, [r5, #0]
    if (lightLux[0] >= lightLux[1]) // Light level is increasing.
   b418a:	4290      	cmp	r0, r2
   b418c:	f0c0 80c5 	bcc.w	b431a <loop+0x21a>
    {
        if (lightLux[0] > 10) // Offset is only valid for lux values greater than 10.
   b4190:	280a      	cmp	r0, #10
   b4192:	d929      	bls.n	b41e8 <loop+0xe8>
   b4194:	f002 fc42 	bl	b6a1c <__aeabi_ui2d>
   b4198:	4602      	mov	r2, r0
   b419a:	460b      	mov	r3, r1
   b419c:	4606      	mov	r6, r0
   b419e:	460f      	mov	r7, r1
   b41a0:	f002 fcb6 	bl	b6b10 <__aeabi_dmul>
        {
            lightLux[0] -= (4*pow(10,-5) * pow(lightLux[0],2) + 0.077 * lightLux[0] - 153.97);
   b41a4:	a378      	add	r3, pc, #480	; (adr r3, b4388 <loop+0x288>)
   b41a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b41aa:	f002 fcb1 	bl	b6b10 <__aeabi_dmul>
   b41ae:	a378      	add	r3, pc, #480	; (adr r3, b4390 <loop+0x290>)
   b41b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b41b4:	4680      	mov	r8, r0
   b41b6:	4689      	mov	r9, r1
   b41b8:	4630      	mov	r0, r6
   b41ba:	4639      	mov	r1, r7
   b41bc:	f002 fca8 	bl	b6b10 <__aeabi_dmul>
   b41c0:	4602      	mov	r2, r0
   b41c2:	460b      	mov	r3, r1
   b41c4:	4640      	mov	r0, r8
   b41c6:	4649      	mov	r1, r9
   b41c8:	f002 faec 	bl	b67a4 <__adddf3>
   b41cc:	a372      	add	r3, pc, #456	; (adr r3, b4398 <loop+0x298>)
   b41ce:	e9d3 2300 	ldrd	r2, r3, [r3]

    else // Light level is decreasing.
    {
        if (lightLux[0] > 10) // Offset is only valid for lux values greater than 10.
        {
            lightLux[0] -= pow(10,-4) * pow(lightLux[0],2) + 0.0407 * lightLux[0] - 104.35;
   b41d2:	f002 fae5 	bl	b67a0 <__aeabi_dsub>
   b41d6:	4602      	mov	r2, r0
   b41d8:	460b      	mov	r3, r1
   b41da:	4630      	mov	r0, r6
   b41dc:	4639      	mov	r1, r7
   b41de:	f002 fadf 	bl	b67a0 <__aeabi_dsub>
   b41e2:	f002 ff6d 	bl	b70c0 <__aeabi_d2uiz>
   b41e6:	6028      	str	r0, [r5, #0]
        }
        
    }

    Serial.printf("Light [lux]: ");
   b41e8:	f000 fe78 	bl	b4edc <_Z16_fetch_usbserialv>
   b41ec:	497e      	ldr	r1, [pc, #504]	; (b43e8 <loop+0x2e8>)
   b41ee:	f7ff ff5e 	bl	b40ae <_ZN5Print6printfEPKcz>
    Serial.println(lightLux[0]);
   b41f2:	f000 fe73 	bl	b4edc <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41f6:	6829      	ldr	r1, [r5, #0]
   b41f8:	4606      	mov	r6, r0
   b41fa:	220a      	movs	r2, #10
   b41fc:	f000 fba7 	bl	b494e <_ZN5Print11printNumberEmh>
        n += println();
   b4200:	4630      	mov	r0, r6
   b4202:	f000 fb98 	bl	b4936 <_ZN5Print7printlnEv>
   b4206:	f44f 75fa 	mov.w	r5, #500	; 0x1f4

    // ------------- SOUND SENSOR -------------
    unsigned int tempSoundRead = 0;  // Summation of light reads.
    unsigned int maxAmpl = 0;
    unsigned int minAmpl = 4096;
   b420a:	f44f 5680 	mov.w	r6, #4096	; 0x1000

    for(int i = 0; i < NUM_SOUND_READS; i++)
    {
        tempSoundRead = analogRead(soundPin);
   b420e:	2011      	movs	r0, #17
   b4210:	f001 f86c 	bl	b52ec <analogRead>

        if (tempSoundRead > maxAmpl)
   b4214:	4284      	cmp	r4, r0
   b4216:	bf38      	it	cc
   b4218:	4604      	movcc	r4, r0
        {
            maxAmpl = tempSoundRead;
        }

        if (tempSoundRead < minAmpl)
   b421a:	4286      	cmp	r6, r0
   b421c:	bf28      	it	cs
   b421e:	4606      	movcs	r6, r0
    for(int i = 0; i < NUM_SOUND_READS; i++)
   b4220:	3d01      	subs	r5, #1
   b4222:	d1f4      	bne.n	b420e <loop+0x10e>
        {
            minAmpl = tempSoundRead;
        }
    }

    soundPkPk = maxAmpl - minAmpl;
   b4224:	4b71      	ldr	r3, [pc, #452]	; (b43ec <loop+0x2ec>)
   b4226:	1ba0      	subs	r0, r4, r6
   b4228:	6018      	str	r0, [r3, #0]
    //Serial.printf("2.1 ");
    //Serial.println(soundPkPk);

    soundVout = 3.3 * soundPkPk/4096;
   b422a:	f002 fc07 	bl	b6a3c <__aeabi_i2d>
   b422e:	a34e      	add	r3, pc, #312	; (adr r3, b4368 <loop+0x268>)
   b4230:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4234:	f002 fc6c 	bl	b6b10 <__aeabi_dmul>
   b4238:	2200      	movs	r2, #0
   b423a:	4b67      	ldr	r3, [pc, #412]	; (b43d8 <loop+0x2d8>)
    //Serial.printf("2.2 ");
    //Serial.println(soundVout);

    soundDba = 17.831 * log(soundVout) + 87.579;
   b423c:	4c6c      	ldr	r4, [pc, #432]	; (b43f0 <loop+0x2f0>)
    soundVout = 3.3 * soundPkPk/4096;
   b423e:	f002 fc67 	bl	b6b10 <__aeabi_dmul>
   b4242:	f002 ff5d 	bl	b7100 <__aeabi_d2f>
   b4246:	4b6b      	ldr	r3, [pc, #428]	; (b43f4 <loop+0x2f4>)
   b4248:	ee00 0a10 	vmov	s0, r0
   b424c:	6018      	str	r0, [r3, #0]
  { return __builtin_logf(__x); }
   b424e:	f001 f9b5 	bl	b55bc <logf>
   b4252:	ee10 0a10 	vmov	r0, s0
    soundDba = 17.831 * log(soundVout) + 87.579;
   b4256:	f002 fc03 	bl	b6a60 <__aeabi_f2d>
   b425a:	a351      	add	r3, pc, #324	; (adr r3, b43a0 <loop+0x2a0>)
   b425c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4260:	f002 fc56 	bl	b6b10 <__aeabi_dmul>
   b4264:	a350      	add	r3, pc, #320	; (adr r3, b43a8 <loop+0x2a8>)
   b4266:	e9d3 2300 	ldrd	r2, r3, [r3]
   b426a:	f002 fa9b 	bl	b67a4 <__adddf3>
   b426e:	f002 ff47 	bl	b7100 <__aeabi_d2f>
   b4272:	6020      	str	r0, [r4, #0]
    //Serial.printf("2.3 ");
    //Serial.println(soundDba);

    Serial.printf("------------------ Sound [dBa]: ");
   b4274:	f000 fe32 	bl	b4edc <_Z16_fetch_usbserialv>
   b4278:	495f      	ldr	r1, [pc, #380]	; (b43f8 <loop+0x2f8>)
   b427a:	f7ff ff18 	bl	b40ae <_ZN5Print6printfEPKcz>
    Serial.println(soundDba);
   b427e:	f000 fe2d 	bl	b4edc <_Z16_fetch_usbserialv>
   b4282:	ed94 0a00 	vldr	s0, [r4]
   b4286:	4c5d      	ldr	r4, [pc, #372]	; (b43fc <loop+0x2fc>)
   b4288:	2102      	movs	r1, #2
   b428a:	f000 fc52 	bl	b4b32 <_ZN5Print7printlnEfi>


    // ------------- MOVEMENT SENSOR -------------

    // Clears the trigPin
    digitalWrite(trigPin, LOW);
   b428e:	4629      	mov	r1, r5
   b4290:	4628      	mov	r0, r5
   b4292:	f001 f812 	bl	b52ba <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4296:	2002      	movs	r0, #2
   b4298:	f000 f914 	bl	b44c4 <HAL_Delay_Microseconds>
    delayMicroseconds(2);
    // Sets the trigPin on HIGH state for 10 micro seconds
    digitalWrite(trigPin, HIGH);
   b429c:	2101      	movs	r1, #1
   b429e:	4628      	mov	r0, r5
   b42a0:	f001 f80b 	bl	b52ba <digitalWrite>
   b42a4:	200a      	movs	r0, #10
   b42a6:	f000 f90d 	bl	b44c4 <HAL_Delay_Microseconds>
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
   b42aa:	4629      	mov	r1, r5
   b42ac:	4628      	mov	r0, r5
   b42ae:	f001 f804 	bl	b52ba <digitalWrite>
    // Reads the echoPin, returns the sound wave travel time in microseconds
    duration = pulseIn(echoPin, HIGH);
   b42b2:	2101      	movs	r1, #1
   b42b4:	4608      	mov	r0, r1
   b42b6:	f001 f830 	bl	b531a <pulseIn>
   b42ba:	4b51      	ldr	r3, [pc, #324]	; (b4400 <loop+0x300>)
   b42bc:	6018      	str	r0, [r3, #0]
    // Calculating the distance
    distance = duration * 0.034 / 2;
   b42be:	f002 fbbd 	bl	b6a3c <__aeabi_i2d>
   b42c2:	a33b      	add	r3, pc, #236	; (adr r3, b43b0 <loop+0x2b0>)
   b42c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b42c8:	f002 fc22 	bl	b6b10 <__aeabi_dmul>
   b42cc:	4b4d      	ldr	r3, [pc, #308]	; (b4404 <loop+0x304>)
   b42ce:	2200      	movs	r2, #0
   b42d0:	f002 fc1e 	bl	b6b10 <__aeabi_dmul>
   b42d4:	f002 fecc 	bl	b7070 <__aeabi_d2iz>
   b42d8:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   b42dc:	bfd8      	it	le
   b42de:	4605      	movle	r5, r0
   b42e0:	6025      	str	r5, [r4, #0]
    {
        distance = 0;
    }

    // Prints the distance on the Serial Monitor
    Serial.printf("------------------ ------------------ Distance [cm]: ");
   b42e2:	f000 fdfb 	bl	b4edc <_Z16_fetch_usbserialv>
   b42e6:	4948      	ldr	r1, [pc, #288]	; (b4408 <loop+0x308>)
   b42e8:	f7ff fee1 	bl	b40ae <_ZN5Print6printfEPKcz>
    Serial.println(distance);
   b42ec:	f000 fdf6 	bl	b4edc <_Z16_fetch_usbserialv>
   b42f0:	6824      	ldr	r4, [r4, #0]
        if (n < 0 && base == 10) {
   b42f2:	2c00      	cmp	r4, #0
   b42f4:	4605      	mov	r5, r0
   b42f6:	da33      	bge.n	b4360 <loop+0x260>
            t = print('-');
   b42f8:	212d      	movs	r1, #45	; 0x2d
   b42fa:	f000 fb19 	bl	b4930 <_ZN5Print5printEc>
            val = -n;
   b42fe:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4300:	220a      	movs	r2, #10
   b4302:	4628      	mov	r0, r5
   b4304:	f000 fb23 	bl	b494e <_ZN5Print11printNumberEmh>
        n += println();
   b4308:	4628      	mov	r0, r5
   b430a:	f000 fb14 	bl	b4936 <_ZN5Print7printlnEv>
    
    delay(500);
   b430e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    delay(500);
   b4312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4316:	f000 bc65 	b.w	b4be4 <delay>
        if (lightLux[0] > 10) // Offset is only valid for lux values greater than 10.
   b431a:	280a      	cmp	r0, #10
   b431c:	f67f af64 	bls.w	b41e8 <loop+0xe8>
      return pow(__type(__x), __type(__y));
   b4320:	f002 fb7c 	bl	b6a1c <__aeabi_ui2d>
   b4324:	4602      	mov	r2, r0
   b4326:	460b      	mov	r3, r1
   b4328:	4606      	mov	r6, r0
   b432a:	460f      	mov	r7, r1
   b432c:	f002 fbf0 	bl	b6b10 <__aeabi_dmul>
            lightLux[0] -= pow(10,-4) * pow(lightLux[0],2) + 0.0407 * lightLux[0] - 104.35;
   b4330:	a321      	add	r3, pc, #132	; (adr r3, b43b8 <loop+0x2b8>)
   b4332:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4336:	f002 fbeb 	bl	b6b10 <__aeabi_dmul>
   b433a:	a321      	add	r3, pc, #132	; (adr r3, b43c0 <loop+0x2c0>)
   b433c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4340:	4680      	mov	r8, r0
   b4342:	4689      	mov	r9, r1
   b4344:	4630      	mov	r0, r6
   b4346:	4639      	mov	r1, r7
   b4348:	f002 fbe2 	bl	b6b10 <__aeabi_dmul>
   b434c:	4602      	mov	r2, r0
   b434e:	460b      	mov	r3, r1
   b4350:	4640      	mov	r0, r8
   b4352:	4649      	mov	r1, r9
   b4354:	f002 fa26 	bl	b67a4 <__adddf3>
   b4358:	a31b      	add	r3, pc, #108	; (adr r3, b43c8 <loop+0x2c8>)
   b435a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b435e:	e738      	b.n	b41d2 <loop+0xd2>
            val = n;
   b4360:	4621      	mov	r1, r4
   b4362:	e7cd      	b.n	b4300 <loop+0x200>
   b4364:	f3af 8000 	nop.w
   b4368:	66666666 	.word	0x66666666
   b436c:	400a6666 	.word	0x400a6666
   b4370:	00000000 	.word	0x00000000
   b4374:	40a9c800 	.word	0x40a9c800
   b4378:	7ae147ae 	.word	0x7ae147ae
   b437c:	c002ae14 	.word	0xc002ae14
   b4380:	a2000000 	.word	0xa2000000
   b4384:	425d1a94 	.word	0x425d1a94
   b4388:	88e368f1 	.word	0x88e368f1
   b438c:	3f04f8b5 	.word	0x3f04f8b5
   b4390:	a1cac083 	.word	0xa1cac083
   b4394:	3fb3b645 	.word	0x3fb3b645
   b4398:	3d70a3d7 	.word	0x3d70a3d7
   b439c:	40633f0a 	.word	0x40633f0a
   b43a0:	6a7ef9db 	.word	0x6a7ef9db
   b43a4:	4031d4bc 	.word	0x4031d4bc
   b43a8:	56041893 	.word	0x56041893
   b43ac:	4055e50e 	.word	0x4055e50e
   b43b0:	b020c49c 	.word	0xb020c49c
   b43b4:	3fa16872 	.word	0x3fa16872
   b43b8:	eb1c432d 	.word	0xeb1c432d
   b43bc:	3f1a36e2 	.word	0x3f1a36e2
   b43c0:	61e4f766 	.word	0x61e4f766
   b43c4:	3fa4d6a1 	.word	0x3fa4d6a1
   b43c8:	66666666 	.word	0x66666666
   b43cc:	405a1666 	.word	0x405a1666
   b43d0:	2003e698 	.word	0x2003e698
   b43d4:	2003e6a0 	.word	0x2003e6a0
   b43d8:	3f300000 	.word	0x3f300000
   b43dc:	2003e6a4 	.word	0x2003e6a4
   b43e0:	408f4000 	.word	0x408f4000
   b43e4:	2003e6a8 	.word	0x2003e6a8
   b43e8:	000b7324 	.word	0x000b7324
   b43ec:	2003e6b0 	.word	0x2003e6b0
   b43f0:	2003e6ac 	.word	0x2003e6ac
   b43f4:	2003e6b4 	.word	0x2003e6b4
   b43f8:	000b7332 	.word	0x000b7332
   b43fc:	2003e690 	.word	0x2003e690
   b4400:	2003e694 	.word	0x2003e694
   b4404:	3fe00000 	.word	0x3fe00000
   b4408:	000b7353 	.word	0x000b7353

000b440c <_GLOBAL__sub_I_SystemMode>:
   b440c:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   b440e:	2001      	movs	r0, #1
   b4410:	2100      	movs	r1, #0
   b4412:	f000 f947 	bl	b46a4 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4416:	4b06      	ldr	r3, [pc, #24]	; (b4430 <_GLOBAL__sub_I_SystemMode+0x24>)
   b4418:	2200      	movs	r2, #0
   b441a:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b441e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4422:	609a      	str	r2, [r3, #8]
   b4424:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4428:	2003      	movs	r0, #3
   b442a:	f000 b92b 	b.w	b4684 <set_system_mode>
   b442e:	bf00      	nop
   b4430:	2003e684 	.word	0x2003e684

000b4434 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4434:	b508      	push	{r3, lr}
   b4436:	4b02      	ldr	r3, [pc, #8]	; (b4440 <netdb_freeaddrinfo+0xc>)
   b4438:	681b      	ldr	r3, [r3, #0]
   b443a:	689b      	ldr	r3, [r3, #8]
   b443c:	9301      	str	r3, [sp, #4]
   b443e:	bd08      	pop	{r3, pc}
   b4440:	00030268 	.word	0x00030268

000b4444 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4444:	b508      	push	{r3, lr}
   b4446:	4b02      	ldr	r3, [pc, #8]	; (b4450 <netdb_getaddrinfo+0xc>)
   b4448:	681b      	ldr	r3, [r3, #0]
   b444a:	68db      	ldr	r3, [r3, #12]
   b444c:	9301      	str	r3, [sp, #4]
   b444e:	bd08      	pop	{r3, pc}
   b4450:	00030268 	.word	0x00030268

000b4454 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4454:	b508      	push	{r3, lr}
   b4456:	4b02      	ldr	r3, [pc, #8]	; (b4460 <HAL_Validate_Pin_Function+0xc>)
   b4458:	681b      	ldr	r3, [r3, #0]
   b445a:	685b      	ldr	r3, [r3, #4]
   b445c:	9301      	str	r3, [sp, #4]
   b445e:	bd08      	pop	{r3, pc}
   b4460:	0003022c 	.word	0x0003022c

000b4464 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4464:	b508      	push	{r3, lr}
   b4466:	4b02      	ldr	r3, [pc, #8]	; (b4470 <HAL_Pin_Mode+0xc>)
   b4468:	681b      	ldr	r3, [r3, #0]
   b446a:	689b      	ldr	r3, [r3, #8]
   b446c:	9301      	str	r3, [sp, #4]
   b446e:	bd08      	pop	{r3, pc}
   b4470:	0003022c 	.word	0x0003022c

000b4474 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4474:	b508      	push	{r3, lr}
   b4476:	4b02      	ldr	r3, [pc, #8]	; (b4480 <HAL_Get_Pin_Mode+0xc>)
   b4478:	681b      	ldr	r3, [r3, #0]
   b447a:	68db      	ldr	r3, [r3, #12]
   b447c:	9301      	str	r3, [sp, #4]
   b447e:	bd08      	pop	{r3, pc}
   b4480:	0003022c 	.word	0x0003022c

000b4484 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4484:	b508      	push	{r3, lr}
   b4486:	4b02      	ldr	r3, [pc, #8]	; (b4490 <HAL_GPIO_Write+0xc>)
   b4488:	681b      	ldr	r3, [r3, #0]
   b448a:	691b      	ldr	r3, [r3, #16]
   b448c:	9301      	str	r3, [sp, #4]
   b448e:	bd08      	pop	{r3, pc}
   b4490:	0003022c 	.word	0x0003022c

000b4494 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4494:	b508      	push	{r3, lr}
   b4496:	4b02      	ldr	r3, [pc, #8]	; (b44a0 <hal_adc_read+0xc>)
   b4498:	681b      	ldr	r3, [r3, #0]
   b449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b449c:	9301      	str	r3, [sp, #4]
   b449e:	bd08      	pop	{r3, pc}
   b44a0:	0003022c 	.word	0x0003022c

000b44a4 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b44a4:	b508      	push	{r3, lr}
   b44a6:	4b02      	ldr	r3, [pc, #8]	; (b44b0 <HAL_Pulse_In+0xc>)
   b44a8:	681b      	ldr	r3, [r3, #0]
   b44aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b44ac:	9301      	str	r3, [sp, #4]
   b44ae:	bd08      	pop	{r3, pc}
   b44b0:	0003022c 	.word	0x0003022c

000b44b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b44b4:	b508      	push	{r3, lr}
   b44b6:	4b02      	ldr	r3, [pc, #8]	; (b44c0 <HAL_RNG_GetRandomNumber+0xc>)
   b44b8:	681b      	ldr	r3, [r3, #0]
   b44ba:	685b      	ldr	r3, [r3, #4]
   b44bc:	9301      	str	r3, [sp, #4]
   b44be:	bd08      	pop	{r3, pc}
   b44c0:	00030218 	.word	0x00030218

000b44c4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b44c4:	b508      	push	{r3, lr}
   b44c6:	4b02      	ldr	r3, [pc, #8]	; (b44d0 <HAL_Delay_Microseconds+0xc>)
   b44c8:	681b      	ldr	r3, [r3, #0]
   b44ca:	68db      	ldr	r3, [r3, #12]
   b44cc:	9301      	str	r3, [sp, #4]
   b44ce:	bd08      	pop	{r3, pc}
   b44d0:	00030218 	.word	0x00030218

000b44d4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b44d4:	b508      	push	{r3, lr}
   b44d6:	4b02      	ldr	r3, [pc, #8]	; (b44e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b44d8:	681b      	ldr	r3, [r3, #0]
   b44da:	695b      	ldr	r3, [r3, #20]
   b44dc:	9301      	str	r3, [sp, #4]
   b44de:	bd08      	pop	{r3, pc}
   b44e0:	00030218 	.word	0x00030218

000b44e4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b44e4:	b508      	push	{r3, lr}
   b44e6:	4b02      	ldr	r3, [pc, #8]	; (b44f0 <os_mutex_recursive_create+0xc>)
   b44e8:	681b      	ldr	r3, [r3, #0]
   b44ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b44ec:	9301      	str	r3, [sp, #4]
   b44ee:	bd08      	pop	{r3, pc}
   b44f0:	00030248 	.word	0x00030248

000b44f4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b44f4:	b508      	push	{r3, lr}
   b44f6:	4b02      	ldr	r3, [pc, #8]	; (b4500 <inet_inet_ntop+0xc>)
   b44f8:	681b      	ldr	r3, [r3, #0]
   b44fa:	695b      	ldr	r3, [r3, #20]
   b44fc:	9301      	str	r3, [sp, #4]
   b44fe:	bd08      	pop	{r3, pc}
   b4500:	00030264 	.word	0x00030264

000b4504 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4504:	b508      	push	{r3, lr}
   b4506:	4b02      	ldr	r3, [pc, #8]	; (b4510 <hal_usart_write+0xc>)
   b4508:	681b      	ldr	r3, [r3, #0]
   b450a:	68db      	ldr	r3, [r3, #12]
   b450c:	9301      	str	r3, [sp, #4]
   b450e:	bd08      	pop	{r3, pc}
   b4510:	0003023c 	.word	0x0003023c

000b4514 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4514:	b508      	push	{r3, lr}
   b4516:	4b02      	ldr	r3, [pc, #8]	; (b4520 <hal_usart_available+0xc>)
   b4518:	681b      	ldr	r3, [r3, #0]
   b451a:	691b      	ldr	r3, [r3, #16]
   b451c:	9301      	str	r3, [sp, #4]
   b451e:	bd08      	pop	{r3, pc}
   b4520:	0003023c 	.word	0x0003023c

000b4524 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4524:	b508      	push	{r3, lr}
   b4526:	4b02      	ldr	r3, [pc, #8]	; (b4530 <hal_usart_read+0xc>)
   b4528:	681b      	ldr	r3, [r3, #0]
   b452a:	695b      	ldr	r3, [r3, #20]
   b452c:	9301      	str	r3, [sp, #4]
   b452e:	bd08      	pop	{r3, pc}
   b4530:	0003023c 	.word	0x0003023c

000b4534 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b02      	ldr	r3, [pc, #8]	; (b4540 <hal_usart_peek+0xc>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	699b      	ldr	r3, [r3, #24]
   b453c:	9301      	str	r3, [sp, #4]
   b453e:	bd08      	pop	{r3, pc}
   b4540:	0003023c 	.word	0x0003023c

000b4544 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4544:	b508      	push	{r3, lr}
   b4546:	4b02      	ldr	r3, [pc, #8]	; (b4550 <hal_usart_flush+0xc>)
   b4548:	681b      	ldr	r3, [r3, #0]
   b454a:	69db      	ldr	r3, [r3, #28]
   b454c:	9301      	str	r3, [sp, #4]
   b454e:	bd08      	pop	{r3, pc}
   b4550:	0003023c 	.word	0x0003023c

000b4554 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b02      	ldr	r3, [pc, #8]	; (b4560 <hal_usart_is_enabled+0xc>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	6a1b      	ldr	r3, [r3, #32]
   b455c:	9301      	str	r3, [sp, #4]
   b455e:	bd08      	pop	{r3, pc}
   b4560:	0003023c 	.word	0x0003023c

000b4564 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4564:	b508      	push	{r3, lr}
   b4566:	4b02      	ldr	r3, [pc, #8]	; (b4570 <hal_usart_available_data_for_write+0xc>)
   b4568:	681b      	ldr	r3, [r3, #0]
   b456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b456c:	9301      	str	r3, [sp, #4]
   b456e:	bd08      	pop	{r3, pc}
   b4570:	0003023c 	.word	0x0003023c

000b4574 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4574:	b508      	push	{r3, lr}
   b4576:	4b02      	ldr	r3, [pc, #8]	; (b4580 <hal_usart_init_ex+0xc>)
   b4578:	681b      	ldr	r3, [r3, #0]
   b457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	bd08      	pop	{r3, pc}
   b4580:	0003023c 	.word	0x0003023c

000b4584 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <hal_i2c_write+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	6a1b      	ldr	r3, [r3, #32]
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	00030228 	.word	0x00030228

000b4594 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4594:	b508      	push	{r3, lr}
   b4596:	4b02      	ldr	r3, [pc, #8]	; (b45a0 <hal_i2c_available+0xc>)
   b4598:	681b      	ldr	r3, [r3, #0]
   b459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b459c:	9301      	str	r3, [sp, #4]
   b459e:	bd08      	pop	{r3, pc}
   b45a0:	00030228 	.word	0x00030228

000b45a4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b02      	ldr	r3, [pc, #8]	; (b45b0 <hal_i2c_read+0xc>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b45ac:	9301      	str	r3, [sp, #4]
   b45ae:	bd08      	pop	{r3, pc}
   b45b0:	00030228 	.word	0x00030228

000b45b4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b02      	ldr	r3, [pc, #8]	; (b45c0 <hal_i2c_peek+0xc>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b45bc:	9301      	str	r3, [sp, #4]
   b45be:	bd08      	pop	{r3, pc}
   b45c0:	00030228 	.word	0x00030228

000b45c4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b02      	ldr	r3, [pc, #8]	; (b45d0 <hal_i2c_flush+0xc>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	bd08      	pop	{r3, pc}
   b45d0:	00030228 	.word	0x00030228

000b45d4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b45d4:	b508      	push	{r3, lr}
   b45d6:	4b02      	ldr	r3, [pc, #8]	; (b45e0 <hal_i2c_is_enabled+0xc>)
   b45d8:	681b      	ldr	r3, [r3, #0]
   b45da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b45dc:	9301      	str	r3, [sp, #4]
   b45de:	bd08      	pop	{r3, pc}
   b45e0:	00030228 	.word	0x00030228

000b45e4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <hal_i2c_init+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	00030228 	.word	0x00030228

000b45f4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <hal_spi_init+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	69db      	ldr	r3, [r3, #28]
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	00030230 	.word	0x00030230

000b4604 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <hal_spi_is_enabled+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	6a1b      	ldr	r3, [r3, #32]
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	00030230 	.word	0x00030230

000b4614 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <HAL_USB_USART_Init+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	681b      	ldr	r3, [r3, #0]
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	0003024c 	.word	0x0003024c

000b4624 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <HAL_USB_USART_Begin+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	685b      	ldr	r3, [r3, #4]
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	0003024c 	.word	0x0003024c

000b4634 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <HAL_USB_USART_Available_Data+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	691b      	ldr	r3, [r3, #16]
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	0003024c 	.word	0x0003024c

000b4644 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	695b      	ldr	r3, [r3, #20]
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	0003024c 	.word	0x0003024c

000b4654 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <HAL_USB_USART_Receive_Data+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	699b      	ldr	r3, [r3, #24]
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	0003024c 	.word	0x0003024c

000b4664 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <HAL_USB_USART_Send_Data+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	69db      	ldr	r3, [r3, #28]
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	0003024c 	.word	0x0003024c

000b4674 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <HAL_USB_USART_Flush_Data+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	6a1b      	ldr	r3, [r3, #32]
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	0003024c 	.word	0x0003024c

000b4684 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <set_system_mode+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	685b      	ldr	r3, [r3, #4]
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	00030220 	.word	0x00030220

000b4694 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <system_delay_ms+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	695b      	ldr	r3, [r3, #20]
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	00030220 	.word	0x00030220

000b46a4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <system_thread_set_state+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	00030220 	.word	0x00030220

000b46b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b03      	ldr	r3, [pc, #12]	; (b46c4 <system_ctrl_set_app_request_handler+0x10>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b46be:	9301      	str	r3, [sp, #4]
   b46c0:	bd08      	pop	{r3, pc}
   b46c2:	0000      	.short	0x0000
   b46c4:	00030220 	.word	0x00030220

000b46c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b46c8:	b508      	push	{r3, lr}
   b46ca:	4b03      	ldr	r3, [pc, #12]	; (b46d8 <system_ctrl_set_result+0x10>)
   b46cc:	681b      	ldr	r3, [r3, #0]
   b46ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b46d2:	9301      	str	r3, [sp, #4]
   b46d4:	bd08      	pop	{r3, pc}
   b46d6:	0000      	.short	0x0000
   b46d8:	00030220 	.word	0x00030220

000b46dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b46dc:	b508      	push	{r3, lr}
   b46de:	4b02      	ldr	r3, [pc, #8]	; (b46e8 <network_connect+0xc>)
   b46e0:	681b      	ldr	r3, [r3, #0]
   b46e2:	685b      	ldr	r3, [r3, #4]
   b46e4:	9301      	str	r3, [sp, #4]
   b46e6:	bd08      	pop	{r3, pc}
   b46e8:	00030240 	.word	0x00030240

000b46ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b46ec:	b508      	push	{r3, lr}
   b46ee:	4b02      	ldr	r3, [pc, #8]	; (b46f8 <network_connecting+0xc>)
   b46f0:	681b      	ldr	r3, [r3, #0]
   b46f2:	689b      	ldr	r3, [r3, #8]
   b46f4:	9301      	str	r3, [sp, #4]
   b46f6:	bd08      	pop	{r3, pc}
   b46f8:	00030240 	.word	0x00030240

000b46fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b46fc:	b508      	push	{r3, lr}
   b46fe:	4b02      	ldr	r3, [pc, #8]	; (b4708 <network_disconnect+0xc>)
   b4700:	681b      	ldr	r3, [r3, #0]
   b4702:	68db      	ldr	r3, [r3, #12]
   b4704:	9301      	str	r3, [sp, #4]
   b4706:	bd08      	pop	{r3, pc}
   b4708:	00030240 	.word	0x00030240

000b470c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b470c:	b508      	push	{r3, lr}
   b470e:	4b02      	ldr	r3, [pc, #8]	; (b4718 <network_ready+0xc>)
   b4710:	681b      	ldr	r3, [r3, #0]
   b4712:	691b      	ldr	r3, [r3, #16]
   b4714:	9301      	str	r3, [sp, #4]
   b4716:	bd08      	pop	{r3, pc}
   b4718:	00030240 	.word	0x00030240

000b471c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b471c:	b508      	push	{r3, lr}
   b471e:	4b02      	ldr	r3, [pc, #8]	; (b4728 <network_on+0xc>)
   b4720:	681b      	ldr	r3, [r3, #0]
   b4722:	695b      	ldr	r3, [r3, #20]
   b4724:	9301      	str	r3, [sp, #4]
   b4726:	bd08      	pop	{r3, pc}
   b4728:	00030240 	.word	0x00030240

000b472c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b472c:	b508      	push	{r3, lr}
   b472e:	4b02      	ldr	r3, [pc, #8]	; (b4738 <network_off+0xc>)
   b4730:	681b      	ldr	r3, [r3, #0]
   b4732:	699b      	ldr	r3, [r3, #24]
   b4734:	9301      	str	r3, [sp, #4]
   b4736:	bd08      	pop	{r3, pc}
   b4738:	00030240 	.word	0x00030240

000b473c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b473c:	b508      	push	{r3, lr}
   b473e:	4b02      	ldr	r3, [pc, #8]	; (b4748 <network_listen+0xc>)
   b4740:	681b      	ldr	r3, [r3, #0]
   b4742:	69db      	ldr	r3, [r3, #28]
   b4744:	9301      	str	r3, [sp, #4]
   b4746:	bd08      	pop	{r3, pc}
   b4748:	00030240 	.word	0x00030240

000b474c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b474c:	b508      	push	{r3, lr}
   b474e:	4b02      	ldr	r3, [pc, #8]	; (b4758 <network_listening+0xc>)
   b4750:	681b      	ldr	r3, [r3, #0]
   b4752:	6a1b      	ldr	r3, [r3, #32]
   b4754:	9301      	str	r3, [sp, #4]
   b4756:	bd08      	pop	{r3, pc}
   b4758:	00030240 	.word	0x00030240

000b475c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b475c:	b508      	push	{r3, lr}
   b475e:	4b02      	ldr	r3, [pc, #8]	; (b4768 <network_set_listen_timeout+0xc>)
   b4760:	681b      	ldr	r3, [r3, #0]
   b4762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4764:	9301      	str	r3, [sp, #4]
   b4766:	bd08      	pop	{r3, pc}
   b4768:	00030240 	.word	0x00030240

000b476c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b476c:	b508      	push	{r3, lr}
   b476e:	4b02      	ldr	r3, [pc, #8]	; (b4778 <network_get_listen_timeout+0xc>)
   b4770:	681b      	ldr	r3, [r3, #0]
   b4772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4774:	9301      	str	r3, [sp, #4]
   b4776:	bd08      	pop	{r3, pc}
   b4778:	00030240 	.word	0x00030240

000b477c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b477c:	b508      	push	{r3, lr}
   b477e:	4b02      	ldr	r3, [pc, #8]	; (b4788 <network_is_on+0xc>)
   b4780:	681b      	ldr	r3, [r3, #0]
   b4782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4784:	9301      	str	r3, [sp, #4]
   b4786:	bd08      	pop	{r3, pc}
   b4788:	00030240 	.word	0x00030240

000b478c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b478c:	b508      	push	{r3, lr}
   b478e:	4b02      	ldr	r3, [pc, #8]	; (b4798 <network_is_off+0xc>)
   b4790:	681b      	ldr	r3, [r3, #0]
   b4792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4794:	9301      	str	r3, [sp, #4]
   b4796:	bd08      	pop	{r3, pc}
   b4798:	00030240 	.word	0x00030240

000b479c <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b479c:	b508      	push	{r3, lr}
   b479e:	4b02      	ldr	r3, [pc, #8]	; (b47a8 <spark_cloud_flag_connect+0xc>)
   b47a0:	681b      	ldr	r3, [r3, #0]
   b47a2:	68db      	ldr	r3, [r3, #12]
   b47a4:	9301      	str	r3, [sp, #4]
   b47a6:	bd08      	pop	{r3, pc}
   b47a8:	00030244 	.word	0x00030244

000b47ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b47ac:	b508      	push	{r3, lr}
   b47ae:	4b02      	ldr	r3, [pc, #8]	; (b47b8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b47b0:	681b      	ldr	r3, [r3, #0]
   b47b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b47b4:	9301      	str	r3, [sp, #4]
   b47b6:	bd08      	pop	{r3, pc}
   b47b8:	00030244 	.word	0x00030244

000b47bc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b47bc:	b508      	push	{r3, lr}
   b47be:	4b02      	ldr	r3, [pc, #8]	; (b47c8 <malloc+0xc>)
   b47c0:	681b      	ldr	r3, [r3, #0]
   b47c2:	681b      	ldr	r3, [r3, #0]
   b47c4:	9301      	str	r3, [sp, #4]
   b47c6:	bd08      	pop	{r3, pc}
   b47c8:	0003021c 	.word	0x0003021c

000b47cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b47cc:	b508      	push	{r3, lr}
   b47ce:	4b02      	ldr	r3, [pc, #8]	; (b47d8 <free+0xc>)
   b47d0:	681b      	ldr	r3, [r3, #0]
   b47d2:	685b      	ldr	r3, [r3, #4]
   b47d4:	9301      	str	r3, [sp, #4]
   b47d6:	bd08      	pop	{r3, pc}
   b47d8:	0003021c 	.word	0x0003021c

000b47dc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b47dc:	b508      	push	{r3, lr}
   b47de:	4b02      	ldr	r3, [pc, #8]	; (b47e8 <vsnprintf+0xc>)
   b47e0:	681b      	ldr	r3, [r3, #0]
   b47e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b47e4:	9301      	str	r3, [sp, #4]
   b47e6:	bd08      	pop	{r3, pc}
   b47e8:	0003021c 	.word	0x0003021c

000b47ec <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b47ec:	b508      	push	{r3, lr}
   b47ee:	4b02      	ldr	r3, [pc, #8]	; (b47f8 <__errno+0xc>)
   b47f0:	681b      	ldr	r3, [r3, #0]
   b47f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b47f4:	9301      	str	r3, [sp, #4]
   b47f6:	bd08      	pop	{r3, pc}
   b47f8:	0003021c 	.word	0x0003021c

000b47fc <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b47fc:	b508      	push	{r3, lr}
   b47fe:	4b02      	ldr	r3, [pc, #8]	; (b4808 <__assert_func+0xc>)
   b4800:	681b      	ldr	r3, [r3, #0]
   b4802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4804:	9301      	str	r3, [sp, #4]
   b4806:	bd08      	pop	{r3, pc}
   b4808:	0003021c 	.word	0x0003021c

000b480c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b480c:	b508      	push	{r3, lr}
   b480e:	4b02      	ldr	r3, [pc, #8]	; (b4818 <newlib_impure_ptr_callback+0xc>)
   b4810:	681b      	ldr	r3, [r3, #0]
   b4812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4814:	9301      	str	r3, [sp, #4]
   b4816:	bd08      	pop	{r3, pc}
   b4818:	0003021c 	.word	0x0003021c

000b481c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b481c:	2200      	movs	r2, #0
   b481e:	6840      	ldr	r0, [r0, #4]
   b4820:	4611      	mov	r1, r2
   b4822:	f7ff bf93 	b.w	b474c <network_listening>

000b4826 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4826:	2200      	movs	r2, #0
   b4828:	6840      	ldr	r0, [r0, #4]
   b482a:	4611      	mov	r1, r2
   b482c:	f7ff bf9e 	b.w	b476c <network_get_listen_timeout>

000b4830 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4830:	6840      	ldr	r0, [r0, #4]
   b4832:	2200      	movs	r2, #0
   b4834:	f7ff bf92 	b.w	b475c <network_set_listen_timeout>

000b4838 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4838:	6840      	ldr	r0, [r0, #4]
   b483a:	2200      	movs	r2, #0
   b483c:	f081 0101 	eor.w	r1, r1, #1
   b4840:	f7ff bf7c 	b.w	b473c <network_listen>

000b4844 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4844:	2300      	movs	r3, #0
   b4846:	6840      	ldr	r0, [r0, #4]
   b4848:	461a      	mov	r2, r3
   b484a:	4619      	mov	r1, r3
   b484c:	f7ff bf6e 	b.w	b472c <network_off>

000b4850 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4850:	2300      	movs	r3, #0
   b4852:	6840      	ldr	r0, [r0, #4]
   b4854:	461a      	mov	r2, r3
   b4856:	4619      	mov	r1, r3
   b4858:	f7ff bf60 	b.w	b471c <network_on>

000b485c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b485c:	2200      	movs	r2, #0
   b485e:	6840      	ldr	r0, [r0, #4]
   b4860:	4611      	mov	r1, r2
   b4862:	f7ff bf53 	b.w	b470c <network_ready>

000b4866 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4866:	2200      	movs	r2, #0
   b4868:	6840      	ldr	r0, [r0, #4]
   b486a:	4611      	mov	r1, r2
   b486c:	f7ff bf3e 	b.w	b46ec <network_connecting>

000b4870 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4870:	6840      	ldr	r0, [r0, #4]
   b4872:	2200      	movs	r2, #0
   b4874:	2102      	movs	r1, #2
   b4876:	f7ff bf41 	b.w	b46fc <network_disconnect>

000b487a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b487a:	2300      	movs	r3, #0
   b487c:	6840      	ldr	r0, [r0, #4]
   b487e:	461a      	mov	r2, r3
   b4880:	f7ff bf2c 	b.w	b46dc <network_connect>

000b4884 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4884:	4b02      	ldr	r3, [pc, #8]	; (b4890 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4886:	2203      	movs	r2, #3
   b4888:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b488a:	4a02      	ldr	r2, [pc, #8]	; (b4894 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b488c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b488e:	4770      	bx	lr
   b4890:	2003e6b8 	.word	0x2003e6b8
   b4894:	000b7394 	.word	0x000b7394

000b4898 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4898:	b510      	push	{r4, lr}
   b489a:	4604      	mov	r4, r0
   b489c:	4608      	mov	r0, r1
{
    _spi = spi;
   b489e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b48a0:	f7ff fea8 	bl	b45f4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b48a4:	2300      	movs	r3, #0
   b48a6:	6063      	str	r3, [r4, #4]
}
   b48a8:	4620      	mov	r0, r4
   b48aa:	bd10      	pop	{r4, pc}

000b48ac <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b48ac:	4b05      	ldr	r3, [pc, #20]	; (b48c4 <_GLOBAL__sub_I_System+0x18>)
   b48ae:	2202      	movs	r2, #2
   b48b0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b48b2:	4b05      	ldr	r3, [pc, #20]	; (b48c8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b48b4:	4a05      	ldr	r2, [pc, #20]	; (b48cc <_GLOBAL__sub_I_System+0x20>)
   b48b6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b48b8:	2000      	movs	r0, #0
   b48ba:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b48be:	f7ff bee1 	b.w	b4684 <set_system_mode>
   b48c2:	bf00      	nop
   b48c4:	2003e6cc 	.word	0x2003e6cc
   b48c8:	2003e6c0 	.word	0x2003e6c0
   b48cc:	ffff0000 	.word	0xffff0000

000b48d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b48d0:	4802      	ldr	r0, [pc, #8]	; (b48dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b48d2:	2300      	movs	r3, #0
   b48d4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b48d6:	f7ff be05 	b.w	b44e4 <os_mutex_recursive_create>
   b48da:	bf00      	nop
   b48dc:	2003e6d0 	.word	0x2003e6d0

000b48e0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b48e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b48e2:	4606      	mov	r6, r0
   b48e4:	460d      	mov	r5, r1
  size_t n = 0;
   b48e6:	188f      	adds	r7, r1, r2
   b48e8:	2400      	movs	r4, #0
  while (size--) {
   b48ea:	42bd      	cmp	r5, r7
   b48ec:	d00c      	beq.n	b4908 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b48ee:	6833      	ldr	r3, [r6, #0]
   b48f0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b48f4:	689b      	ldr	r3, [r3, #8]
   b48f6:	4630      	mov	r0, r6
   b48f8:	4798      	blx	r3
     if (chunk>=0)
   b48fa:	1e03      	subs	r3, r0, #0
   b48fc:	db01      	blt.n	b4902 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b48fe:	441c      	add	r4, r3
  while (size--) {
   b4900:	e7f3      	b.n	b48ea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4902:	2c00      	cmp	r4, #0
   b4904:	bf08      	it	eq
   b4906:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4908:	4620      	mov	r0, r4
   b490a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b490c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b490c:	b513      	push	{r0, r1, r4, lr}
   b490e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4910:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4912:	b159      	cbz	r1, b492c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4914:	9101      	str	r1, [sp, #4]
   b4916:	f002 fc8d 	bl	b7234 <strlen>
   b491a:	6823      	ldr	r3, [r4, #0]
   b491c:	9901      	ldr	r1, [sp, #4]
   b491e:	68db      	ldr	r3, [r3, #12]
   b4920:	4602      	mov	r2, r0
   b4922:	4620      	mov	r0, r4
    }
   b4924:	b002      	add	sp, #8
   b4926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b492a:	4718      	bx	r3
    }
   b492c:	b002      	add	sp, #8
   b492e:	bd10      	pop	{r4, pc}

000b4930 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4930:	6803      	ldr	r3, [r0, #0]
   b4932:	689b      	ldr	r3, [r3, #8]
   b4934:	4718      	bx	r3

000b4936 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4936:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4938:	210d      	movs	r1, #13
{
   b493a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b493c:	f7ff fff8 	bl	b4930 <_ZN5Print5printEc>
  n += print('\n');
   b4940:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4942:	4604      	mov	r4, r0
  n += print('\n');
   b4944:	4628      	mov	r0, r5
   b4946:	f7ff fff3 	bl	b4930 <_ZN5Print5printEc>
  return n;
}
   b494a:	4420      	add	r0, r4
   b494c:	bd38      	pop	{r3, r4, r5, pc}

000b494e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b494e:	b530      	push	{r4, r5, lr}
   b4950:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4952:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4954:	2a01      	cmp	r2, #1
  *str = '\0';
   b4956:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b495a:	bf98      	it	ls
   b495c:	220a      	movls	r2, #10
   b495e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4960:	460d      	mov	r5, r1
   b4962:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4966:	fb01 5312 	mls	r3, r1, r2, r5
   b496a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b496e:	2b09      	cmp	r3, #9
   b4970:	bf94      	ite	ls
   b4972:	3330      	addls	r3, #48	; 0x30
   b4974:	3337      	addhi	r3, #55	; 0x37
   b4976:	b2db      	uxtb	r3, r3
  } while(n);
   b4978:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b497a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b497e:	d9ef      	bls.n	b4960 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4980:	4621      	mov	r1, r4
   b4982:	f7ff ffc3 	bl	b490c <_ZN5Print5writeEPKc>
}
   b4986:	b00b      	add	sp, #44	; 0x2c
   b4988:	bd30      	pop	{r4, r5, pc}
	...

000b498c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b498c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4990:	ec55 4b10 	vmov	r4, r5, d0
   b4994:	4606      	mov	r6, r0
   b4996:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b4998:	ee10 2a10 	vmov	r2, s0
   b499c:	ee10 0a10 	vmov	r0, s0
   b49a0:	462b      	mov	r3, r5
   b49a2:	4629      	mov	r1, r5
   b49a4:	f002 fb4e 	bl	b7044 <__aeabi_dcmpun>
   b49a8:	b140      	cbz	r0, b49bc <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b49aa:	4953      	ldr	r1, [pc, #332]	; (b4af8 <_ZN5Print10printFloatEdh+0x16c>)
   b49ac:	4630      	mov	r0, r6
   b49ae:	f7ff ffad 	bl	b490c <_ZN5Print5writeEPKc>
   b49b2:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b49b4:	4650      	mov	r0, sl
   b49b6:	b003      	add	sp, #12
   b49b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b49bc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b49c0:	4b4e      	ldr	r3, [pc, #312]	; (b4afc <_ZN5Print10printFloatEdh+0x170>)
   b49c2:	f04f 32ff 	mov.w	r2, #4294967295
   b49c6:	4620      	mov	r0, r4
   b49c8:	4649      	mov	r1, r9
   b49ca:	f002 fb3b 	bl	b7044 <__aeabi_dcmpun>
   b49ce:	b948      	cbnz	r0, b49e4 <_ZN5Print10printFloatEdh+0x58>
   b49d0:	4b4a      	ldr	r3, [pc, #296]	; (b4afc <_ZN5Print10printFloatEdh+0x170>)
   b49d2:	f04f 32ff 	mov.w	r2, #4294967295
   b49d6:	4620      	mov	r0, r4
   b49d8:	4649      	mov	r1, r9
   b49da:	f002 fb15 	bl	b7008 <__aeabi_dcmple>
   b49de:	b908      	cbnz	r0, b49e4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b49e0:	4947      	ldr	r1, [pc, #284]	; (b4b00 <_ZN5Print10printFloatEdh+0x174>)
   b49e2:	e7e3      	b.n	b49ac <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b49e4:	4b47      	ldr	r3, [pc, #284]	; (b4b04 <_ZN5Print10printFloatEdh+0x178>)
   b49e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b49ea:	4620      	mov	r0, r4
   b49ec:	4629      	mov	r1, r5
   b49ee:	f002 fb1f 	bl	b7030 <__aeabi_dcmpgt>
   b49f2:	b108      	cbz	r0, b49f8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b49f4:	4944      	ldr	r1, [pc, #272]	; (b4b08 <_ZN5Print10printFloatEdh+0x17c>)
   b49f6:	e7d9      	b.n	b49ac <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b49f8:	4b44      	ldr	r3, [pc, #272]	; (b4b0c <_ZN5Print10printFloatEdh+0x180>)
   b49fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b49fe:	4620      	mov	r0, r4
   b4a00:	4629      	mov	r1, r5
   b4a02:	f002 faf7 	bl	b6ff4 <__aeabi_dcmplt>
   b4a06:	2800      	cmp	r0, #0
   b4a08:	d1f4      	bne.n	b49f4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b4a0a:	2200      	movs	r2, #0
   b4a0c:	2300      	movs	r3, #0
   b4a0e:	4620      	mov	r0, r4
   b4a10:	4629      	mov	r1, r5
   b4a12:	f002 faef 	bl	b6ff4 <__aeabi_dcmplt>
   b4a16:	b1d0      	cbz	r0, b4a4e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b4a18:	212d      	movs	r1, #45	; 0x2d
   b4a1a:	4630      	mov	r0, r6
   b4a1c:	f7ff ff88 	bl	b4930 <_ZN5Print5printEc>
     number = -number;
   b4a20:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b4a24:	4682      	mov	sl, r0
     number = -number;
   b4a26:	461d      	mov	r5, r3
  double rounding = 0.5;
   b4a28:	4939      	ldr	r1, [pc, #228]	; (b4b10 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b4a2a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b4b18 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b4a2e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b4a32:	2000      	movs	r0, #0
    rounding /= 10.0;
   b4a34:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b4a38:	fa5f f38b 	uxtb.w	r3, fp
   b4a3c:	429f      	cmp	r7, r3
   b4a3e:	d908      	bls.n	b4a52 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b4a40:	4642      	mov	r2, r8
   b4a42:	464b      	mov	r3, r9
   b4a44:	f002 f98e 	bl	b6d64 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b4a48:	f10b 0b01 	add.w	fp, fp, #1
   b4a4c:	e7f4      	b.n	b4a38 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b4a4e:	4682      	mov	sl, r0
   b4a50:	e7ea      	b.n	b4a28 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b4a52:	4622      	mov	r2, r4
   b4a54:	462b      	mov	r3, r5
   b4a56:	f001 fea5 	bl	b67a4 <__adddf3>
   b4a5a:	460d      	mov	r5, r1
   b4a5c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b4a5e:	f002 fb2f 	bl	b70c0 <__aeabi_d2uiz>
   b4a62:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b4a64:	f001 ffda 	bl	b6a1c <__aeabi_ui2d>
   b4a68:	4602      	mov	r2, r0
   b4a6a:	460b      	mov	r3, r1
   b4a6c:	4620      	mov	r0, r4
   b4a6e:	4629      	mov	r1, r5
   b4a70:	f001 fe96 	bl	b67a0 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4a74:	220a      	movs	r2, #10
   b4a76:	4604      	mov	r4, r0
   b4a78:	460d      	mov	r5, r1
   b4a7a:	4630      	mov	r0, r6
   b4a7c:	4641      	mov	r1, r8
   b4a7e:	f7ff ff66 	bl	b494e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b4a82:	4482      	add	sl, r0
  if (digits > 0) {
   b4a84:	2f00      	cmp	r7, #0
   b4a86:	d095      	beq.n	b49b4 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b4a88:	4922      	ldr	r1, [pc, #136]	; (b4b14 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b4a8a:	f8df 908c 	ldr.w	r9, [pc, #140]	; b4b18 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b4a8e:	4630      	mov	r0, r6
   b4a90:	f7ff ff3c 	bl	b490c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b4a94:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b4a98:	4482      	add	sl, r0
  while (digits-- > 0)
   b4a9a:	2f00      	cmp	r7, #0
   b4a9c:	d08a      	beq.n	b49b4 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b4a9e:	4642      	mov	r2, r8
   b4aa0:	464b      	mov	r3, r9
   b4aa2:	4620      	mov	r0, r4
   b4aa4:	4629      	mov	r1, r5
   b4aa6:	f002 f833 	bl	b6b10 <__aeabi_dmul>
   b4aaa:	4604      	mov	r4, r0
   b4aac:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b4aae:	f002 fadf 	bl	b7070 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b4ab2:	f1b0 0b00 	subs.w	fp, r0, #0
   b4ab6:	da1c      	bge.n	b4af2 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b4ab8:	212d      	movs	r1, #45	; 0x2d
   b4aba:	4630      	mov	r0, r6
   b4abc:	f7ff ff38 	bl	b4930 <_ZN5Print5printEc>
            val = -n;
   b4ac0:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b4ac4:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b4ac6:	220a      	movs	r2, #10
   b4ac8:	4630      	mov	r0, r6
   b4aca:	9301      	str	r3, [sp, #4]
   b4acc:	f7ff ff3f 	bl	b494e <_ZN5Print11printNumberEmh>
   b4ad0:	9b01      	ldr	r3, [sp, #4]
   b4ad2:	4418      	add	r0, r3
    n += print(toPrint);
   b4ad4:	4482      	add	sl, r0
    remainder -= toPrint;
   b4ad6:	4658      	mov	r0, fp
   b4ad8:	f001 ffb0 	bl	b6a3c <__aeabi_i2d>
   b4adc:	4602      	mov	r2, r0
   b4ade:	460b      	mov	r3, r1
   b4ae0:	4620      	mov	r0, r4
   b4ae2:	4629      	mov	r1, r5
   b4ae4:	f001 fe5c 	bl	b67a0 <__aeabi_dsub>
   b4ae8:	3f01      	subs	r7, #1
   b4aea:	4604      	mov	r4, r0
   b4aec:	460d      	mov	r5, r1
   b4aee:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b4af0:	e7d3      	b.n	b4a9a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b4af2:	4659      	mov	r1, fp
        size_t t = 0;
   b4af4:	2300      	movs	r3, #0
   b4af6:	e7e6      	b.n	b4ac6 <_ZN5Print10printFloatEdh+0x13a>
   b4af8:	000b73c8 	.word	0x000b73c8
   b4afc:	7fefffff 	.word	0x7fefffff
   b4b00:	000b73cc 	.word	0x000b73cc
   b4b04:	41efffff 	.word	0x41efffff
   b4b08:	000b73d0 	.word	0x000b73d0
   b4b0c:	c1efffff 	.word	0xc1efffff
   b4b10:	3fe00000 	.word	0x3fe00000
   b4b14:	000b73d4 	.word	0x000b73d4
   b4b18:	40240000 	.word	0x40240000

000b4b1c <_ZN5Print7printlnEdi>:
{
   b4b1c:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b4b1e:	b2c9      	uxtb	r1, r1
{
   b4b20:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b4b22:	f7ff ff33 	bl	b498c <_ZN5Print10printFloatEdh>
   b4b26:	4604      	mov	r4, r0
  n += println();
   b4b28:	4628      	mov	r0, r5
   b4b2a:	f7ff ff04 	bl	b4936 <_ZN5Print7printlnEv>
}
   b4b2e:	4420      	add	r0, r4
   b4b30:	bd38      	pop	{r3, r4, r5, pc}

000b4b32 <_ZN5Print7printlnEfi>:
{
   b4b32:	b538      	push	{r3, r4, r5, lr}
   b4b34:	4604      	mov	r4, r0
   b4b36:	ee10 0a10 	vmov	r0, s0
   b4b3a:	460d      	mov	r5, r1
    return println((double)num, digits);
   b4b3c:	f001 ff90 	bl	b6a60 <__aeabi_f2d>
   b4b40:	ec41 0b10 	vmov	d0, r0, r1
   b4b44:	4629      	mov	r1, r5
   b4b46:	4620      	mov	r0, r4
}
   b4b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b4b4c:	f7ff bfe6 	b.w	b4b1c <_ZN5Print7printlnEdi>

000b4b50 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4b54:	b086      	sub	sp, #24
   b4b56:	af00      	add	r7, sp, #0
   b4b58:	4605      	mov	r5, r0
   b4b5a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4b5c:	1d38      	adds	r0, r7, #4
   b4b5e:	2114      	movs	r1, #20
{
   b4b60:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4b62:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4b64:	f7ff fe3a 	bl	b47dc <vsnprintf>

    if (n<bufsize)
   b4b68:	2813      	cmp	r0, #19
   b4b6a:	d80e      	bhi.n	b4b8a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4b6c:	1d39      	adds	r1, r7, #4
   b4b6e:	4628      	mov	r0, r5
   b4b70:	f7ff fecc 	bl	b490c <_ZN5Print5writeEPKc>
   b4b74:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4b76:	b11e      	cbz	r6, b4b80 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4b78:	4628      	mov	r0, r5
   b4b7a:	f7ff fedc 	bl	b4936 <_ZN5Print7printlnEv>
   b4b7e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4b80:	4620      	mov	r0, r4
   b4b82:	3718      	adds	r7, #24
   b4b84:	46bd      	mov	sp, r7
   b4b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4b8a:	f100 0308 	add.w	r3, r0, #8
   b4b8e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4b92:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4b94:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4b98:	4622      	mov	r2, r4
   b4b9a:	1c41      	adds	r1, r0, #1
   b4b9c:	683b      	ldr	r3, [r7, #0]
   b4b9e:	4668      	mov	r0, sp
   b4ba0:	f7ff fe1c 	bl	b47dc <vsnprintf>
  return write(str);
   b4ba4:	4669      	mov	r1, sp
   b4ba6:	4628      	mov	r0, r5
   b4ba8:	f7ff feb0 	bl	b490c <_ZN5Print5writeEPKc>
   b4bac:	4604      	mov	r4, r0
   b4bae:	46c5      	mov	sp, r8
   b4bb0:	e7e1      	b.n	b4b76 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4bb2 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4bb2:	2300      	movs	r3, #0
   b4bb4:	6840      	ldr	r0, [r0, #4]
   b4bb6:	461a      	mov	r2, r3
   b4bb8:	4619      	mov	r1, r3
   b4bba:	f7ff bdaf 	b.w	b471c <network_on>
	...

000b4bc0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4bc0:	4b01      	ldr	r3, [pc, #4]	; (b4bc8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4bc2:	4a02      	ldr	r2, [pc, #8]	; (b4bcc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4bc4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4bc6:	4770      	bx	lr
   b4bc8:	2003e6d4 	.word	0x2003e6d4
   b4bcc:	000b73d6 	.word	0x000b73d6

000b4bd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4bd0:	4b02      	ldr	r3, [pc, #8]	; (b4bdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4bd2:	681a      	ldr	r2, [r3, #0]
   b4bd4:	4b02      	ldr	r3, [pc, #8]	; (b4be0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4bd6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4bd8:	4770      	bx	lr
   b4bda:	bf00      	nop
   b4bdc:	2003e614 	.word	0x2003e614
   b4be0:	2003e6d8 	.word	0x2003e6d8

000b4be4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4be4:	2100      	movs	r1, #0
   b4be6:	f7ff bd55 	b.w	b4694 <system_delay_ms>
	...

000b4bec <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4bec:	4b01      	ldr	r3, [pc, #4]	; (b4bf4 <_GLOBAL__sub_I_RGB+0x8>)
   b4bee:	2200      	movs	r2, #0
   b4bf0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4bf2:	4770      	bx	lr
   b4bf4:	2003e6dc 	.word	0x2003e6dc

000b4bf8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4bf8:	4b01      	ldr	r3, [pc, #4]	; (b4c00 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4bfa:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4bfc:	4770      	bx	lr
   b4bfe:	bf00      	nop
   b4c00:	2003e61c 	.word	0x2003e61c

000b4c04 <serialEventRun>:
{
   b4c04:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4c06:	4b0b      	ldr	r3, [pc, #44]	; (b4c34 <serialEventRun+0x30>)
   b4c08:	b143      	cbz	r3, b4c1c <serialEventRun+0x18>
   b4c0a:	f000 f967 	bl	b4edc <_Z16_fetch_usbserialv>
   b4c0e:	6803      	ldr	r3, [r0, #0]
   b4c10:	691b      	ldr	r3, [r3, #16]
   b4c12:	4798      	blx	r3
   b4c14:	2800      	cmp	r0, #0
   b4c16:	dd01      	ble.n	b4c1c <serialEventRun+0x18>
        serialEvent();
   b4c18:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4c1c:	4b06      	ldr	r3, [pc, #24]	; (b4c38 <serialEventRun+0x34>)
   b4c1e:	b143      	cbz	r3, b4c32 <serialEventRun+0x2e>
   b4c20:	f000 fb98 	bl	b5354 <_Z22__fetch_global_Serial1v>
   b4c24:	6803      	ldr	r3, [r0, #0]
   b4c26:	691b      	ldr	r3, [r3, #16]
   b4c28:	4798      	blx	r3
   b4c2a:	2800      	cmp	r0, #0
   b4c2c:	dd01      	ble.n	b4c32 <serialEventRun+0x2e>
        serialEvent1();
   b4c2e:	f3af 8000 	nop.w
}
   b4c32:	bd08      	pop	{r3, pc}
	...

000b4c3c <_post_loop>:
{
   b4c3c:	b508      	push	{r3, lr}
	serialEventRun();
   b4c3e:	f7ff ffe1 	bl	b4c04 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4c42:	f7ff fc47 	bl	b44d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4c46:	4b01      	ldr	r3, [pc, #4]	; (b4c4c <_post_loop+0x10>)
   b4c48:	6018      	str	r0, [r3, #0]
}
   b4c4a:	bd08      	pop	{r3, pc}
   b4c4c:	2003e740 	.word	0x2003e740

000b4c50 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4c50:	4805      	ldr	r0, [pc, #20]	; (b4c68 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4c52:	4a06      	ldr	r2, [pc, #24]	; (b4c6c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4c54:	4906      	ldr	r1, [pc, #24]	; (b4c70 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4c56:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4c58:	1a12      	subs	r2, r2, r0
   b4c5a:	f002 faa7 	bl	b71ac <memcpy>
    __backup_sram_signature = signature;
   b4c5e:	4b05      	ldr	r3, [pc, #20]	; (b4c74 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4c60:	4a05      	ldr	r2, [pc, #20]	; (b4c78 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4c62:	601a      	str	r2, [r3, #0]
}
   b4c64:	bd08      	pop	{r3, pc}
   b4c66:	bf00      	nop
   b4c68:	2003f400 	.word	0x2003f400
   b4c6c:	2003f404 	.word	0x2003f404
   b4c70:	000b75e0 	.word	0x000b75e0
   b4c74:	2003f400 	.word	0x2003f400
   b4c78:	9a271c1e 	.word	0x9a271c1e

000b4c7c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4c7c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4c7e:	2300      	movs	r3, #0
   b4c80:	9300      	str	r3, [sp, #0]
   b4c82:	461a      	mov	r2, r3
   b4c84:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4c88:	f7ff fd1e 	bl	b46c8 <system_ctrl_set_result>
}
   b4c8c:	b003      	add	sp, #12
   b4c8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4c94 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4c94:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4c96:	8843      	ldrh	r3, [r0, #2]
   b4c98:	2b0a      	cmp	r3, #10
   b4c9a:	d008      	beq.n	b4cae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4c9c:	2b50      	cmp	r3, #80	; 0x50
   b4c9e:	d10b      	bne.n	b4cb8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4ca0:	4b09      	ldr	r3, [pc, #36]	; (b4cc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4ca2:	681b      	ldr	r3, [r3, #0]
   b4ca4:	b14b      	cbz	r3, b4cba <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4ca6:	b003      	add	sp, #12
   b4ca8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4cac:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4cae:	f7ff ffe5 	bl	b4c7c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4cb2:	b003      	add	sp, #12
   b4cb4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4cb8:	2300      	movs	r3, #0
   b4cba:	9300      	str	r3, [sp, #0]
   b4cbc:	461a      	mov	r2, r3
   b4cbe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4cc2:	f7ff fd01 	bl	b46c8 <system_ctrl_set_result>
}
   b4cc6:	e7f4      	b.n	b4cb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4cc8:	2003e6f0 	.word	0x2003e6f0

000b4ccc <module_user_init_hook>:
{
   b4ccc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4cce:	4812      	ldr	r0, [pc, #72]	; (b4d18 <module_user_init_hook+0x4c>)
   b4cd0:	2100      	movs	r1, #0
   b4cd2:	f7ff fd9b 	bl	b480c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4cd6:	4b11      	ldr	r3, [pc, #68]	; (b4d1c <module_user_init_hook+0x50>)
   b4cd8:	681a      	ldr	r2, [r3, #0]
   b4cda:	4b11      	ldr	r3, [pc, #68]	; (b4d20 <module_user_init_hook+0x54>)
   b4cdc:	429a      	cmp	r2, r3
   b4cde:	4b11      	ldr	r3, [pc, #68]	; (b4d24 <module_user_init_hook+0x58>)
   b4ce0:	bf0c      	ite	eq
   b4ce2:	2201      	moveq	r2, #1
   b4ce4:	2200      	movne	r2, #0
   b4ce6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4ce8:	d001      	beq.n	b4cee <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4cea:	f7ff ffb1 	bl	b4c50 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4cee:	f7ff fbe1 	bl	b44b4 <HAL_RNG_GetRandomNumber>
   b4cf2:	4604      	mov	r4, r0
    srand(seed);
   b4cf4:	f002 fa70 	bl	b71d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4cf8:	4b0b      	ldr	r3, [pc, #44]	; (b4d28 <module_user_init_hook+0x5c>)
   b4cfa:	b113      	cbz	r3, b4d02 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4cfc:	4620      	mov	r0, r4
   b4cfe:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4d02:	2100      	movs	r1, #0
   b4d04:	4808      	ldr	r0, [pc, #32]	; (b4d28 <module_user_init_hook+0x5c>)
   b4d06:	f7ff fd51 	bl	b47ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4d0e:	4807      	ldr	r0, [pc, #28]	; (b4d2c <module_user_init_hook+0x60>)
   b4d10:	2100      	movs	r1, #0
   b4d12:	f7ff bccf 	b.w	b46b4 <system_ctrl_set_app_request_handler>
   b4d16:	bf00      	nop
   b4d18:	000b4bf9 	.word	0x000b4bf9
   b4d1c:	2003f400 	.word	0x2003f400
   b4d20:	9a271c1e 	.word	0x9a271c1e
   b4d24:	2003e6ec 	.word	0x2003e6ec
   b4d28:	00000000 	.word	0x00000000
   b4d2c:	000b4c95 	.word	0x000b4c95

000b4d30 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4d30:	4770      	bx	lr

000b4d32 <_ZN9IPAddressD0Ev>:
   b4d32:	b510      	push	{r4, lr}
   b4d34:	2118      	movs	r1, #24
   b4d36:	4604      	mov	r4, r0
   b4d38:	f7ff f9af 	bl	b409a <_ZdlPvj>
   b4d3c:	4620      	mov	r0, r4
   b4d3e:	bd10      	pop	{r4, pc}

000b4d40 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4d40:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4d42:	7d03      	ldrb	r3, [r0, #20]
   b4d44:	2b06      	cmp	r3, #6
{
   b4d46:	b08d      	sub	sp, #52	; 0x34
   b4d48:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4d4a:	f100 0704 	add.w	r7, r0, #4
   b4d4e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4d52:	d012      	beq.n	b4d7a <_ZNK9IPAddress7printToER5Print+0x3a>
   b4d54:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b4d58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4d5c:	220a      	movs	r2, #10
   b4d5e:	4630      	mov	r0, r6
   b4d60:	f7ff fdf5 	bl	b494e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4d64:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4d66:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4d68:	d019      	beq.n	b4d9e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4d6a:	2c00      	cmp	r4, #0
   b4d6c:	d0f4      	beq.n	b4d58 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4d6e:	212e      	movs	r1, #46	; 0x2e
   b4d70:	4630      	mov	r0, r6
   b4d72:	f7ff fddd 	bl	b4930 <_ZN5Print5printEc>
   b4d76:	4404      	add	r4, r0
   b4d78:	e7ee      	b.n	b4d58 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4d7a:	232f      	movs	r3, #47	; 0x2f
   b4d7c:	466a      	mov	r2, sp
   b4d7e:	4639      	mov	r1, r7
   b4d80:	200a      	movs	r0, #10
		buf[0] = 0;
   b4d82:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4d86:	f7ff fbb5 	bl	b44f4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4d8a:	4668      	mov	r0, sp
   b4d8c:	f002 fa52 	bl	b7234 <strlen>
   b4d90:	6833      	ldr	r3, [r6, #0]
   b4d92:	4602      	mov	r2, r0
   b4d94:	68db      	ldr	r3, [r3, #12]
   b4d96:	4669      	mov	r1, sp
   b4d98:	4630      	mov	r0, r6
   b4d9a:	4798      	blx	r3
   b4d9c:	4604      	mov	r4, r0
    }
    return n;
}
   b4d9e:	4620      	mov	r0, r4
   b4da0:	b00d      	add	sp, #52	; 0x34
   b4da2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4da4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4da4:	b510      	push	{r4, lr}
   b4da6:	4b05      	ldr	r3, [pc, #20]	; (b4dbc <_ZN9IPAddressC1Ev+0x18>)
   b4da8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4daa:	2211      	movs	r2, #17
   b4dac:	f840 3b04 	str.w	r3, [r0], #4
   b4db0:	2100      	movs	r1, #0
   b4db2:	f002 fa09 	bl	b71c8 <memset>
}
   b4db6:	4620      	mov	r0, r4
   b4db8:	bd10      	pop	{r4, pc}
   b4dba:	bf00      	nop
   b4dbc:	000b7400 	.word	0x000b7400

000b4dc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4dc0:	4603      	mov	r3, r0
   b4dc2:	4a07      	ldr	r2, [pc, #28]	; (b4de0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4dc4:	b510      	push	{r4, lr}
   b4dc6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4dca:	f101 0210 	add.w	r2, r1, #16
   b4dce:	f851 4b04 	ldr.w	r4, [r1], #4
   b4dd2:	f843 4b04 	str.w	r4, [r3], #4
   b4dd6:	4291      	cmp	r1, r2
   b4dd8:	d1f9      	bne.n	b4dce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4dda:	780a      	ldrb	r2, [r1, #0]
   b4ddc:	701a      	strb	r2, [r3, #0]
}
   b4dde:	bd10      	pop	{r4, pc}
   b4de0:	000b7400 	.word	0x000b7400

000b4de4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4de4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4de6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4dea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4dee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4df2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4df6:	2304      	movs	r3, #4
   b4df8:	6041      	str	r1, [r0, #4]
   b4dfa:	7503      	strb	r3, [r0, #20]
}
   b4dfc:	bd10      	pop	{r4, pc}
	...

000b4e00 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4e00:	b507      	push	{r0, r1, r2, lr}
   b4e02:	4b06      	ldr	r3, [pc, #24]	; (b4e1c <_ZN9IPAddressC1EPKh+0x1c>)
   b4e04:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4e06:	78cb      	ldrb	r3, [r1, #3]
   b4e08:	9300      	str	r3, [sp, #0]
   b4e0a:	788b      	ldrb	r3, [r1, #2]
   b4e0c:	784a      	ldrb	r2, [r1, #1]
   b4e0e:	7809      	ldrb	r1, [r1, #0]
   b4e10:	f7ff ffe8 	bl	b4de4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4e14:	b003      	add	sp, #12
   b4e16:	f85d fb04 	ldr.w	pc, [sp], #4
   b4e1a:	bf00      	nop
   b4e1c:	000b7400 	.word	0x000b7400

000b4e20 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4e20:	7441      	strb	r1, [r0, #17]
}
   b4e22:	4770      	bx	lr

000b4e24 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4e24:	4770      	bx	lr

000b4e26 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4e26:	4770      	bx	lr

000b4e28 <_ZN9USBSerial4readEv>:
{
   b4e28:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4e2a:	2100      	movs	r1, #0
   b4e2c:	7c00      	ldrb	r0, [r0, #16]
   b4e2e:	f7ff fc11 	bl	b4654 <HAL_USB_USART_Receive_Data>
}
   b4e32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4e36:	bd08      	pop	{r3, pc}

000b4e38 <_ZN9USBSerial4peekEv>:
{
   b4e38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4e3a:	2101      	movs	r1, #1
   b4e3c:	7c00      	ldrb	r0, [r0, #16]
   b4e3e:	f7ff fc09 	bl	b4654 <HAL_USB_USART_Receive_Data>
}
   b4e42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4e46:	bd08      	pop	{r3, pc}

000b4e48 <_ZN9USBSerial17availableForWriteEv>:
{
   b4e48:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4e4a:	7c00      	ldrb	r0, [r0, #16]
   b4e4c:	f7ff fbfa 	bl	b4644 <HAL_USB_USART_Available_Data_For_Write>
}
   b4e50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e54:	bd08      	pop	{r3, pc}

000b4e56 <_ZN9USBSerial9availableEv>:
{
   b4e56:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4e58:	7c00      	ldrb	r0, [r0, #16]
   b4e5a:	f7ff fbeb 	bl	b4634 <HAL_USB_USART_Available_Data>
}
   b4e5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e62:	bd08      	pop	{r3, pc}

000b4e64 <_ZN9USBSerial5writeEh>:
{
   b4e64:	b513      	push	{r0, r1, r4, lr}
   b4e66:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4e68:	7c00      	ldrb	r0, [r0, #16]
{
   b4e6a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4e6c:	f7ff fbea 	bl	b4644 <HAL_USB_USART_Available_Data_For_Write>
   b4e70:	2800      	cmp	r0, #0
   b4e72:	9901      	ldr	r1, [sp, #4]
   b4e74:	dc01      	bgt.n	b4e7a <_ZN9USBSerial5writeEh+0x16>
   b4e76:	7c60      	ldrb	r0, [r4, #17]
   b4e78:	b120      	cbz	r0, b4e84 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4e7a:	7c20      	ldrb	r0, [r4, #16]
   b4e7c:	f7ff fbf2 	bl	b4664 <HAL_USB_USART_Send_Data>
   b4e80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4e84:	b002      	add	sp, #8
   b4e86:	bd10      	pop	{r4, pc}

000b4e88 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4e88:	7c00      	ldrb	r0, [r0, #16]
   b4e8a:	f7ff bbf3 	b.w	b4674 <HAL_USB_USART_Flush_Data>

000b4e8e <_ZN9USBSerialD0Ev>:
   b4e8e:	b510      	push	{r4, lr}
   b4e90:	2114      	movs	r1, #20
   b4e92:	4604      	mov	r4, r0
   b4e94:	f7ff f901 	bl	b409a <_ZdlPvj>
   b4e98:	4620      	mov	r0, r4
   b4e9a:	bd10      	pop	{r4, pc}

000b4e9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4e9c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4ea2:	4604      	mov	r4, r0
   b4ea4:	4608      	mov	r0, r1
   b4ea6:	2100      	movs	r1, #0
   b4ea8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4eac:	4b04      	ldr	r3, [pc, #16]	; (b4ec0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4eae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4eb0:	2301      	movs	r3, #1
  _serial = serial;
   b4eb2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4eb4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4eb6:	4611      	mov	r1, r2
   b4eb8:	f7ff fbac 	bl	b4614 <HAL_USB_USART_Init>
}
   b4ebc:	4620      	mov	r0, r4
   b4ebe:	bd10      	pop	{r4, pc}
   b4ec0:	000b7414 	.word	0x000b7414

000b4ec4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4ec4:	7c00      	ldrb	r0, [r0, #16]
   b4ec6:	2200      	movs	r2, #0
   b4ec8:	f7ff bbac 	b.w	b4624 <HAL_USB_USART_Begin>

000b4ecc <_Z19acquireSerialBufferv>:
{
   b4ecc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4ece:	2214      	movs	r2, #20
{
   b4ed0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4ed2:	2100      	movs	r1, #0
   b4ed4:	f002 f978 	bl	b71c8 <memset>
}
   b4ed8:	4620      	mov	r0, r4
   b4eda:	bd10      	pop	{r4, pc}

000b4edc <_Z16_fetch_usbserialv>:
{
   b4edc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4ede:	4c0f      	ldr	r4, [pc, #60]	; (b4f1c <_Z16_fetch_usbserialv+0x40>)
{
   b4ee0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4ee2:	a803      	add	r0, sp, #12
   b4ee4:	f7ff fff2 	bl	b4ecc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4ee8:	7821      	ldrb	r1, [r4, #0]
   b4eea:	f3bf 8f5b 	dmb	ish
   b4eee:	f011 0101 	ands.w	r1, r1, #1
   b4ef2:	d10f      	bne.n	b4f14 <_Z16_fetch_usbserialv+0x38>
   b4ef4:	4620      	mov	r0, r4
   b4ef6:	9101      	str	r1, [sp, #4]
   b4ef8:	f7ff f8d1 	bl	b409e <__cxa_guard_acquire>
   b4efc:	9901      	ldr	r1, [sp, #4]
   b4efe:	b148      	cbz	r0, b4f14 <_Z16_fetch_usbserialv+0x38>
   b4f00:	aa03      	add	r2, sp, #12
   b4f02:	4807      	ldr	r0, [pc, #28]	; (b4f20 <_Z16_fetch_usbserialv+0x44>)
   b4f04:	f7ff ffca 	bl	b4e9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4f08:	4620      	mov	r0, r4
   b4f0a:	f7ff f8cd 	bl	b40a8 <__cxa_guard_release>
   b4f0e:	4805      	ldr	r0, [pc, #20]	; (b4f24 <_Z16_fetch_usbserialv+0x48>)
   b4f10:	f002 f946 	bl	b71a0 <atexit>
	return _usbserial;
}
   b4f14:	4802      	ldr	r0, [pc, #8]	; (b4f20 <_Z16_fetch_usbserialv+0x44>)
   b4f16:	b008      	add	sp, #32
   b4f18:	bd10      	pop	{r4, pc}
   b4f1a:	bf00      	nop
   b4f1c:	2003e6f4 	.word	0x2003e6f4
   b4f20:	2003e6f8 	.word	0x2003e6f8
   b4f24:	000b4e25 	.word	0x000b4e25

000b4f28 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4f28:	4770      	bx	lr

000b4f2a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4f2a:	7441      	strb	r1, [r0, #17]
}
   b4f2c:	4770      	bx	lr

000b4f2e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4f2e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4f30:	7c00      	ldrb	r0, [r0, #16]
   b4f32:	f7ff fb17 	bl	b4564 <hal_usart_available_data_for_write>
}
   b4f36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f3a:	bd08      	pop	{r3, pc}

000b4f3c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4f3c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4f3e:	7c00      	ldrb	r0, [r0, #16]
   b4f40:	f7ff fae8 	bl	b4514 <hal_usart_available>
}
   b4f44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f48:	bd08      	pop	{r3, pc}

000b4f4a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4f4a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4f4c:	7c00      	ldrb	r0, [r0, #16]
   b4f4e:	f7ff faf1 	bl	b4534 <hal_usart_peek>
}
   b4f52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f56:	bd08      	pop	{r3, pc}

000b4f58 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4f58:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4f5a:	7c00      	ldrb	r0, [r0, #16]
   b4f5c:	f7ff fae2 	bl	b4524 <hal_usart_read>
}
   b4f60:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f64:	bd08      	pop	{r3, pc}

000b4f66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4f66:	7c00      	ldrb	r0, [r0, #16]
   b4f68:	f7ff baec 	b.w	b4544 <hal_usart_flush>

000b4f6c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4f6e:	7c45      	ldrb	r5, [r0, #17]
{
   b4f70:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4f72:	b12d      	cbz	r5, b4f80 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4f74:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4f76:	b003      	add	sp, #12
   b4f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4f7c:	f7ff bac2 	b.w	b4504 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4f80:	7c00      	ldrb	r0, [r0, #16]
   b4f82:	9101      	str	r1, [sp, #4]
   b4f84:	f7ff faee 	bl	b4564 <hal_usart_available_data_for_write>
   b4f88:	2800      	cmp	r0, #0
   b4f8a:	9901      	ldr	r1, [sp, #4]
   b4f8c:	dcf2      	bgt.n	b4f74 <_ZN11USARTSerial5writeEh+0x8>
}
   b4f8e:	4628      	mov	r0, r5
   b4f90:	b003      	add	sp, #12
   b4f92:	bd30      	pop	{r4, r5, pc}

000b4f94 <_ZN11USARTSerialD0Ev>:
   b4f94:	b510      	push	{r4, lr}
   b4f96:	2114      	movs	r1, #20
   b4f98:	4604      	mov	r4, r0
   b4f9a:	f7ff f87e 	bl	b409a <_ZdlPvj>
   b4f9e:	4620      	mov	r0, r4
   b4fa0:	bd10      	pop	{r4, pc}
	...

000b4fa4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4fa4:	b510      	push	{r4, lr}
   b4fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4faa:	4604      	mov	r4, r0
   b4fac:	4608      	mov	r0, r1
   b4fae:	4611      	mov	r1, r2
   b4fb0:	2200      	movs	r2, #0
   b4fb2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4fb6:	4b04      	ldr	r3, [pc, #16]	; (b4fc8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4fb8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4fba:	2301      	movs	r3, #1
  _serial = serial;
   b4fbc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4fbe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4fc0:	f7ff fad8 	bl	b4574 <hal_usart_init_ex>
}
   b4fc4:	4620      	mov	r0, r4
   b4fc6:	bd10      	pop	{r4, pc}
   b4fc8:	000b7444 	.word	0x000b7444

000b4fcc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4fcc:	4770      	bx	lr

000b4fce <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4fd0:	4606      	mov	r6, r0
   b4fd2:	4615      	mov	r5, r2
   b4fd4:	460c      	mov	r4, r1
   b4fd6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4fd8:	42bc      	cmp	r4, r7
   b4fda:	d006      	beq.n	b4fea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4fdc:	6833      	ldr	r3, [r6, #0]
   b4fde:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4fe2:	689b      	ldr	r3, [r3, #8]
   b4fe4:	4630      	mov	r0, r6
   b4fe6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4fe8:	e7f6      	b.n	b4fd8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4fea:	4628      	mov	r0, r5
   b4fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4fee <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4fee:	7c00      	ldrb	r0, [r0, #16]
   b4ff0:	2200      	movs	r2, #0
   b4ff2:	f7ff bac7 	b.w	b4584 <hal_i2c_write>

000b4ff6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4ff6:	7c00      	ldrb	r0, [r0, #16]
   b4ff8:	2100      	movs	r1, #0
   b4ffa:	f7ff bacb 	b.w	b4594 <hal_i2c_available>

000b4ffe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4ffe:	7c00      	ldrb	r0, [r0, #16]
   b5000:	2100      	movs	r1, #0
   b5002:	f7ff bacf 	b.w	b45a4 <hal_i2c_read>

000b5006 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5006:	7c00      	ldrb	r0, [r0, #16]
   b5008:	2100      	movs	r1, #0
   b500a:	f7ff bad3 	b.w	b45b4 <hal_i2c_peek>

000b500e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b500e:	7c00      	ldrb	r0, [r0, #16]
   b5010:	2100      	movs	r1, #0
   b5012:	f7ff bad7 	b.w	b45c4 <hal_i2c_flush>

000b5016 <_ZN7TwoWireD0Ev>:
   b5016:	b510      	push	{r4, lr}
   b5018:	2114      	movs	r1, #20
   b501a:	4604      	mov	r4, r0
   b501c:	f7ff f83d 	bl	b409a <_ZdlPvj>
   b5020:	4620      	mov	r0, r4
   b5022:	bd10      	pop	{r4, pc}

000b5024 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5024:	b510      	push	{r4, lr}
   b5026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b502a:	4604      	mov	r4, r0
   b502c:	4608      	mov	r0, r1
   b502e:	2100      	movs	r1, #0
   b5030:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5034:	4b03      	ldr	r3, [pc, #12]	; (b5044 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b5036:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5038:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b503a:	4611      	mov	r1, r2
   b503c:	f7ff fad2 	bl	b45e4 <hal_i2c_init>
}
   b5040:	4620      	mov	r0, r4
   b5042:	bd10      	pop	{r4, pc}
   b5044:	000b7474 	.word	0x000b7474

000b5048 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5048:	2200      	movs	r2, #0
   b504a:	6840      	ldr	r0, [r0, #4]
   b504c:	4611      	mov	r1, r2
   b504e:	f7ff bb5d 	b.w	b470c <network_ready>

000b5052 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5052:	2200      	movs	r2, #0
   b5054:	6840      	ldr	r0, [r0, #4]
   b5056:	4611      	mov	r1, r2
   b5058:	f7ff bb78 	b.w	b474c <network_listening>

000b505c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b505c:	2200      	movs	r2, #0
   b505e:	6840      	ldr	r0, [r0, #4]
   b5060:	4611      	mov	r1, r2
   b5062:	f7ff bb83 	b.w	b476c <network_get_listen_timeout>

000b5066 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5066:	6840      	ldr	r0, [r0, #4]
   b5068:	2200      	movs	r2, #0
   b506a:	f7ff bb77 	b.w	b475c <network_set_listen_timeout>

000b506e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b506e:	6840      	ldr	r0, [r0, #4]
   b5070:	2200      	movs	r2, #0
   b5072:	f081 0101 	eor.w	r1, r1, #1
   b5076:	f7ff bb61 	b.w	b473c <network_listen>

000b507a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b507a:	2300      	movs	r3, #0
   b507c:	6840      	ldr	r0, [r0, #4]
   b507e:	461a      	mov	r2, r3
   b5080:	4619      	mov	r1, r3
   b5082:	f7ff bb53 	b.w	b472c <network_off>

000b5086 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5086:	2200      	movs	r2, #0
   b5088:	6840      	ldr	r0, [r0, #4]
   b508a:	4611      	mov	r1, r2
   b508c:	f7ff bb2e 	b.w	b46ec <network_connecting>

000b5090 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5090:	6840      	ldr	r0, [r0, #4]
   b5092:	2200      	movs	r2, #0
   b5094:	2102      	movs	r1, #2
   b5096:	f7ff bb31 	b.w	b46fc <network_disconnect>

000b509a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b509a:	2300      	movs	r3, #0
   b509c:	6840      	ldr	r0, [r0, #4]
   b509e:	461a      	mov	r2, r3
   b50a0:	f7ff bb1c 	b.w	b46dc <network_connect>

000b50a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b50a4:	4b02      	ldr	r3, [pc, #8]	; (b50b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b50a6:	2204      	movs	r2, #4
   b50a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b50aa:	4a02      	ldr	r2, [pc, #8]	; (b50b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b50ac:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b50ae:	4770      	bx	lr
   b50b0:	2003e70c 	.word	0x2003e70c
   b50b4:	000b749c 	.word	0x000b749c

000b50b8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b50b8:	2300      	movs	r3, #0
   b50ba:	6840      	ldr	r0, [r0, #4]
   b50bc:	461a      	mov	r2, r3
   b50be:	f7ff bb0d 	b.w	b46dc <network_connect>

000b50c2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b50c2:	6840      	ldr	r0, [r0, #4]
   b50c4:	2200      	movs	r2, #0
   b50c6:	2102      	movs	r1, #2
   b50c8:	f7ff bb18 	b.w	b46fc <network_disconnect>

000b50cc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b50cc:	2200      	movs	r2, #0
   b50ce:	6840      	ldr	r0, [r0, #4]
   b50d0:	4611      	mov	r1, r2
   b50d2:	f7ff bb0b 	b.w	b46ec <network_connecting>

000b50d6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b50d6:	2200      	movs	r2, #0
   b50d8:	6840      	ldr	r0, [r0, #4]
   b50da:	4611      	mov	r1, r2
   b50dc:	f7ff bb16 	b.w	b470c <network_ready>

000b50e0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b50e0:	2300      	movs	r3, #0
   b50e2:	6840      	ldr	r0, [r0, #4]
   b50e4:	461a      	mov	r2, r3
   b50e6:	4619      	mov	r1, r3
   b50e8:	f7ff bb18 	b.w	b471c <network_on>

000b50ec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b50ec:	2300      	movs	r3, #0
   b50ee:	6840      	ldr	r0, [r0, #4]
   b50f0:	461a      	mov	r2, r3
   b50f2:	4619      	mov	r1, r3
   b50f4:	f7ff bb1a 	b.w	b472c <network_off>

000b50f8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b50f8:	6840      	ldr	r0, [r0, #4]
   b50fa:	2100      	movs	r1, #0
   b50fc:	f7ff bb3e 	b.w	b477c <network_is_on>

000b5100 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5100:	6840      	ldr	r0, [r0, #4]
   b5102:	2100      	movs	r1, #0
   b5104:	f7ff bb42 	b.w	b478c <network_is_off>

000b5108 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5108:	6840      	ldr	r0, [r0, #4]
   b510a:	2200      	movs	r2, #0
   b510c:	f081 0101 	eor.w	r1, r1, #1
   b5110:	f7ff bb14 	b.w	b473c <network_listen>

000b5114 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5114:	6840      	ldr	r0, [r0, #4]
   b5116:	2200      	movs	r2, #0
   b5118:	f7ff bb20 	b.w	b475c <network_set_listen_timeout>

000b511c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b511c:	2200      	movs	r2, #0
   b511e:	6840      	ldr	r0, [r0, #4]
   b5120:	4611      	mov	r1, r2
   b5122:	f7ff bb23 	b.w	b476c <network_get_listen_timeout>

000b5126 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5126:	2200      	movs	r2, #0
   b5128:	6840      	ldr	r0, [r0, #4]
   b512a:	4611      	mov	r1, r2
   b512c:	f7ff bb0e 	b.w	b474c <network_listening>

000b5130 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5134:	b095      	sub	sp, #84	; 0x54
   b5136:	4614      	mov	r4, r2
   b5138:	460d      	mov	r5, r1
   b513a:	4607      	mov	r7, r0
    IPAddress addr;
   b513c:	f7ff fe32 	bl	b4da4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5140:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5142:	221c      	movs	r2, #28
   b5144:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5146:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5148:	f002 f83e 	bl	b71c8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b514c:	2340      	movs	r3, #64	; 0x40
   b514e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5150:	4620      	mov	r0, r4
   b5152:	466b      	mov	r3, sp
   b5154:	aa0c      	add	r2, sp, #48	; 0x30
   b5156:	2100      	movs	r1, #0
   b5158:	f7ff f974 	bl	b4444 <netdb_getaddrinfo>
    if (!r) {
   b515c:	4604      	mov	r4, r0
   b515e:	2800      	cmp	r0, #0
   b5160:	d14b      	bne.n	b51fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5162:	4602      	mov	r2, r0
   b5164:	2101      	movs	r1, #1
   b5166:	6868      	ldr	r0, [r5, #4]
   b5168:	f7ff fad0 	bl	b470c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b516c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b516e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5170:	4622      	mov	r2, r4
   b5172:	6868      	ldr	r0, [r5, #4]
   b5174:	f7ff faca 	bl	b470c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5178:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b517a:	4681      	mov	r9, r0
        bool ok = false;
   b517c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b517e:	2e00      	cmp	r6, #0
   b5180:	d03b      	beq.n	b51fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5182:	2900      	cmp	r1, #0
   b5184:	d139      	bne.n	b51fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5186:	6873      	ldr	r3, [r6, #4]
   b5188:	2b02      	cmp	r3, #2
   b518a:	d003      	beq.n	b5194 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b518c:	2b0a      	cmp	r3, #10
   b518e:	d011      	beq.n	b51b4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5190:	69f6      	ldr	r6, [r6, #28]
   b5192:	e7f4      	b.n	b517e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5194:	f1b8 0f00 	cmp.w	r8, #0
   b5198:	d0fa      	beq.n	b5190 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b519a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b519c:	a806      	add	r0, sp, #24
   b519e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b51a0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b51a2:	f7ff fe2d 	bl	b4e00 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b51a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b51a8:	1d3c      	adds	r4, r7, #4
   b51aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b51ac:	682b      	ldr	r3, [r5, #0]
   b51ae:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b51b0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b51b2:	e7ed      	b.n	b5190 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b51b4:	f1b9 0f00 	cmp.w	r9, #0
   b51b8:	d0ea      	beq.n	b5190 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b51ba:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b51bc:	2210      	movs	r2, #16
   b51be:	a801      	add	r0, sp, #4
   b51c0:	f002 f802 	bl	b71c8 <memset>
                    a.v = 6;
   b51c4:	2306      	movs	r3, #6
   b51c6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b51ca:	ad01      	add	r5, sp, #4
   b51cc:	f104 0308 	add.w	r3, r4, #8
   b51d0:	3418      	adds	r4, #24
   b51d2:	6818      	ldr	r0, [r3, #0]
   b51d4:	6859      	ldr	r1, [r3, #4]
   b51d6:	462a      	mov	r2, r5
   b51d8:	c203      	stmia	r2!, {r0, r1}
   b51da:	3308      	adds	r3, #8
   b51dc:	42a3      	cmp	r3, r4
   b51de:	4615      	mov	r5, r2
   b51e0:	d1f7      	bne.n	b51d2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b51e2:	a901      	add	r1, sp, #4
   b51e4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b51e6:	ad07      	add	r5, sp, #28
   b51e8:	f7ff fdea 	bl	b4dc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b51ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b51ee:	1d3c      	adds	r4, r7, #4
   b51f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b51f2:	682b      	ldr	r3, [r5, #0]
   b51f4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b51f6:	4649      	mov	r1, r9
   b51f8:	e7ca      	b.n	b5190 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b51fa:	9800      	ldr	r0, [sp, #0]
   b51fc:	f7ff f91a 	bl	b4434 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5200:	4638      	mov	r0, r7
   b5202:	b015      	add	sp, #84	; 0x54
   b5204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5208 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5208:	4b02      	ldr	r3, [pc, #8]	; (b5214 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b520a:	4a03      	ldr	r2, [pc, #12]	; (b5218 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b520c:	601a      	str	r2, [r3, #0]
   b520e:	2200      	movs	r2, #0
   b5210:	605a      	str	r2, [r3, #4]

} // spark
   b5212:	4770      	bx	lr
   b5214:	2003e714 	.word	0x2003e714
   b5218:	000b74d8 	.word	0x000b74d8

000b521c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b521c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b521e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5220:	d902      	bls.n	b5228 <pinAvailable+0xc>
    return false;
   b5222:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5224:	b002      	add	sp, #8
   b5226:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5228:	f1a0 030b 	sub.w	r3, r0, #11
   b522c:	2b02      	cmp	r3, #2
   b522e:	d81a      	bhi.n	b5266 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5230:	4c17      	ldr	r4, [pc, #92]	; (b5290 <pinAvailable+0x74>)
   b5232:	7821      	ldrb	r1, [r4, #0]
   b5234:	f3bf 8f5b 	dmb	ish
   b5238:	f011 0101 	ands.w	r1, r1, #1
   b523c:	d10b      	bne.n	b5256 <pinAvailable+0x3a>
   b523e:	4620      	mov	r0, r4
   b5240:	9101      	str	r1, [sp, #4]
   b5242:	f7fe ff2c 	bl	b409e <__cxa_guard_acquire>
   b5246:	9901      	ldr	r1, [sp, #4]
   b5248:	b128      	cbz	r0, b5256 <pinAvailable+0x3a>
   b524a:	4812      	ldr	r0, [pc, #72]	; (b5294 <pinAvailable+0x78>)
   b524c:	f7ff fb24 	bl	b4898 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5250:	4620      	mov	r0, r4
   b5252:	f7fe ff29 	bl	b40a8 <__cxa_guard_release>
   b5256:	4b0f      	ldr	r3, [pc, #60]	; (b5294 <pinAvailable+0x78>)
   b5258:	7818      	ldrb	r0, [r3, #0]
   b525a:	f7ff f9d3 	bl	b4604 <hal_spi_is_enabled>
   b525e:	2800      	cmp	r0, #0
   b5260:	d1df      	bne.n	b5222 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5262:	2001      	movs	r0, #1
   b5264:	e7de      	b.n	b5224 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5266:	2801      	cmp	r0, #1
   b5268:	d809      	bhi.n	b527e <pinAvailable+0x62>
   b526a:	f000 f8af 	bl	b53cc <_Z19__fetch_global_Wirev>
   b526e:	2100      	movs	r1, #0
   b5270:	7c00      	ldrb	r0, [r0, #16]
   b5272:	f7ff f9af 	bl	b45d4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5276:	f080 0001 	eor.w	r0, r0, #1
   b527a:	b2c0      	uxtb	r0, r0
   b527c:	e7d2      	b.n	b5224 <pinAvailable+0x8>
   b527e:	3809      	subs	r0, #9
   b5280:	2801      	cmp	r0, #1
   b5282:	d8ee      	bhi.n	b5262 <pinAvailable+0x46>
   b5284:	f000 f866 	bl	b5354 <_Z22__fetch_global_Serial1v>
   b5288:	7c00      	ldrb	r0, [r0, #16]
   b528a:	f7ff f963 	bl	b4554 <hal_usart_is_enabled>
   b528e:	e7f2      	b.n	b5276 <pinAvailable+0x5a>
   b5290:	2003e71c 	.word	0x2003e71c
   b5294:	2003e720 	.word	0x2003e720

000b5298 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5298:	2823      	cmp	r0, #35	; 0x23
{
   b529a:	b538      	push	{r3, r4, r5, lr}
   b529c:	4604      	mov	r4, r0
   b529e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b52a0:	d80a      	bhi.n	b52b8 <pinMode+0x20>
   b52a2:	29ff      	cmp	r1, #255	; 0xff
   b52a4:	d008      	beq.n	b52b8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b52a6:	f7ff ffb9 	bl	b521c <pinAvailable>
   b52aa:	b128      	cbz	r0, b52b8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b52ac:	4629      	mov	r1, r5
   b52ae:	4620      	mov	r0, r4
}
   b52b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b52b4:	f7ff b8d6 	b.w	b4464 <HAL_Pin_Mode>
}
   b52b8:	bd38      	pop	{r3, r4, r5, pc}

000b52ba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b52ba:	b538      	push	{r3, r4, r5, lr}
   b52bc:	4604      	mov	r4, r0
   b52be:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b52c0:	f7ff f8d8 	bl	b4474 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b52c4:	28ff      	cmp	r0, #255	; 0xff
   b52c6:	d010      	beq.n	b52ea <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b52c8:	2806      	cmp	r0, #6
   b52ca:	d804      	bhi.n	b52d6 <digitalWrite+0x1c>
   b52cc:	234d      	movs	r3, #77	; 0x4d
   b52ce:	fa23 f000 	lsr.w	r0, r3, r0
   b52d2:	07c3      	lsls	r3, r0, #31
   b52d4:	d409      	bmi.n	b52ea <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b52d6:	4620      	mov	r0, r4
   b52d8:	f7ff ffa0 	bl	b521c <pinAvailable>
   b52dc:	b128      	cbz	r0, b52ea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b52de:	4629      	mov	r1, r5
   b52e0:	4620      	mov	r0, r4
}
   b52e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b52e6:	f7ff b8cd 	b.w	b4484 <HAL_GPIO_Write>
}
   b52ea:	bd38      	pop	{r3, r4, r5, pc}

000b52ec <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b52ec:	280d      	cmp	r0, #13
{
   b52ee:	b510      	push	{r4, lr}
   b52f0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b52f2:	bf9c      	itt	ls
   b52f4:	340e      	addls	r4, #14
   b52f6:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b52f8:	4620      	mov	r0, r4
   b52fa:	f7ff ff8f 	bl	b521c <pinAvailable>
   b52fe:	b150      	cbz	r0, b5316 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b5300:	2103      	movs	r1, #3
   b5302:	4620      	mov	r0, r4
   b5304:	f7ff f8a6 	bl	b4454 <HAL_Validate_Pin_Function>
   b5308:	2803      	cmp	r0, #3
   b530a:	d104      	bne.n	b5316 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b530c:	4620      	mov	r0, r4
}
   b530e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5312:	f7ff b8bf 	b.w	b4494 <hal_adc_read>
}
   b5316:	2000      	movs	r0, #0
   b5318:	bd10      	pop	{r4, pc}

000b531a <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b531a:	f7ff b8c3 	b.w	b44a4 <HAL_Pulse_In>

000b531e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b531e:	4770      	bx	lr

000b5320 <_Z20acquireSerial1Bufferv>:
{
   b5320:	b538      	push	{r3, r4, r5, lr}
   b5322:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5324:	2514      	movs	r5, #20
   b5326:	462a      	mov	r2, r5
   b5328:	2100      	movs	r1, #0
   b532a:	f001 ff4d 	bl	b71c8 <memset>
   b532e:	8025      	strh	r5, [r4, #0]
   b5330:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5332:	4907      	ldr	r1, [pc, #28]	; (b5350 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5334:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5336:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5338:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b533a:	f000 f86b 	bl	b5414 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b533e:	4904      	ldr	r1, [pc, #16]	; (b5350 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5340:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5342:	4628      	mov	r0, r5
   b5344:	f000 f866 	bl	b5414 <_ZnajRKSt9nothrow_t>
    };
   b5348:	60e0      	str	r0, [r4, #12]
}
   b534a:	4620      	mov	r0, r4
   b534c:	bd38      	pop	{r3, r4, r5, pc}
   b534e:	bf00      	nop
   b5350:	000b750c 	.word	0x000b750c

000b5354 <_Z22__fetch_global_Serial1v>:
{
   b5354:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5356:	4d0e      	ldr	r5, [pc, #56]	; (b5390 <_Z22__fetch_global_Serial1v+0x3c>)
   b5358:	7829      	ldrb	r1, [r5, #0]
   b535a:	f3bf 8f5b 	dmb	ish
   b535e:	f011 0401 	ands.w	r4, r1, #1
{
   b5362:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5364:	d111      	bne.n	b538a <_Z22__fetch_global_Serial1v+0x36>
   b5366:	4628      	mov	r0, r5
   b5368:	f7fe fe99 	bl	b409e <__cxa_guard_acquire>
   b536c:	b168      	cbz	r0, b538a <_Z22__fetch_global_Serial1v+0x36>
   b536e:	a801      	add	r0, sp, #4
   b5370:	f7ff ffd6 	bl	b5320 <_Z20acquireSerial1Bufferv>
   b5374:	aa01      	add	r2, sp, #4
   b5376:	4621      	mov	r1, r4
   b5378:	4806      	ldr	r0, [pc, #24]	; (b5394 <_Z22__fetch_global_Serial1v+0x40>)
   b537a:	f7ff fe13 	bl	b4fa4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b537e:	4628      	mov	r0, r5
   b5380:	f7fe fe92 	bl	b40a8 <__cxa_guard_release>
   b5384:	4804      	ldr	r0, [pc, #16]	; (b5398 <_Z22__fetch_global_Serial1v+0x44>)
   b5386:	f001 ff0b 	bl	b71a0 <atexit>
    return serial1;
}
   b538a:	4802      	ldr	r0, [pc, #8]	; (b5394 <_Z22__fetch_global_Serial1v+0x40>)
   b538c:	b007      	add	sp, #28
   b538e:	bd30      	pop	{r4, r5, pc}
   b5390:	2003e728 	.word	0x2003e728
   b5394:	2003e72c 	.word	0x2003e72c
   b5398:	000b531f 	.word	0x000b531f

000b539c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b539c:	4770      	bx	lr
	...

000b53a0 <_Z17acquireWireBufferv>:
{
   b53a0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b53a2:	2520      	movs	r5, #32
   b53a4:	2314      	movs	r3, #20
{
   b53a6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b53a8:	6003      	str	r3, [r0, #0]
   b53aa:	6085      	str	r5, [r0, #8]
   b53ac:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b53ae:	4906      	ldr	r1, [pc, #24]	; (b53c8 <_Z17acquireWireBufferv+0x28>)
   b53b0:	4628      	mov	r0, r5
   b53b2:	f000 f82f 	bl	b5414 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b53b6:	4904      	ldr	r1, [pc, #16]	; (b53c8 <_Z17acquireWireBufferv+0x28>)
	};
   b53b8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b53ba:	4628      	mov	r0, r5
   b53bc:	f000 f82a 	bl	b5414 <_ZnajRKSt9nothrow_t>
	};
   b53c0:	60e0      	str	r0, [r4, #12]
}
   b53c2:	4620      	mov	r0, r4
   b53c4:	bd38      	pop	{r3, r4, r5, pc}
   b53c6:	bf00      	nop
   b53c8:	000b750c 	.word	0x000b750c

000b53cc <_Z19__fetch_global_Wirev>:
{
   b53cc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b53ce:	4d0e      	ldr	r5, [pc, #56]	; (b5408 <_Z19__fetch_global_Wirev+0x3c>)
   b53d0:	7829      	ldrb	r1, [r5, #0]
   b53d2:	f3bf 8f5b 	dmb	ish
   b53d6:	f011 0401 	ands.w	r4, r1, #1
{
   b53da:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b53dc:	d111      	bne.n	b5402 <_Z19__fetch_global_Wirev+0x36>
   b53de:	4628      	mov	r0, r5
   b53e0:	f7fe fe5d 	bl	b409e <__cxa_guard_acquire>
   b53e4:	b168      	cbz	r0, b5402 <_Z19__fetch_global_Wirev+0x36>
   b53e6:	a801      	add	r0, sp, #4
   b53e8:	f7ff ffda 	bl	b53a0 <_Z17acquireWireBufferv>
   b53ec:	aa01      	add	r2, sp, #4
   b53ee:	4621      	mov	r1, r4
   b53f0:	4806      	ldr	r0, [pc, #24]	; (b540c <_Z19__fetch_global_Wirev+0x40>)
   b53f2:	f7ff fe17 	bl	b5024 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b53f6:	4628      	mov	r0, r5
   b53f8:	f7fe fe56 	bl	b40a8 <__cxa_guard_release>
   b53fc:	4804      	ldr	r0, [pc, #16]	; (b5410 <_Z19__fetch_global_Wirev+0x44>)
   b53fe:	f001 fecf 	bl	b71a0 <atexit>
	return wire;
}
   b5402:	4802      	ldr	r0, [pc, #8]	; (b540c <_Z19__fetch_global_Wirev+0x40>)
   b5404:	b007      	add	sp, #28
   b5406:	bd30      	pop	{r4, r5, pc}
   b5408:	2003e744 	.word	0x2003e744
   b540c:	2003e748 	.word	0x2003e748
   b5410:	000b539d 	.word	0x000b539d

000b5414 <_ZnajRKSt9nothrow_t>:
   b5414:	f7fe be3f 	b.w	b4096 <_Znaj>

000b5418 <pow>:
   b5418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b541a:	ed2d 8b02 	vpush	{d8}
   b541e:	ec57 6b10 	vmov	r6, r7, d0
   b5422:	ec55 4b11 	vmov	r4, r5, d1
   b5426:	f000 f8ff 	bl	b5628 <__ieee754_pow>
   b542a:	4b63      	ldr	r3, [pc, #396]	; (b55b8 <pow+0x1a0>)
   b542c:	eeb0 8a40 	vmov.f32	s16, s0
   b5430:	eef0 8a60 	vmov.f32	s17, s1
   b5434:	f993 3000 	ldrsb.w	r3, [r3]
   b5438:	3301      	adds	r3, #1
   b543a:	d02a      	beq.n	b5492 <pow+0x7a>
   b543c:	4622      	mov	r2, r4
   b543e:	462b      	mov	r3, r5
   b5440:	4620      	mov	r0, r4
   b5442:	4629      	mov	r1, r5
   b5444:	f001 fdfe 	bl	b7044 <__aeabi_dcmpun>
   b5448:	bb18      	cbnz	r0, b5492 <pow+0x7a>
   b544a:	4632      	mov	r2, r6
   b544c:	463b      	mov	r3, r7
   b544e:	4630      	mov	r0, r6
   b5450:	4639      	mov	r1, r7
   b5452:	f001 fdf7 	bl	b7044 <__aeabi_dcmpun>
   b5456:	2800      	cmp	r0, #0
   b5458:	d144      	bne.n	b54e4 <pow+0xcc>
   b545a:	2200      	movs	r2, #0
   b545c:	2300      	movs	r3, #0
   b545e:	4630      	mov	r0, r6
   b5460:	4639      	mov	r1, r7
   b5462:	f001 fdbd 	bl	b6fe0 <__aeabi_dcmpeq>
   b5466:	b1d8      	cbz	r0, b54a0 <pow+0x88>
   b5468:	2200      	movs	r2, #0
   b546a:	2300      	movs	r3, #0
   b546c:	4620      	mov	r0, r4
   b546e:	4629      	mov	r1, r5
   b5470:	f001 fdb6 	bl	b6fe0 <__aeabi_dcmpeq>
   b5474:	2800      	cmp	r0, #0
   b5476:	d13d      	bne.n	b54f4 <pow+0xdc>
   b5478:	ec45 4b10 	vmov	d0, r4, r5
   b547c:	f001 f844 	bl	b6508 <finite>
   b5480:	b138      	cbz	r0, b5492 <pow+0x7a>
   b5482:	4620      	mov	r0, r4
   b5484:	4629      	mov	r1, r5
   b5486:	2200      	movs	r2, #0
   b5488:	2300      	movs	r3, #0
   b548a:	f001 fdb3 	bl	b6ff4 <__aeabi_dcmplt>
   b548e:	2800      	cmp	r0, #0
   b5490:	d15c      	bne.n	b554c <pow+0x134>
   b5492:	eeb0 0a48 	vmov.f32	s0, s16
   b5496:	eef0 0a68 	vmov.f32	s1, s17
   b549a:	ecbd 8b02 	vpop	{d8}
   b549e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b54a0:	eeb0 0a48 	vmov.f32	s0, s16
   b54a4:	eef0 0a68 	vmov.f32	s1, s17
   b54a8:	f001 f82e 	bl	b6508 <finite>
   b54ac:	b358      	cbz	r0, b5506 <pow+0xee>
   b54ae:	ec51 0b18 	vmov	r0, r1, d8
   b54b2:	2200      	movs	r2, #0
   b54b4:	2300      	movs	r3, #0
   b54b6:	f001 fd93 	bl	b6fe0 <__aeabi_dcmpeq>
   b54ba:	2800      	cmp	r0, #0
   b54bc:	d0e9      	beq.n	b5492 <pow+0x7a>
   b54be:	ec47 6b10 	vmov	d0, r6, r7
   b54c2:	f001 f821 	bl	b6508 <finite>
   b54c6:	2800      	cmp	r0, #0
   b54c8:	d0e3      	beq.n	b5492 <pow+0x7a>
   b54ca:	ec45 4b10 	vmov	d0, r4, r5
   b54ce:	f001 f81b 	bl	b6508 <finite>
   b54d2:	2800      	cmp	r0, #0
   b54d4:	d0dd      	beq.n	b5492 <pow+0x7a>
   b54d6:	f7ff f989 	bl	b47ec <__errno>
   b54da:	2322      	movs	r3, #34	; 0x22
   b54dc:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b5598 <pow+0x180>
   b54e0:	6003      	str	r3, [r0, #0]
   b54e2:	e7d6      	b.n	b5492 <pow+0x7a>
   b54e4:	4620      	mov	r0, r4
   b54e6:	4629      	mov	r1, r5
   b54e8:	2200      	movs	r2, #0
   b54ea:	2300      	movs	r3, #0
   b54ec:	f001 fd78 	bl	b6fe0 <__aeabi_dcmpeq>
   b54f0:	2800      	cmp	r0, #0
   b54f2:	d0ce      	beq.n	b5492 <pow+0x7a>
   b54f4:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b55a0 <pow+0x188>
   b54f8:	eeb0 0a48 	vmov.f32	s0, s16
   b54fc:	eef0 0a68 	vmov.f32	s1, s17
   b5500:	ecbd 8b02 	vpop	{d8}
   b5504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5506:	ec47 6b10 	vmov	d0, r6, r7
   b550a:	f000 fffd 	bl	b6508 <finite>
   b550e:	2800      	cmp	r0, #0
   b5510:	d0cd      	beq.n	b54ae <pow+0x96>
   b5512:	ec45 4b10 	vmov	d0, r4, r5
   b5516:	f000 fff7 	bl	b6508 <finite>
   b551a:	2800      	cmp	r0, #0
   b551c:	d0c7      	beq.n	b54ae <pow+0x96>
   b551e:	ec53 2b18 	vmov	r2, r3, d8
   b5522:	ee18 0a10 	vmov	r0, s16
   b5526:	4619      	mov	r1, r3
   b5528:	f001 fd8c 	bl	b7044 <__aeabi_dcmpun>
   b552c:	bb20      	cbnz	r0, b5578 <pow+0x160>
   b552e:	f7ff f95d 	bl	b47ec <__errno>
   b5532:	4603      	mov	r3, r0
   b5534:	2222      	movs	r2, #34	; 0x22
   b5536:	601a      	str	r2, [r3, #0]
   b5538:	4630      	mov	r0, r6
   b553a:	4639      	mov	r1, r7
   b553c:	2200      	movs	r2, #0
   b553e:	2300      	movs	r3, #0
   b5540:	f001 fd58 	bl	b6ff4 <__aeabi_dcmplt>
   b5544:	b948      	cbnz	r0, b555a <pow+0x142>
   b5546:	ed9f 8b18 	vldr	d8, [pc, #96]	; b55a8 <pow+0x190>
   b554a:	e7a2      	b.n	b5492 <pow+0x7a>
   b554c:	f7ff f94e 	bl	b47ec <__errno>
   b5550:	2321      	movs	r3, #33	; 0x21
   b5552:	ed9f 8b17 	vldr	d8, [pc, #92]	; b55b0 <pow+0x198>
   b5556:	6003      	str	r3, [r0, #0]
   b5558:	e79b      	b.n	b5492 <pow+0x7a>
   b555a:	ec45 4b10 	vmov	d0, r4, r5
   b555e:	f000 ffe7 	bl	b6530 <rint>
   b5562:	4622      	mov	r2, r4
   b5564:	ec51 0b10 	vmov	r0, r1, d0
   b5568:	462b      	mov	r3, r5
   b556a:	f001 fd39 	bl	b6fe0 <__aeabi_dcmpeq>
   b556e:	2800      	cmp	r0, #0
   b5570:	d1e9      	bne.n	b5546 <pow+0x12e>
   b5572:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b55b0 <pow+0x198>
   b5576:	e78c      	b.n	b5492 <pow+0x7a>
   b5578:	f7ff f938 	bl	b47ec <__errno>
   b557c:	2200      	movs	r2, #0
   b557e:	2300      	movs	r3, #0
   b5580:	2121      	movs	r1, #33	; 0x21
   b5582:	6001      	str	r1, [r0, #0]
   b5584:	4610      	mov	r0, r2
   b5586:	4619      	mov	r1, r3
   b5588:	f001 fbec 	bl	b6d64 <__aeabi_ddiv>
   b558c:	ec41 0b18 	vmov	d8, r0, r1
   b5590:	e77f      	b.n	b5492 <pow+0x7a>
   b5592:	bf00      	nop
   b5594:	f3af 8000 	nop.w
	...
   b55a4:	3ff00000 	.word	0x3ff00000
   b55a8:	00000000 	.word	0x00000000
   b55ac:	7ff00000 	.word	0x7ff00000
   b55b0:	00000000 	.word	0x00000000
   b55b4:	fff00000 	.word	0xfff00000
   b55b8:	2003e618 	.word	0x2003e618

000b55bc <logf>:
   b55bc:	b508      	push	{r3, lr}
   b55be:	ed2d 8b02 	vpush	{d8}
   b55c2:	eeb0 8a40 	vmov.f32	s16, s0
   b55c6:	f000 fe95 	bl	b62f4 <__ieee754_logf>
   b55ca:	4b14      	ldr	r3, [pc, #80]	; (b561c <logf+0x60>)
   b55cc:	f993 3000 	ldrsb.w	r3, [r3]
   b55d0:	3301      	adds	r3, #1
   b55d2:	d014      	beq.n	b55fe <logf+0x42>
   b55d4:	eeb4 8a48 	vcmp.f32	s16, s16
   b55d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b55dc:	d60f      	bvs.n	b55fe <logf+0x42>
   b55de:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b55e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b55e6:	dc0a      	bgt.n	b55fe <logf+0x42>
   b55e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
   b55ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b55f0:	d108      	bne.n	b5604 <logf+0x48>
   b55f2:	f7ff f8fb 	bl	b47ec <__errno>
   b55f6:	2322      	movs	r3, #34	; 0x22
   b55f8:	ed9f 0a09 	vldr	s0, [pc, #36]	; b5620 <logf+0x64>
   b55fc:	6003      	str	r3, [r0, #0]
   b55fe:	ecbd 8b02 	vpop	{d8}
   b5602:	bd08      	pop	{r3, pc}
   b5604:	f7ff f8f2 	bl	b47ec <__errno>
   b5608:	ecbd 8b02 	vpop	{d8}
   b560c:	4603      	mov	r3, r0
   b560e:	2221      	movs	r2, #33	; 0x21
   b5610:	601a      	str	r2, [r3, #0]
   b5612:	4804      	ldr	r0, [pc, #16]	; (b5624 <logf+0x68>)
   b5614:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5618:	f001 b8b8 	b.w	b678c <nanf>
   b561c:	2003e618 	.word	0x2003e618
   b5620:	ff800000 	.word	0xff800000
   b5624:	000b7510 	.word	0x000b7510

000b5628 <__ieee754_pow>:
   b5628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b562c:	ec57 6b11 	vmov	r6, r7, d1
   b5630:	ed2d 8b0c 	vpush	{d8-d13}
   b5634:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b5638:	ea5a 0206 	orrs.w	r2, sl, r6
   b563c:	b087      	sub	sp, #28
   b563e:	d03d      	beq.n	b56bc <__ieee754_pow+0x94>
   b5640:	ec55 4b10 	vmov	r4, r5, d0
   b5644:	4972      	ldr	r1, [pc, #456]	; (b5810 <__ieee754_pow+0x1e8>)
   b5646:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b564a:	4588      	cmp	r8, r1
   b564c:	ee10 2a10 	vmov	r2, s0
   b5650:	46a9      	mov	r9, r5
   b5652:	dc2c      	bgt.n	b56ae <__ieee754_pow+0x86>
   b5654:	ee11 3a10 	vmov	r3, s2
   b5658:	46bb      	mov	fp, r7
   b565a:	d036      	beq.n	b56ca <__ieee754_pow+0xa2>
   b565c:	458a      	cmp	sl, r1
   b565e:	dc26      	bgt.n	b56ae <__ieee754_pow+0x86>
   b5660:	496b      	ldr	r1, [pc, #428]	; (b5810 <__ieee754_pow+0x1e8>)
   b5662:	458a      	cmp	sl, r1
   b5664:	d021      	beq.n	b56aa <__ieee754_pow+0x82>
   b5666:	f1b9 0f00 	cmp.w	r9, #0
   b566a:	db39      	blt.n	b56e0 <__ieee754_pow+0xb8>
   b566c:	2100      	movs	r1, #0
   b566e:	9100      	str	r1, [sp, #0]
   b5670:	2b00      	cmp	r3, #0
   b5672:	d151      	bne.n	b5718 <__ieee754_pow+0xf0>
   b5674:	4b66      	ldr	r3, [pc, #408]	; (b5810 <__ieee754_pow+0x1e8>)
   b5676:	459a      	cmp	sl, r3
   b5678:	f000 80a2 	beq.w	b57c0 <__ieee754_pow+0x198>
   b567c:	4b65      	ldr	r3, [pc, #404]	; (b5814 <__ieee754_pow+0x1ec>)
   b567e:	459a      	cmp	sl, r3
   b5680:	f000 80b0 	beq.w	b57e4 <__ieee754_pow+0x1bc>
   b5684:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b5688:	f000 84c0 	beq.w	b600c <__ieee754_pow+0x9e4>
   b568c:	4b62      	ldr	r3, [pc, #392]	; (b5818 <__ieee754_pow+0x1f0>)
   b568e:	459b      	cmp	fp, r3
   b5690:	d142      	bne.n	b5718 <__ieee754_pow+0xf0>
   b5692:	f1b9 0f00 	cmp.w	r9, #0
   b5696:	db3f      	blt.n	b5718 <__ieee754_pow+0xf0>
   b5698:	ec45 4b10 	vmov	d0, r4, r5
   b569c:	b007      	add	sp, #28
   b569e:	ecbd 8b0c 	vpop	{d8-d13}
   b56a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56a6:	f000 bd59 	b.w	b615c <__ieee754_sqrt>
   b56aa:	2b00      	cmp	r3, #0
   b56ac:	d0db      	beq.n	b5666 <__ieee754_pow+0x3e>
   b56ae:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b56b2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b56b6:	ea58 0302 	orrs.w	r3, r8, r2
   b56ba:	d109      	bne.n	b56d0 <__ieee754_pow+0xa8>
   b56bc:	ed9f 0b50 	vldr	d0, [pc, #320]	; b5800 <__ieee754_pow+0x1d8>
   b56c0:	b007      	add	sp, #28
   b56c2:	ecbd 8b0c 	vpop	{d8-d13}
   b56c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b56ca:	b90c      	cbnz	r4, b56d0 <__ieee754_pow+0xa8>
   b56cc:	45c2      	cmp	sl, r8
   b56ce:	ddc7      	ble.n	b5660 <__ieee754_pow+0x38>
   b56d0:	4852      	ldr	r0, [pc, #328]	; (b581c <__ieee754_pow+0x1f4>)
   b56d2:	b007      	add	sp, #28
   b56d4:	ecbd 8b0c 	vpop	{d8-d13}
   b56d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56dc:	f000 bf20 	b.w	b6520 <nan>
   b56e0:	494f      	ldr	r1, [pc, #316]	; (b5820 <__ieee754_pow+0x1f8>)
   b56e2:	458a      	cmp	sl, r1
   b56e4:	f300 8085 	bgt.w	b57f2 <__ieee754_pow+0x1ca>
   b56e8:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b56ec:	458a      	cmp	sl, r1
   b56ee:	dd0f      	ble.n	b5710 <__ieee754_pow+0xe8>
   b56f0:	ea4f 512a 	mov.w	r1, sl, asr #20
   b56f4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b56f8:	2914      	cmp	r1, #20
   b56fa:	f340 849b 	ble.w	b6034 <__ieee754_pow+0xa0c>
   b56fe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b5702:	fa23 f001 	lsr.w	r0, r3, r1
   b5706:	fa00 f101 	lsl.w	r1, r0, r1
   b570a:	4299      	cmp	r1, r3
   b570c:	f000 84ed 	beq.w	b60ea <__ieee754_pow+0xac2>
   b5710:	2100      	movs	r1, #0
   b5712:	9100      	str	r1, [sp, #0]
   b5714:	2b00      	cmp	r3, #0
   b5716:	d0b1      	beq.n	b567c <__ieee754_pow+0x54>
   b5718:	ec45 4b10 	vmov	d0, r4, r5
   b571c:	9202      	str	r2, [sp, #8]
   b571e:	f000 fee9 	bl	b64f4 <fabs>
   b5722:	9a02      	ldr	r2, [sp, #8]
   b5724:	bb5a      	cbnz	r2, b577e <__ieee754_pow+0x156>
   b5726:	f1b8 0f00 	cmp.w	r8, #0
   b572a:	d004      	beq.n	b5736 <__ieee754_pow+0x10e>
   b572c:	4b39      	ldr	r3, [pc, #228]	; (b5814 <__ieee754_pow+0x1ec>)
   b572e:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b5732:	429a      	cmp	r2, r3
   b5734:	d123      	bne.n	b577e <__ieee754_pow+0x156>
   b5736:	f1bb 0f00 	cmp.w	fp, #0
   b573a:	da07      	bge.n	b574c <__ieee754_pow+0x124>
   b573c:	ec53 2b10 	vmov	r2, r3, d0
   b5740:	4934      	ldr	r1, [pc, #208]	; (b5814 <__ieee754_pow+0x1ec>)
   b5742:	2000      	movs	r0, #0
   b5744:	f001 fb0e 	bl	b6d64 <__aeabi_ddiv>
   b5748:	ec41 0b10 	vmov	d0, r0, r1
   b574c:	f1b9 0f00 	cmp.w	r9, #0
   b5750:	dab6      	bge.n	b56c0 <__ieee754_pow+0x98>
   b5752:	9b00      	ldr	r3, [sp, #0]
   b5754:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b5758:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b575c:	ea58 0303 	orrs.w	r3, r8, r3
   b5760:	f040 848d 	bne.w	b607e <__ieee754_pow+0xa56>
   b5764:	ec53 2b10 	vmov	r2, r3, d0
   b5768:	4610      	mov	r0, r2
   b576a:	4619      	mov	r1, r3
   b576c:	f001 f818 	bl	b67a0 <__aeabi_dsub>
   b5770:	4602      	mov	r2, r0
   b5772:	460b      	mov	r3, r1
   b5774:	f001 faf6 	bl	b6d64 <__aeabi_ddiv>
   b5778:	ec41 0b10 	vmov	d0, r0, r1
   b577c:	e7a0      	b.n	b56c0 <__ieee754_pow+0x98>
   b577e:	9a00      	ldr	r2, [sp, #0]
   b5780:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b5784:	3b01      	subs	r3, #1
   b5786:	9304      	str	r3, [sp, #16]
   b5788:	4313      	orrs	r3, r2
   b578a:	d035      	beq.n	b57f8 <__ieee754_pow+0x1d0>
   b578c:	4b25      	ldr	r3, [pc, #148]	; (b5824 <__ieee754_pow+0x1fc>)
   b578e:	459a      	cmp	sl, r3
   b5790:	dd4c      	ble.n	b582c <__ieee754_pow+0x204>
   b5792:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b5796:	459a      	cmp	sl, r3
   b5798:	4b23      	ldr	r3, [pc, #140]	; (b5828 <__ieee754_pow+0x200>)
   b579a:	f340 83db 	ble.w	b5f54 <__ieee754_pow+0x92c>
   b579e:	4598      	cmp	r8, r3
   b57a0:	f340 8360 	ble.w	b5e64 <__ieee754_pow+0x83c>
   b57a4:	f1bb 0f00 	cmp.w	fp, #0
   b57a8:	f340 8360 	ble.w	b5e6c <__ieee754_pow+0x844>
   b57ac:	a316      	add	r3, pc, #88	; (adr r3, b5808 <__ieee754_pow+0x1e0>)
   b57ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57b2:	4610      	mov	r0, r2
   b57b4:	4619      	mov	r1, r3
   b57b6:	f001 f9ab 	bl	b6b10 <__aeabi_dmul>
   b57ba:	ec41 0b10 	vmov	d0, r0, r1
   b57be:	e77f      	b.n	b56c0 <__ieee754_pow+0x98>
   b57c0:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b57c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b57c8:	4313      	orrs	r3, r2
   b57ca:	f43f af77 	beq.w	b56bc <__ieee754_pow+0x94>
   b57ce:	4b16      	ldr	r3, [pc, #88]	; (b5828 <__ieee754_pow+0x200>)
   b57d0:	4598      	cmp	r8, r3
   b57d2:	f340 837a 	ble.w	b5eca <__ieee754_pow+0x8a2>
   b57d6:	f1bb 0f00 	cmp.w	fp, #0
   b57da:	f2c0 8347 	blt.w	b5e6c <__ieee754_pow+0x844>
   b57de:	ec47 6b10 	vmov	d0, r6, r7
   b57e2:	e76d      	b.n	b56c0 <__ieee754_pow+0x98>
   b57e4:	f1bb 0f00 	cmp.w	fp, #0
   b57e8:	f2c0 841a 	blt.w	b6020 <__ieee754_pow+0x9f8>
   b57ec:	ec45 4b10 	vmov	d0, r4, r5
   b57f0:	e766      	b.n	b56c0 <__ieee754_pow+0x98>
   b57f2:	2102      	movs	r1, #2
   b57f4:	9100      	str	r1, [sp, #0]
   b57f6:	e73b      	b.n	b5670 <__ieee754_pow+0x48>
   b57f8:	4622      	mov	r2, r4
   b57fa:	462b      	mov	r3, r5
   b57fc:	e7b4      	b.n	b5768 <__ieee754_pow+0x140>
   b57fe:	bf00      	nop
   b5800:	00000000 	.word	0x00000000
   b5804:	3ff00000 	.word	0x3ff00000
   b5808:	8800759c 	.word	0x8800759c
   b580c:	7e37e43c 	.word	0x7e37e43c
   b5810:	7ff00000 	.word	0x7ff00000
   b5814:	3ff00000 	.word	0x3ff00000
   b5818:	3fe00000 	.word	0x3fe00000
   b581c:	000b7510 	.word	0x000b7510
   b5820:	433fffff 	.word	0x433fffff
   b5824:	41e00000 	.word	0x41e00000
   b5828:	3fefffff 	.word	0x3fefffff
   b582c:	4be4      	ldr	r3, [pc, #912]	; (b5bc0 <__ieee754_pow+0x598>)
   b582e:	ea09 0303 	and.w	r3, r9, r3
   b5832:	2200      	movs	r2, #0
   b5834:	b953      	cbnz	r3, b584c <__ieee754_pow+0x224>
   b5836:	ec51 0b10 	vmov	r0, r1, d0
   b583a:	4be2      	ldr	r3, [pc, #904]	; (b5bc4 <__ieee754_pow+0x59c>)
   b583c:	f001 f968 	bl	b6b10 <__aeabi_dmul>
   b5840:	ec41 0b10 	vmov	d0, r0, r1
   b5844:	ee10 8a90 	vmov	r8, s1
   b5848:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b584c:	ea4f 5328 	mov.w	r3, r8, asr #20
   b5850:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b5854:	189a      	adds	r2, r3, r2
   b5856:	4bdc      	ldr	r3, [pc, #880]	; (b5bc8 <__ieee754_pow+0x5a0>)
   b5858:	9205      	str	r2, [sp, #20]
   b585a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b585e:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b5862:	4598      	cmp	r8, r3
   b5864:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b5868:	dd07      	ble.n	b587a <__ieee754_pow+0x252>
   b586a:	4bd8      	ldr	r3, [pc, #864]	; (b5bcc <__ieee754_pow+0x5a4>)
   b586c:	4598      	cmp	r8, r3
   b586e:	f340 8414 	ble.w	b609a <__ieee754_pow+0xa72>
   b5872:	3201      	adds	r2, #1
   b5874:	9205      	str	r2, [sp, #20]
   b5876:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b587a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b5b60 <__ieee754_pow+0x538>
   b587e:	ed9f 7bba 	vldr	d7, [pc, #744]	; b5b68 <__ieee754_pow+0x540>
   b5882:	ec53 2b16 	vmov	r2, r3, d6
   b5886:	eeb0 ca47 	vmov.f32	s24, s14
   b588a:	eef0 ca67 	vmov.f32	s25, s15
   b588e:	2500      	movs	r5, #0
   b5890:	eeb0 da47 	vmov.f32	s26, s14
   b5894:	eef0 da67 	vmov.f32	s27, s15
   b5898:	ec5b ab10 	vmov	sl, fp, d0
   b589c:	46a3      	mov	fp, r4
   b589e:	4650      	mov	r0, sl
   b58a0:	4659      	mov	r1, fp
   b58a2:	ec43 2b1a 	vmov	d10, r2, r3
   b58a6:	f000 ff7b 	bl	b67a0 <__aeabi_dsub>
   b58aa:	ec53 2b1a 	vmov	r2, r3, d10
   b58ae:	4680      	mov	r8, r0
   b58b0:	4689      	mov	r9, r1
   b58b2:	4650      	mov	r0, sl
   b58b4:	4659      	mov	r1, fp
   b58b6:	f000 ff75 	bl	b67a4 <__adddf3>
   b58ba:	4602      	mov	r2, r0
   b58bc:	460b      	mov	r3, r1
   b58be:	2000      	movs	r0, #0
   b58c0:	49c3      	ldr	r1, [pc, #780]	; (b5bd0 <__ieee754_pow+0x5a8>)
   b58c2:	f001 fa4f 	bl	b6d64 <__aeabi_ddiv>
   b58c6:	ec41 0b1b 	vmov	d11, r0, r1
   b58ca:	4640      	mov	r0, r8
   b58cc:	ec53 2b1b 	vmov	r2, r3, d11
   b58d0:	4649      	mov	r1, r9
   b58d2:	f001 f91d 	bl	b6b10 <__aeabi_dmul>
   b58d6:	ec41 0b18 	vmov	d8, r0, r1
   b58da:	460a      	mov	r2, r1
   b58dc:	4601      	mov	r1, r0
   b58de:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b58e2:	2100      	movs	r1, #0
   b58e4:	9102      	str	r1, [sp, #8]
   b58e6:	1064      	asrs	r4, r4, #1
   b58e8:	ec4b ab19 	vmov	d9, sl, fp
   b58ec:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b58f0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b58f4:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b58f8:	2000      	movs	r0, #0
   b58fa:	1959      	adds	r1, r3, r5
   b58fc:	4604      	mov	r4, r0
   b58fe:	460d      	mov	r5, r1
   b5900:	4602      	mov	r2, r0
   b5902:	460b      	mov	r3, r1
   b5904:	4650      	mov	r0, sl
   b5906:	4659      	mov	r1, fp
   b5908:	f001 f902 	bl	b6b10 <__aeabi_dmul>
   b590c:	4602      	mov	r2, r0
   b590e:	460b      	mov	r3, r1
   b5910:	4640      	mov	r0, r8
   b5912:	4649      	mov	r1, r9
   b5914:	f000 ff44 	bl	b67a0 <__aeabi_dsub>
   b5918:	ec53 2b1a 	vmov	r2, r3, d10
   b591c:	4680      	mov	r8, r0
   b591e:	4689      	mov	r9, r1
   b5920:	4620      	mov	r0, r4
   b5922:	4629      	mov	r1, r5
   b5924:	f000 ff3c 	bl	b67a0 <__aeabi_dsub>
   b5928:	4602      	mov	r2, r0
   b592a:	460b      	mov	r3, r1
   b592c:	ec51 0b19 	vmov	r0, r1, d9
   b5930:	f000 ff36 	bl	b67a0 <__aeabi_dsub>
   b5934:	4652      	mov	r2, sl
   b5936:	465b      	mov	r3, fp
   b5938:	f001 f8ea 	bl	b6b10 <__aeabi_dmul>
   b593c:	4602      	mov	r2, r0
   b593e:	460b      	mov	r3, r1
   b5940:	4640      	mov	r0, r8
   b5942:	4649      	mov	r1, r9
   b5944:	f000 ff2c 	bl	b67a0 <__aeabi_dsub>
   b5948:	ec53 2b1b 	vmov	r2, r3, d11
   b594c:	f001 f8e0 	bl	b6b10 <__aeabi_dmul>
   b5950:	ec53 2b18 	vmov	r2, r3, d8
   b5954:	ec41 0b19 	vmov	d9, r0, r1
   b5958:	ec51 0b18 	vmov	r0, r1, d8
   b595c:	f001 f8d8 	bl	b6b10 <__aeabi_dmul>
   b5960:	a383      	add	r3, pc, #524	; (adr r3, b5b70 <__ieee754_pow+0x548>)
   b5962:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5966:	4604      	mov	r4, r0
   b5968:	460d      	mov	r5, r1
   b596a:	f001 f8d1 	bl	b6b10 <__aeabi_dmul>
   b596e:	a382      	add	r3, pc, #520	; (adr r3, b5b78 <__ieee754_pow+0x550>)
   b5970:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5974:	f000 ff16 	bl	b67a4 <__adddf3>
   b5978:	4622      	mov	r2, r4
   b597a:	462b      	mov	r3, r5
   b597c:	f001 f8c8 	bl	b6b10 <__aeabi_dmul>
   b5980:	a37f      	add	r3, pc, #508	; (adr r3, b5b80 <__ieee754_pow+0x558>)
   b5982:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5986:	f000 ff0d 	bl	b67a4 <__adddf3>
   b598a:	4622      	mov	r2, r4
   b598c:	462b      	mov	r3, r5
   b598e:	f001 f8bf 	bl	b6b10 <__aeabi_dmul>
   b5992:	a37d      	add	r3, pc, #500	; (adr r3, b5b88 <__ieee754_pow+0x560>)
   b5994:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5998:	f000 ff04 	bl	b67a4 <__adddf3>
   b599c:	4622      	mov	r2, r4
   b599e:	462b      	mov	r3, r5
   b59a0:	f001 f8b6 	bl	b6b10 <__aeabi_dmul>
   b59a4:	a37a      	add	r3, pc, #488	; (adr r3, b5b90 <__ieee754_pow+0x568>)
   b59a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59aa:	f000 fefb 	bl	b67a4 <__adddf3>
   b59ae:	4622      	mov	r2, r4
   b59b0:	462b      	mov	r3, r5
   b59b2:	f001 f8ad 	bl	b6b10 <__aeabi_dmul>
   b59b6:	a378      	add	r3, pc, #480	; (adr r3, b5b98 <__ieee754_pow+0x570>)
   b59b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59bc:	f000 fef2 	bl	b67a4 <__adddf3>
   b59c0:	4622      	mov	r2, r4
   b59c2:	4680      	mov	r8, r0
   b59c4:	4689      	mov	r9, r1
   b59c6:	462b      	mov	r3, r5
   b59c8:	4620      	mov	r0, r4
   b59ca:	4629      	mov	r1, r5
   b59cc:	f001 f8a0 	bl	b6b10 <__aeabi_dmul>
   b59d0:	4602      	mov	r2, r0
   b59d2:	460b      	mov	r3, r1
   b59d4:	4640      	mov	r0, r8
   b59d6:	4649      	mov	r1, r9
   b59d8:	f001 f89a 	bl	b6b10 <__aeabi_dmul>
   b59dc:	4652      	mov	r2, sl
   b59de:	4604      	mov	r4, r0
   b59e0:	460d      	mov	r5, r1
   b59e2:	465b      	mov	r3, fp
   b59e4:	ec51 0b18 	vmov	r0, r1, d8
   b59e8:	f000 fedc 	bl	b67a4 <__adddf3>
   b59ec:	ec53 2b19 	vmov	r2, r3, d9
   b59f0:	f001 f88e 	bl	b6b10 <__aeabi_dmul>
   b59f4:	4622      	mov	r2, r4
   b59f6:	462b      	mov	r3, r5
   b59f8:	f000 fed4 	bl	b67a4 <__adddf3>
   b59fc:	4652      	mov	r2, sl
   b59fe:	4680      	mov	r8, r0
   b5a00:	4689      	mov	r9, r1
   b5a02:	465b      	mov	r3, fp
   b5a04:	4650      	mov	r0, sl
   b5a06:	4659      	mov	r1, fp
   b5a08:	f001 f882 	bl	b6b10 <__aeabi_dmul>
   b5a0c:	4602      	mov	r2, r0
   b5a0e:	460b      	mov	r3, r1
   b5a10:	ec43 2b1a 	vmov	d10, r2, r3
   b5a14:	4b6f      	ldr	r3, [pc, #444]	; (b5bd4 <__ieee754_pow+0x5ac>)
   b5a16:	2200      	movs	r2, #0
   b5a18:	f000 fec4 	bl	b67a4 <__adddf3>
   b5a1c:	4642      	mov	r2, r8
   b5a1e:	464b      	mov	r3, r9
   b5a20:	f000 fec0 	bl	b67a4 <__adddf3>
   b5a24:	2400      	movs	r4, #0
   b5a26:	460d      	mov	r5, r1
   b5a28:	4622      	mov	r2, r4
   b5a2a:	462b      	mov	r3, r5
   b5a2c:	4650      	mov	r0, sl
   b5a2e:	4659      	mov	r1, fp
   b5a30:	f001 f86e 	bl	b6b10 <__aeabi_dmul>
   b5a34:	4b67      	ldr	r3, [pc, #412]	; (b5bd4 <__ieee754_pow+0x5ac>)
   b5a36:	4682      	mov	sl, r0
   b5a38:	468b      	mov	fp, r1
   b5a3a:	2200      	movs	r2, #0
   b5a3c:	4620      	mov	r0, r4
   b5a3e:	4629      	mov	r1, r5
   b5a40:	f000 feae 	bl	b67a0 <__aeabi_dsub>
   b5a44:	ec53 2b1a 	vmov	r2, r3, d10
   b5a48:	f000 feaa 	bl	b67a0 <__aeabi_dsub>
   b5a4c:	4602      	mov	r2, r0
   b5a4e:	460b      	mov	r3, r1
   b5a50:	4640      	mov	r0, r8
   b5a52:	4649      	mov	r1, r9
   b5a54:	f000 fea4 	bl	b67a0 <__aeabi_dsub>
   b5a58:	ec53 2b18 	vmov	r2, r3, d8
   b5a5c:	f001 f858 	bl	b6b10 <__aeabi_dmul>
   b5a60:	4622      	mov	r2, r4
   b5a62:	462b      	mov	r3, r5
   b5a64:	4604      	mov	r4, r0
   b5a66:	460d      	mov	r5, r1
   b5a68:	ec51 0b19 	vmov	r0, r1, d9
   b5a6c:	f001 f850 	bl	b6b10 <__aeabi_dmul>
   b5a70:	4602      	mov	r2, r0
   b5a72:	460b      	mov	r3, r1
   b5a74:	4620      	mov	r0, r4
   b5a76:	4629      	mov	r1, r5
   b5a78:	f000 fe94 	bl	b67a4 <__adddf3>
   b5a7c:	4680      	mov	r8, r0
   b5a7e:	4689      	mov	r9, r1
   b5a80:	4642      	mov	r2, r8
   b5a82:	464b      	mov	r3, r9
   b5a84:	4650      	mov	r0, sl
   b5a86:	4659      	mov	r1, fp
   b5a88:	f000 fe8c 	bl	b67a4 <__adddf3>
   b5a8c:	a344      	add	r3, pc, #272	; (adr r3, b5ba0 <__ieee754_pow+0x578>)
   b5a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a92:	2000      	movs	r0, #0
   b5a94:	4604      	mov	r4, r0
   b5a96:	460d      	mov	r5, r1
   b5a98:	f001 f83a 	bl	b6b10 <__aeabi_dmul>
   b5a9c:	4652      	mov	r2, sl
   b5a9e:	ec41 0b19 	vmov	d9, r0, r1
   b5aa2:	465b      	mov	r3, fp
   b5aa4:	4620      	mov	r0, r4
   b5aa6:	4629      	mov	r1, r5
   b5aa8:	f000 fe7a 	bl	b67a0 <__aeabi_dsub>
   b5aac:	4602      	mov	r2, r0
   b5aae:	460b      	mov	r3, r1
   b5ab0:	4640      	mov	r0, r8
   b5ab2:	4649      	mov	r1, r9
   b5ab4:	f000 fe74 	bl	b67a0 <__aeabi_dsub>
   b5ab8:	a33b      	add	r3, pc, #236	; (adr r3, b5ba8 <__ieee754_pow+0x580>)
   b5aba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5abe:	f001 f827 	bl	b6b10 <__aeabi_dmul>
   b5ac2:	4602      	mov	r2, r0
   b5ac4:	460b      	mov	r3, r1
   b5ac6:	4620      	mov	r0, r4
   b5ac8:	4629      	mov	r1, r5
   b5aca:	4614      	mov	r4, r2
   b5acc:	461d      	mov	r5, r3
   b5ace:	a338      	add	r3, pc, #224	; (adr r3, b5bb0 <__ieee754_pow+0x588>)
   b5ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5ad4:	f001 f81c 	bl	b6b10 <__aeabi_dmul>
   b5ad8:	4602      	mov	r2, r0
   b5ada:	460b      	mov	r3, r1
   b5adc:	4620      	mov	r0, r4
   b5ade:	4629      	mov	r1, r5
   b5ae0:	f000 fe60 	bl	b67a4 <__adddf3>
   b5ae4:	ec53 2b1d 	vmov	r2, r3, d13
   b5ae8:	f000 fe5c 	bl	b67a4 <__adddf3>
   b5aec:	4680      	mov	r8, r0
   b5aee:	9805      	ldr	r0, [sp, #20]
   b5af0:	4689      	mov	r9, r1
   b5af2:	f000 ffa3 	bl	b6a3c <__aeabi_i2d>
   b5af6:	4642      	mov	r2, r8
   b5af8:	4682      	mov	sl, r0
   b5afa:	468b      	mov	fp, r1
   b5afc:	464b      	mov	r3, r9
   b5afe:	ec51 0b19 	vmov	r0, r1, d9
   b5b02:	f000 fe4f 	bl	b67a4 <__adddf3>
   b5b06:	ec53 2b1c 	vmov	r2, r3, d12
   b5b0a:	f000 fe4b 	bl	b67a4 <__adddf3>
   b5b0e:	4652      	mov	r2, sl
   b5b10:	465b      	mov	r3, fp
   b5b12:	f000 fe47 	bl	b67a4 <__adddf3>
   b5b16:	4652      	mov	r2, sl
   b5b18:	465b      	mov	r3, fp
   b5b1a:	2000      	movs	r0, #0
   b5b1c:	4604      	mov	r4, r0
   b5b1e:	460d      	mov	r5, r1
   b5b20:	f000 fe3e 	bl	b67a0 <__aeabi_dsub>
   b5b24:	ec53 2b1c 	vmov	r2, r3, d12
   b5b28:	f000 fe3a 	bl	b67a0 <__aeabi_dsub>
   b5b2c:	ec53 2b19 	vmov	r2, r3, d9
   b5b30:	f000 fe36 	bl	b67a0 <__aeabi_dsub>
   b5b34:	4602      	mov	r2, r0
   b5b36:	460b      	mov	r3, r1
   b5b38:	4640      	mov	r0, r8
   b5b3a:	4649      	mov	r1, r9
   b5b3c:	f000 fe30 	bl	b67a0 <__aeabi_dsub>
   b5b40:	9b00      	ldr	r3, [sp, #0]
   b5b42:	9a04      	ldr	r2, [sp, #16]
   b5b44:	3b01      	subs	r3, #1
   b5b46:	4313      	orrs	r3, r2
   b5b48:	4682      	mov	sl, r0
   b5b4a:	468b      	mov	fp, r1
   b5b4c:	f040 81b6 	bne.w	b5ebc <__ieee754_pow+0x894>
   b5b50:	ed9f 7b19 	vldr	d7, [pc, #100]	; b5bb8 <__ieee754_pow+0x590>
   b5b54:	eeb0 8a47 	vmov.f32	s16, s14
   b5b58:	eef0 8a67 	vmov.f32	s17, s15
   b5b5c:	e03c      	b.n	b5bd8 <__ieee754_pow+0x5b0>
   b5b5e:	bf00      	nop
   b5b60:	00000000 	.word	0x00000000
   b5b64:	3ff00000 	.word	0x3ff00000
	...
   b5b70:	4a454eef 	.word	0x4a454eef
   b5b74:	3fca7e28 	.word	0x3fca7e28
   b5b78:	93c9db65 	.word	0x93c9db65
   b5b7c:	3fcd864a 	.word	0x3fcd864a
   b5b80:	a91d4101 	.word	0xa91d4101
   b5b84:	3fd17460 	.word	0x3fd17460
   b5b88:	518f264d 	.word	0x518f264d
   b5b8c:	3fd55555 	.word	0x3fd55555
   b5b90:	db6fabff 	.word	0xdb6fabff
   b5b94:	3fdb6db6 	.word	0x3fdb6db6
   b5b98:	33333303 	.word	0x33333303
   b5b9c:	3fe33333 	.word	0x3fe33333
   b5ba0:	e0000000 	.word	0xe0000000
   b5ba4:	3feec709 	.word	0x3feec709
   b5ba8:	dc3a03fd 	.word	0xdc3a03fd
   b5bac:	3feec709 	.word	0x3feec709
   b5bb0:	145b01f5 	.word	0x145b01f5
   b5bb4:	be3e2fe0 	.word	0xbe3e2fe0
   b5bb8:	00000000 	.word	0x00000000
   b5bbc:	bff00000 	.word	0xbff00000
   b5bc0:	7ff00000 	.word	0x7ff00000
   b5bc4:	43400000 	.word	0x43400000
   b5bc8:	0003988e 	.word	0x0003988e
   b5bcc:	000bb679 	.word	0x000bb679
   b5bd0:	3ff00000 	.word	0x3ff00000
   b5bd4:	40080000 	.word	0x40080000
   b5bd8:	2300      	movs	r3, #0
   b5bda:	e9cd 6700 	strd	r6, r7, [sp]
   b5bde:	9300      	str	r3, [sp, #0]
   b5be0:	e9dd 8900 	ldrd	r8, r9, [sp]
   b5be4:	4630      	mov	r0, r6
   b5be6:	4642      	mov	r2, r8
   b5be8:	464b      	mov	r3, r9
   b5bea:	4639      	mov	r1, r7
   b5bec:	f000 fdd8 	bl	b67a0 <__aeabi_dsub>
   b5bf0:	4622      	mov	r2, r4
   b5bf2:	462b      	mov	r3, r5
   b5bf4:	f000 ff8c 	bl	b6b10 <__aeabi_dmul>
   b5bf8:	4632      	mov	r2, r6
   b5bfa:	463b      	mov	r3, r7
   b5bfc:	4606      	mov	r6, r0
   b5bfe:	460f      	mov	r7, r1
   b5c00:	4650      	mov	r0, sl
   b5c02:	4659      	mov	r1, fp
   b5c04:	f000 ff84 	bl	b6b10 <__aeabi_dmul>
   b5c08:	4602      	mov	r2, r0
   b5c0a:	460b      	mov	r3, r1
   b5c0c:	4630      	mov	r0, r6
   b5c0e:	4639      	mov	r1, r7
   b5c10:	f000 fdc8 	bl	b67a4 <__adddf3>
   b5c14:	4642      	mov	r2, r8
   b5c16:	464b      	mov	r3, r9
   b5c18:	4606      	mov	r6, r0
   b5c1a:	460f      	mov	r7, r1
   b5c1c:	4620      	mov	r0, r4
   b5c1e:	4629      	mov	r1, r5
   b5c20:	f000 ff76 	bl	b6b10 <__aeabi_dmul>
   b5c24:	4604      	mov	r4, r0
   b5c26:	460d      	mov	r5, r1
   b5c28:	462b      	mov	r3, r5
   b5c2a:	4630      	mov	r0, r6
   b5c2c:	4639      	mov	r1, r7
   b5c2e:	4622      	mov	r2, r4
   b5c30:	f000 fdb8 	bl	b67a4 <__adddf3>
   b5c34:	4bc2      	ldr	r3, [pc, #776]	; (b5f40 <__ieee754_pow+0x918>)
   b5c36:	4299      	cmp	r1, r3
   b5c38:	4680      	mov	r8, r0
   b5c3a:	4689      	mov	r9, r1
   b5c3c:	468a      	mov	sl, r1
   b5c3e:	f340 8118 	ble.w	b5e72 <__ieee754_pow+0x84a>
   b5c42:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b5c46:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b5c4a:	4303      	orrs	r3, r0
   b5c4c:	f040 8207 	bne.w	b605e <__ieee754_pow+0xa36>
   b5c50:	a3a3      	add	r3, pc, #652	; (adr r3, b5ee0 <__ieee754_pow+0x8b8>)
   b5c52:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5c56:	4630      	mov	r0, r6
   b5c58:	4639      	mov	r1, r7
   b5c5a:	f000 fda3 	bl	b67a4 <__adddf3>
   b5c5e:	4602      	mov	r2, r0
   b5c60:	460b      	mov	r3, r1
   b5c62:	4640      	mov	r0, r8
   b5c64:	4649      	mov	r1, r9
   b5c66:	4690      	mov	r8, r2
   b5c68:	4699      	mov	r9, r3
   b5c6a:	4622      	mov	r2, r4
   b5c6c:	462b      	mov	r3, r5
   b5c6e:	f000 fd97 	bl	b67a0 <__aeabi_dsub>
   b5c72:	4602      	mov	r2, r0
   b5c74:	460b      	mov	r3, r1
   b5c76:	4640      	mov	r0, r8
   b5c78:	4649      	mov	r1, r9
   b5c7a:	f001 f9d9 	bl	b7030 <__aeabi_dcmpgt>
   b5c7e:	2800      	cmp	r0, #0
   b5c80:	f040 81ed 	bne.w	b605e <__ieee754_pow+0xa36>
   b5c84:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b5c88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b5c8c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b5c90:	fa42 f303 	asr.w	r3, r2, r3
   b5c94:	4453      	add	r3, sl
   b5c96:	49ab      	ldr	r1, [pc, #684]	; (b5f44 <__ieee754_pow+0x91c>)
   b5c98:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b5c9c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b5ca0:	fa41 fc02 	asr.w	ip, r1, r2
   b5ca4:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b5ca8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5cac:	f1c2 0214 	rsb	r2, r2, #20
   b5cb0:	fa41 f202 	asr.w	r2, r1, r2
   b5cb4:	2000      	movs	r0, #0
   b5cb6:	ea23 010c 	bic.w	r1, r3, ip
   b5cba:	f1ba 0f00 	cmp.w	sl, #0
   b5cbe:	9200      	str	r2, [sp, #0]
   b5cc0:	460b      	mov	r3, r1
   b5cc2:	4602      	mov	r2, r0
   b5cc4:	da02      	bge.n	b5ccc <__ieee754_pow+0x6a4>
   b5cc6:	9900      	ldr	r1, [sp, #0]
   b5cc8:	4249      	negs	r1, r1
   b5cca:	9100      	str	r1, [sp, #0]
   b5ccc:	4620      	mov	r0, r4
   b5cce:	4629      	mov	r1, r5
   b5cd0:	f000 fd66 	bl	b67a0 <__aeabi_dsub>
   b5cd4:	9b00      	ldr	r3, [sp, #0]
   b5cd6:	051b      	lsls	r3, r3, #20
   b5cd8:	9302      	str	r3, [sp, #8]
   b5cda:	4602      	mov	r2, r0
   b5cdc:	460b      	mov	r3, r1
   b5cde:	4604      	mov	r4, r0
   b5ce0:	460d      	mov	r5, r1
   b5ce2:	4630      	mov	r0, r6
   b5ce4:	4639      	mov	r1, r7
   b5ce6:	f000 fd5d 	bl	b67a4 <__adddf3>
   b5cea:	4689      	mov	r9, r1
   b5cec:	f04f 0800 	mov.w	r8, #0
   b5cf0:	a37d      	add	r3, pc, #500	; (adr r3, b5ee8 <__ieee754_pow+0x8c0>)
   b5cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5cf6:	4640      	mov	r0, r8
   b5cf8:	4649      	mov	r1, r9
   b5cfa:	f000 ff09 	bl	b6b10 <__aeabi_dmul>
   b5cfe:	4622      	mov	r2, r4
   b5d00:	462b      	mov	r3, r5
   b5d02:	4682      	mov	sl, r0
   b5d04:	468b      	mov	fp, r1
   b5d06:	4640      	mov	r0, r8
   b5d08:	4649      	mov	r1, r9
   b5d0a:	f000 fd49 	bl	b67a0 <__aeabi_dsub>
   b5d0e:	4602      	mov	r2, r0
   b5d10:	460b      	mov	r3, r1
   b5d12:	4630      	mov	r0, r6
   b5d14:	4639      	mov	r1, r7
   b5d16:	f000 fd43 	bl	b67a0 <__aeabi_dsub>
   b5d1a:	a375      	add	r3, pc, #468	; (adr r3, b5ef0 <__ieee754_pow+0x8c8>)
   b5d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d20:	f000 fef6 	bl	b6b10 <__aeabi_dmul>
   b5d24:	a374      	add	r3, pc, #464	; (adr r3, b5ef8 <__ieee754_pow+0x8d0>)
   b5d26:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d2a:	4604      	mov	r4, r0
   b5d2c:	460d      	mov	r5, r1
   b5d2e:	4640      	mov	r0, r8
   b5d30:	4649      	mov	r1, r9
   b5d32:	f000 feed 	bl	b6b10 <__aeabi_dmul>
   b5d36:	4602      	mov	r2, r0
   b5d38:	460b      	mov	r3, r1
   b5d3a:	4620      	mov	r0, r4
   b5d3c:	4629      	mov	r1, r5
   b5d3e:	f000 fd31 	bl	b67a4 <__adddf3>
   b5d42:	4606      	mov	r6, r0
   b5d44:	460f      	mov	r7, r1
   b5d46:	4632      	mov	r2, r6
   b5d48:	463b      	mov	r3, r7
   b5d4a:	4650      	mov	r0, sl
   b5d4c:	4659      	mov	r1, fp
   b5d4e:	f000 fd29 	bl	b67a4 <__adddf3>
   b5d52:	4652      	mov	r2, sl
   b5d54:	465b      	mov	r3, fp
   b5d56:	4604      	mov	r4, r0
   b5d58:	460d      	mov	r5, r1
   b5d5a:	f000 fd21 	bl	b67a0 <__aeabi_dsub>
   b5d5e:	4602      	mov	r2, r0
   b5d60:	460b      	mov	r3, r1
   b5d62:	4630      	mov	r0, r6
   b5d64:	4639      	mov	r1, r7
   b5d66:	f000 fd1b 	bl	b67a0 <__aeabi_dsub>
   b5d6a:	4622      	mov	r2, r4
   b5d6c:	4680      	mov	r8, r0
   b5d6e:	4689      	mov	r9, r1
   b5d70:	462b      	mov	r3, r5
   b5d72:	4620      	mov	r0, r4
   b5d74:	4629      	mov	r1, r5
   b5d76:	f000 fecb 	bl	b6b10 <__aeabi_dmul>
   b5d7a:	a361      	add	r3, pc, #388	; (adr r3, b5f00 <__ieee754_pow+0x8d8>)
   b5d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d80:	4606      	mov	r6, r0
   b5d82:	460f      	mov	r7, r1
   b5d84:	f000 fec4 	bl	b6b10 <__aeabi_dmul>
   b5d88:	a35f      	add	r3, pc, #380	; (adr r3, b5f08 <__ieee754_pow+0x8e0>)
   b5d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d8e:	f000 fd07 	bl	b67a0 <__aeabi_dsub>
   b5d92:	4632      	mov	r2, r6
   b5d94:	463b      	mov	r3, r7
   b5d96:	f000 febb 	bl	b6b10 <__aeabi_dmul>
   b5d9a:	a35d      	add	r3, pc, #372	; (adr r3, b5f10 <__ieee754_pow+0x8e8>)
   b5d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5da0:	f000 fd00 	bl	b67a4 <__adddf3>
   b5da4:	4632      	mov	r2, r6
   b5da6:	463b      	mov	r3, r7
   b5da8:	f000 feb2 	bl	b6b10 <__aeabi_dmul>
   b5dac:	a35a      	add	r3, pc, #360	; (adr r3, b5f18 <__ieee754_pow+0x8f0>)
   b5dae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5db2:	f000 fcf5 	bl	b67a0 <__aeabi_dsub>
   b5db6:	4632      	mov	r2, r6
   b5db8:	463b      	mov	r3, r7
   b5dba:	f000 fea9 	bl	b6b10 <__aeabi_dmul>
   b5dbe:	a358      	add	r3, pc, #352	; (adr r3, b5f20 <__ieee754_pow+0x8f8>)
   b5dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5dc4:	f000 fcee 	bl	b67a4 <__adddf3>
   b5dc8:	4632      	mov	r2, r6
   b5dca:	463b      	mov	r3, r7
   b5dcc:	f000 fea0 	bl	b6b10 <__aeabi_dmul>
   b5dd0:	4602      	mov	r2, r0
   b5dd2:	460b      	mov	r3, r1
   b5dd4:	4620      	mov	r0, r4
   b5dd6:	4629      	mov	r1, r5
   b5dd8:	f000 fce2 	bl	b67a0 <__aeabi_dsub>
   b5ddc:	4606      	mov	r6, r0
   b5dde:	460f      	mov	r7, r1
   b5de0:	4632      	mov	r2, r6
   b5de2:	463b      	mov	r3, r7
   b5de4:	4620      	mov	r0, r4
   b5de6:	4629      	mov	r1, r5
   b5de8:	f000 fe92 	bl	b6b10 <__aeabi_dmul>
   b5dec:	4602      	mov	r2, r0
   b5dee:	460b      	mov	r3, r1
   b5df0:	4630      	mov	r0, r6
   b5df2:	4639      	mov	r1, r7
   b5df4:	4616      	mov	r6, r2
   b5df6:	461f      	mov	r7, r3
   b5df8:	2200      	movs	r2, #0
   b5dfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b5dfe:	f000 fccf 	bl	b67a0 <__aeabi_dsub>
   b5e02:	4602      	mov	r2, r0
   b5e04:	460b      	mov	r3, r1
   b5e06:	4630      	mov	r0, r6
   b5e08:	4639      	mov	r1, r7
   b5e0a:	f000 ffab 	bl	b6d64 <__aeabi_ddiv>
   b5e0e:	4642      	mov	r2, r8
   b5e10:	4606      	mov	r6, r0
   b5e12:	460f      	mov	r7, r1
   b5e14:	464b      	mov	r3, r9
   b5e16:	4620      	mov	r0, r4
   b5e18:	4629      	mov	r1, r5
   b5e1a:	f000 fe79 	bl	b6b10 <__aeabi_dmul>
   b5e1e:	4642      	mov	r2, r8
   b5e20:	464b      	mov	r3, r9
   b5e22:	f000 fcbf 	bl	b67a4 <__adddf3>
   b5e26:	4602      	mov	r2, r0
   b5e28:	460b      	mov	r3, r1
   b5e2a:	4630      	mov	r0, r6
   b5e2c:	4639      	mov	r1, r7
   b5e2e:	f000 fcb7 	bl	b67a0 <__aeabi_dsub>
   b5e32:	4622      	mov	r2, r4
   b5e34:	462b      	mov	r3, r5
   b5e36:	f000 fcb3 	bl	b67a0 <__aeabi_dsub>
   b5e3a:	4602      	mov	r2, r0
   b5e3c:	460b      	mov	r3, r1
   b5e3e:	2000      	movs	r0, #0
   b5e40:	4941      	ldr	r1, [pc, #260]	; (b5f48 <__ieee754_pow+0x920>)
   b5e42:	f000 fcad 	bl	b67a0 <__aeabi_dsub>
   b5e46:	9a02      	ldr	r2, [sp, #8]
   b5e48:	460b      	mov	r3, r1
   b5e4a:	4413      	add	r3, r2
   b5e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b5e50:	f2c0 8143 	blt.w	b60da <__ieee754_pow+0xab2>
   b5e54:	4619      	mov	r1, r3
   b5e56:	ec53 2b18 	vmov	r2, r3, d8
   b5e5a:	f000 fe59 	bl	b6b10 <__aeabi_dmul>
   b5e5e:	ec41 0b10 	vmov	d0, r0, r1
   b5e62:	e42d      	b.n	b56c0 <__ieee754_pow+0x98>
   b5e64:	f1bb 0f00 	cmp.w	fp, #0
   b5e68:	f6ff aca0 	blt.w	b57ac <__ieee754_pow+0x184>
   b5e6c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b5f28 <__ieee754_pow+0x900>
   b5e70:	e426      	b.n	b56c0 <__ieee754_pow+0x98>
   b5e72:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b5f50 <__ieee754_pow+0x928>
   b5e76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b5e7a:	4563      	cmp	r3, ip
   b5e7c:	f340 80e7 	ble.w	b604e <__ieee754_pow+0xa26>
   b5e80:	4b32      	ldr	r3, [pc, #200]	; (b5f4c <__ieee754_pow+0x924>)
   b5e82:	440b      	add	r3, r1
   b5e84:	4303      	orrs	r3, r0
   b5e86:	d10a      	bne.n	b5e9e <__ieee754_pow+0x876>
   b5e88:	4622      	mov	r2, r4
   b5e8a:	462b      	mov	r3, r5
   b5e8c:	f000 fc88 	bl	b67a0 <__aeabi_dsub>
   b5e90:	4632      	mov	r2, r6
   b5e92:	463b      	mov	r3, r7
   b5e94:	f001 f8c2 	bl	b701c <__aeabi_dcmpge>
   b5e98:	2800      	cmp	r0, #0
   b5e9a:	f43f aef3 	beq.w	b5c84 <__ieee754_pow+0x65c>
   b5e9e:	a324      	add	r3, pc, #144	; (adr r3, b5f30 <__ieee754_pow+0x908>)
   b5ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5ea4:	ec51 0b18 	vmov	r0, r1, d8
   b5ea8:	f000 fe32 	bl	b6b10 <__aeabi_dmul>
   b5eac:	a320      	add	r3, pc, #128	; (adr r3, b5f30 <__ieee754_pow+0x908>)
   b5eae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5eb2:	f000 fe2d 	bl	b6b10 <__aeabi_dmul>
   b5eb6:	ec41 0b10 	vmov	d0, r0, r1
   b5eba:	e401      	b.n	b56c0 <__ieee754_pow+0x98>
   b5ebc:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b5f38 <__ieee754_pow+0x910>
   b5ec0:	eeb0 8a47 	vmov.f32	s16, s14
   b5ec4:	eef0 8a67 	vmov.f32	s17, s15
   b5ec8:	e686      	b.n	b5bd8 <__ieee754_pow+0x5b0>
   b5eca:	f1bb 0f00 	cmp.w	fp, #0
   b5ece:	dacd      	bge.n	b5e6c <__ieee754_pow+0x844>
   b5ed0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b5ed4:	ee00 6a10 	vmov	s0, r6
   b5ed8:	ee00 3a90 	vmov	s1, r3
   b5edc:	f7ff bbf0 	b.w	b56c0 <__ieee754_pow+0x98>
   b5ee0:	652b82fe 	.word	0x652b82fe
   b5ee4:	3c971547 	.word	0x3c971547
   b5ee8:	00000000 	.word	0x00000000
   b5eec:	3fe62e43 	.word	0x3fe62e43
   b5ef0:	fefa39ef 	.word	0xfefa39ef
   b5ef4:	3fe62e42 	.word	0x3fe62e42
   b5ef8:	0ca86c39 	.word	0x0ca86c39
   b5efc:	be205c61 	.word	0xbe205c61
   b5f00:	72bea4d0 	.word	0x72bea4d0
   b5f04:	3e663769 	.word	0x3e663769
   b5f08:	c5d26bf1 	.word	0xc5d26bf1
   b5f0c:	3ebbbd41 	.word	0x3ebbbd41
   b5f10:	af25de2c 	.word	0xaf25de2c
   b5f14:	3f11566a 	.word	0x3f11566a
   b5f18:	16bebd93 	.word	0x16bebd93
   b5f1c:	3f66c16c 	.word	0x3f66c16c
   b5f20:	5555553e 	.word	0x5555553e
   b5f24:	3fc55555 	.word	0x3fc55555
	...
   b5f30:	c2f8f359 	.word	0xc2f8f359
   b5f34:	01a56e1f 	.word	0x01a56e1f
   b5f38:	00000000 	.word	0x00000000
   b5f3c:	3ff00000 	.word	0x3ff00000
   b5f40:	408fffff 	.word	0x408fffff
   b5f44:	000fffff 	.word	0x000fffff
   b5f48:	3ff00000 	.word	0x3ff00000
   b5f4c:	3f6f3400 	.word	0x3f6f3400
   b5f50:	4090cbff 	.word	0x4090cbff
   b5f54:	4598      	cmp	r8, r3
   b5f56:	db85      	blt.n	b5e64 <__ieee754_pow+0x83c>
   b5f58:	4b7d      	ldr	r3, [pc, #500]	; (b6150 <__ieee754_pow+0xb28>)
   b5f5a:	4598      	cmp	r8, r3
   b5f5c:	f73f ac22 	bgt.w	b57a4 <__ieee754_pow+0x17c>
   b5f60:	ec51 0b10 	vmov	r0, r1, d0
   b5f64:	4b7a      	ldr	r3, [pc, #488]	; (b6150 <__ieee754_pow+0xb28>)
   b5f66:	2200      	movs	r2, #0
   b5f68:	f000 fc1a 	bl	b67a0 <__aeabi_dsub>
   b5f6c:	a368      	add	r3, pc, #416	; (adr r3, b6110 <__ieee754_pow+0xae8>)
   b5f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5f72:	4604      	mov	r4, r0
   b5f74:	460d      	mov	r5, r1
   b5f76:	f000 fdcb 	bl	b6b10 <__aeabi_dmul>
   b5f7a:	a367      	add	r3, pc, #412	; (adr r3, b6118 <__ieee754_pow+0xaf0>)
   b5f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5f80:	4682      	mov	sl, r0
   b5f82:	468b      	mov	fp, r1
   b5f84:	4620      	mov	r0, r4
   b5f86:	4629      	mov	r1, r5
   b5f88:	f000 fdc2 	bl	b6b10 <__aeabi_dmul>
   b5f8c:	4b71      	ldr	r3, [pc, #452]	; (b6154 <__ieee754_pow+0xb2c>)
   b5f8e:	ec41 0b18 	vmov	d8, r0, r1
   b5f92:	2200      	movs	r2, #0
   b5f94:	4620      	mov	r0, r4
   b5f96:	4629      	mov	r1, r5
   b5f98:	f000 fdba 	bl	b6b10 <__aeabi_dmul>
   b5f9c:	4602      	mov	r2, r0
   b5f9e:	460b      	mov	r3, r1
   b5fa0:	a15f      	add	r1, pc, #380	; (adr r1, b6120 <__ieee754_pow+0xaf8>)
   b5fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5fa6:	f000 fbfb 	bl	b67a0 <__aeabi_dsub>
   b5faa:	4622      	mov	r2, r4
   b5fac:	462b      	mov	r3, r5
   b5fae:	f000 fdaf 	bl	b6b10 <__aeabi_dmul>
   b5fb2:	4602      	mov	r2, r0
   b5fb4:	460b      	mov	r3, r1
   b5fb6:	2000      	movs	r0, #0
   b5fb8:	4967      	ldr	r1, [pc, #412]	; (b6158 <__ieee754_pow+0xb30>)
   b5fba:	f000 fbf1 	bl	b67a0 <__aeabi_dsub>
   b5fbe:	4622      	mov	r2, r4
   b5fc0:	4680      	mov	r8, r0
   b5fc2:	4689      	mov	r9, r1
   b5fc4:	462b      	mov	r3, r5
   b5fc6:	4620      	mov	r0, r4
   b5fc8:	4629      	mov	r1, r5
   b5fca:	f000 fda1 	bl	b6b10 <__aeabi_dmul>
   b5fce:	4602      	mov	r2, r0
   b5fd0:	460b      	mov	r3, r1
   b5fd2:	4640      	mov	r0, r8
   b5fd4:	4649      	mov	r1, r9
   b5fd6:	f000 fd9b 	bl	b6b10 <__aeabi_dmul>
   b5fda:	a353      	add	r3, pc, #332	; (adr r3, b6128 <__ieee754_pow+0xb00>)
   b5fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5fe0:	f000 fd96 	bl	b6b10 <__aeabi_dmul>
   b5fe4:	4602      	mov	r2, r0
   b5fe6:	460b      	mov	r3, r1
   b5fe8:	ec51 0b18 	vmov	r0, r1, d8
   b5fec:	f000 fbd8 	bl	b67a0 <__aeabi_dsub>
   b5ff0:	4680      	mov	r8, r0
   b5ff2:	4689      	mov	r9, r1
   b5ff4:	4642      	mov	r2, r8
   b5ff6:	464b      	mov	r3, r9
   b5ff8:	4650      	mov	r0, sl
   b5ffa:	4659      	mov	r1, fp
   b5ffc:	f000 fbd2 	bl	b67a4 <__adddf3>
   b6000:	2000      	movs	r0, #0
   b6002:	4652      	mov	r2, sl
   b6004:	465b      	mov	r3, fp
   b6006:	4604      	mov	r4, r0
   b6008:	460d      	mov	r5, r1
   b600a:	e591      	b.n	b5b30 <__ieee754_pow+0x508>
   b600c:	4622      	mov	r2, r4
   b600e:	462b      	mov	r3, r5
   b6010:	4620      	mov	r0, r4
   b6012:	4629      	mov	r1, r5
   b6014:	f000 fd7c 	bl	b6b10 <__aeabi_dmul>
   b6018:	ec41 0b10 	vmov	d0, r0, r1
   b601c:	f7ff bb50 	b.w	b56c0 <__ieee754_pow+0x98>
   b6020:	494b      	ldr	r1, [pc, #300]	; (b6150 <__ieee754_pow+0xb28>)
   b6022:	2000      	movs	r0, #0
   b6024:	4622      	mov	r2, r4
   b6026:	462b      	mov	r3, r5
   b6028:	f000 fe9c 	bl	b6d64 <__aeabi_ddiv>
   b602c:	ec41 0b10 	vmov	d0, r0, r1
   b6030:	f7ff bb46 	b.w	b56c0 <__ieee754_pow+0x98>
   b6034:	2b00      	cmp	r3, #0
   b6036:	d144      	bne.n	b60c2 <__ieee754_pow+0xa9a>
   b6038:	f1c1 0114 	rsb	r1, r1, #20
   b603c:	fa4a f001 	asr.w	r0, sl, r1
   b6040:	fa00 f101 	lsl.w	r1, r0, r1
   b6044:	4551      	cmp	r1, sl
   b6046:	d05a      	beq.n	b60fe <__ieee754_pow+0xad6>
   b6048:	9300      	str	r3, [sp, #0]
   b604a:	f7ff bb17 	b.w	b567c <__ieee754_pow+0x54>
   b604e:	4a42      	ldr	r2, [pc, #264]	; (b6158 <__ieee754_pow+0xb30>)
   b6050:	4293      	cmp	r3, r2
   b6052:	dc5b      	bgt.n	b610c <__ieee754_pow+0xae4>
   b6054:	e9dd 1200 	ldrd	r1, r2, [sp]
   b6058:	9102      	str	r1, [sp, #8]
   b605a:	9100      	str	r1, [sp, #0]
   b605c:	e646      	b.n	b5cec <__ieee754_pow+0x6c4>
   b605e:	a334      	add	r3, pc, #208	; (adr r3, b6130 <__ieee754_pow+0xb08>)
   b6060:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6064:	ec51 0b18 	vmov	r0, r1, d8
   b6068:	f000 fd52 	bl	b6b10 <__aeabi_dmul>
   b606c:	a330      	add	r3, pc, #192	; (adr r3, b6130 <__ieee754_pow+0xb08>)
   b606e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6072:	f000 fd4d 	bl	b6b10 <__aeabi_dmul>
   b6076:	ec41 0b10 	vmov	d0, r0, r1
   b607a:	f7ff bb21 	b.w	b56c0 <__ieee754_pow+0x98>
   b607e:	9b00      	ldr	r3, [sp, #0]
   b6080:	2b01      	cmp	r3, #1
   b6082:	f47f ab1d 	bne.w	b56c0 <__ieee754_pow+0x98>
   b6086:	ee10 1a90 	vmov	r1, s1
   b608a:	ee10 2a10 	vmov	r2, s0
   b608e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6092:	ec43 2b10 	vmov	d0, r2, r3
   b6096:	f7ff bb13 	b.w	b56c0 <__ieee754_pow+0x98>
   b609a:	ed9f 7b27 	vldr	d7, [pc, #156]	; b6138 <__ieee754_pow+0xb10>
   b609e:	eeb0 ca47 	vmov.f32	s24, s14
   b60a2:	eef0 ca67 	vmov.f32	s25, s15
   b60a6:	ed9f 7b26 	vldr	d7, [pc, #152]	; b6140 <__ieee754_pow+0xb18>
   b60aa:	eeb0 da47 	vmov.f32	s26, s14
   b60ae:	eef0 da67 	vmov.f32	s27, s15
   b60b2:	ed9f 7b25 	vldr	d7, [pc, #148]	; b6148 <__ieee754_pow+0xb20>
   b60b6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b60ba:	ec53 2b17 	vmov	r2, r3, d7
   b60be:	f7ff bbeb 	b.w	b5898 <__ieee754_pow+0x270>
   b60c2:	ec45 4b10 	vmov	d0, r4, r5
   b60c6:	9200      	str	r2, [sp, #0]
   b60c8:	f000 fa14 	bl	b64f4 <fabs>
   b60cc:	9a00      	ldr	r2, [sp, #0]
   b60ce:	2a00      	cmp	r2, #0
   b60d0:	f47f ab92 	bne.w	b57f8 <__ieee754_pow+0x1d0>
   b60d4:	9200      	str	r2, [sp, #0]
   b60d6:	f7ff bb26 	b.w	b5726 <__ieee754_pow+0xfe>
   b60da:	ec41 0b10 	vmov	d0, r0, r1
   b60de:	9800      	ldr	r0, [sp, #0]
   b60e0:	f000 fac2 	bl	b6668 <scalbn>
   b60e4:	ec51 0b10 	vmov	r0, r1, d0
   b60e8:	e6b5      	b.n	b5e56 <__ieee754_pow+0x82e>
   b60ea:	f000 0001 	and.w	r0, r0, #1
   b60ee:	f1c0 0102 	rsb	r1, r0, #2
   b60f2:	9100      	str	r1, [sp, #0]
   b60f4:	2b00      	cmp	r3, #0
   b60f6:	f43f aac1 	beq.w	b567c <__ieee754_pow+0x54>
   b60fa:	f7ff bb0d 	b.w	b5718 <__ieee754_pow+0xf0>
   b60fe:	f000 0001 	and.w	r0, r0, #1
   b6102:	f1c0 0302 	rsb	r3, r0, #2
   b6106:	9300      	str	r3, [sp, #0]
   b6108:	f7ff bab8 	b.w	b567c <__ieee754_pow+0x54>
   b610c:	151b      	asrs	r3, r3, #20
   b610e:	e5bb      	b.n	b5c88 <__ieee754_pow+0x660>
   b6110:	60000000 	.word	0x60000000
   b6114:	3ff71547 	.word	0x3ff71547
   b6118:	f85ddf44 	.word	0xf85ddf44
   b611c:	3e54ae0b 	.word	0x3e54ae0b
   b6120:	55555555 	.word	0x55555555
   b6124:	3fd55555 	.word	0x3fd55555
   b6128:	652b82fe 	.word	0x652b82fe
   b612c:	3ff71547 	.word	0x3ff71547
   b6130:	8800759c 	.word	0x8800759c
   b6134:	7e37e43c 	.word	0x7e37e43c
   b6138:	40000000 	.word	0x40000000
   b613c:	3fe2b803 	.word	0x3fe2b803
   b6140:	43cfd006 	.word	0x43cfd006
   b6144:	3e4cfdeb 	.word	0x3e4cfdeb
   b6148:	00000000 	.word	0x00000000
   b614c:	3ff80000 	.word	0x3ff80000
   b6150:	3ff00000 	.word	0x3ff00000
   b6154:	3fd00000 	.word	0x3fd00000
   b6158:	3fe00000 	.word	0x3fe00000

000b615c <__ieee754_sqrt>:
   b615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6160:	4a63      	ldr	r2, [pc, #396]	; (b62f0 <__ieee754_sqrt+0x194>)
   b6162:	ec55 4b10 	vmov	r4, r5, d0
   b6166:	43aa      	bics	r2, r5
   b6168:	f000 809f 	beq.w	b62aa <__ieee754_sqrt+0x14e>
   b616c:	2d00      	cmp	r5, #0
   b616e:	ee10 ca10 	vmov	ip, s0
   b6172:	462b      	mov	r3, r5
   b6174:	dd54      	ble.n	b6220 <__ieee754_sqrt+0xc4>
   b6176:	1529      	asrs	r1, r5, #20
   b6178:	d063      	beq.n	b6242 <__ieee754_sqrt+0xe6>
   b617a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b617e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b6182:	07c9      	lsls	r1, r1, #31
   b6184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6188:	d404      	bmi.n	b6194 <__ieee754_sqrt+0x38>
   b618a:	005b      	lsls	r3, r3, #1
   b618c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b6190:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6194:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b6198:	2600      	movs	r6, #0
   b619a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b619e:	107f      	asrs	r7, r7, #1
   b61a0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b61a4:	f04f 0e16 	mov.w	lr, #22
   b61a8:	4634      	mov	r4, r6
   b61aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b61ae:	18a1      	adds	r1, r4, r2
   b61b0:	4299      	cmp	r1, r3
   b61b2:	dc02      	bgt.n	b61ba <__ieee754_sqrt+0x5e>
   b61b4:	1a5b      	subs	r3, r3, r1
   b61b6:	188c      	adds	r4, r1, r2
   b61b8:	4416      	add	r6, r2
   b61ba:	005b      	lsls	r3, r3, #1
   b61bc:	f1be 0e01 	subs.w	lr, lr, #1
   b61c0:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b61c4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b61c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b61cc:	d1ef      	bne.n	b61ae <__ieee754_sqrt+0x52>
   b61ce:	4675      	mov	r5, lr
   b61d0:	2020      	movs	r0, #32
   b61d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b61d6:	e00a      	b.n	b61ee <__ieee754_sqrt+0x92>
   b61d8:	d044      	beq.n	b6264 <__ieee754_sqrt+0x108>
   b61da:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b61de:	3801      	subs	r0, #1
   b61e0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b61e4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b61e8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b61ec:	d043      	beq.n	b6276 <__ieee754_sqrt+0x11a>
   b61ee:	42a3      	cmp	r3, r4
   b61f0:	eb02 010e 	add.w	r1, r2, lr
   b61f4:	ddf0      	ble.n	b61d8 <__ieee754_sqrt+0x7c>
   b61f6:	2900      	cmp	r1, #0
   b61f8:	eb01 0e02 	add.w	lr, r1, r2
   b61fc:	db0a      	blt.n	b6214 <__ieee754_sqrt+0xb8>
   b61fe:	46a0      	mov	r8, r4
   b6200:	1b1b      	subs	r3, r3, r4
   b6202:	4561      	cmp	r1, ip
   b6204:	bf88      	it	hi
   b6206:	f103 33ff 	addhi.w	r3, r3, #4294967295
   b620a:	ebac 0c01 	sub.w	ip, ip, r1
   b620e:	4415      	add	r5, r2
   b6210:	4644      	mov	r4, r8
   b6212:	e7e2      	b.n	b61da <__ieee754_sqrt+0x7e>
   b6214:	f1be 0f00 	cmp.w	lr, #0
   b6218:	dbf1      	blt.n	b61fe <__ieee754_sqrt+0xa2>
   b621a:	f104 0801 	add.w	r8, r4, #1
   b621e:	e7ef      	b.n	b6200 <__ieee754_sqrt+0xa4>
   b6220:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b6224:	4322      	orrs	r2, r4
   b6226:	d038      	beq.n	b629a <__ieee754_sqrt+0x13e>
   b6228:	2d00      	cmp	r5, #0
   b622a:	d14e      	bne.n	b62ca <__ieee754_sqrt+0x16e>
   b622c:	4629      	mov	r1, r5
   b622e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b6232:	3915      	subs	r1, #21
   b6234:	4613      	mov	r3, r2
   b6236:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b623a:	2a00      	cmp	r2, #0
   b623c:	d0f7      	beq.n	b622e <__ieee754_sqrt+0xd2>
   b623e:	02d6      	lsls	r6, r2, #11
   b6240:	d450      	bmi.n	b62e4 <__ieee754_sqrt+0x188>
   b6242:	2000      	movs	r0, #0
   b6244:	005b      	lsls	r3, r3, #1
   b6246:	02dd      	lsls	r5, r3, #11
   b6248:	4604      	mov	r4, r0
   b624a:	f100 0001 	add.w	r0, r0, #1
   b624e:	d5f9      	bpl.n	b6244 <__ieee754_sqrt+0xe8>
   b6250:	461a      	mov	r2, r3
   b6252:	4663      	mov	r3, ip
   b6254:	fa0c fc00 	lsl.w	ip, ip, r0
   b6258:	f1c0 0020 	rsb	r0, r0, #32
   b625c:	40c3      	lsrs	r3, r0
   b625e:	1b09      	subs	r1, r1, r4
   b6260:	4313      	orrs	r3, r2
   b6262:	e78a      	b.n	b617a <__ieee754_sqrt+0x1e>
   b6264:	4561      	cmp	r1, ip
   b6266:	d8b8      	bhi.n	b61da <__ieee754_sqrt+0x7e>
   b6268:	2900      	cmp	r1, #0
   b626a:	eb01 0e02 	add.w	lr, r1, r2
   b626e:	dbd1      	blt.n	b6214 <__ieee754_sqrt+0xb8>
   b6270:	4698      	mov	r8, r3
   b6272:	2300      	movs	r3, #0
   b6274:	e7c9      	b.n	b620a <__ieee754_sqrt+0xae>
   b6276:	ea53 030c 	orrs.w	r3, r3, ip
   b627a:	d110      	bne.n	b629e <__ieee754_sqrt+0x142>
   b627c:	0868      	lsrs	r0, r5, #1
   b627e:	1071      	asrs	r1, r6, #1
   b6280:	07f3      	lsls	r3, r6, #31
   b6282:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b6286:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b628a:	bf48      	it	mi
   b628c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b6290:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b6294:	4602      	mov	r2, r0
   b6296:	ec43 2b10 	vmov	d0, r2, r3
   b629a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b629e:	1c6a      	adds	r2, r5, #1
   b62a0:	bf16      	itet	ne
   b62a2:	1c68      	addne	r0, r5, #1
   b62a4:	3601      	addeq	r6, #1
   b62a6:	0840      	lsrne	r0, r0, #1
   b62a8:	e7e9      	b.n	b627e <__ieee754_sqrt+0x122>
   b62aa:	ee10 2a10 	vmov	r2, s0
   b62ae:	ee10 0a10 	vmov	r0, s0
   b62b2:	462b      	mov	r3, r5
   b62b4:	4629      	mov	r1, r5
   b62b6:	f000 fc2b 	bl	b6b10 <__aeabi_dmul>
   b62ba:	4622      	mov	r2, r4
   b62bc:	462b      	mov	r3, r5
   b62be:	f000 fa71 	bl	b67a4 <__adddf3>
   b62c2:	ec41 0b10 	vmov	d0, r0, r1
   b62c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b62ca:	ee10 2a10 	vmov	r2, s0
   b62ce:	4620      	mov	r0, r4
   b62d0:	4629      	mov	r1, r5
   b62d2:	f000 fa65 	bl	b67a0 <__aeabi_dsub>
   b62d6:	4602      	mov	r2, r0
   b62d8:	460b      	mov	r3, r1
   b62da:	f000 fd43 	bl	b6d64 <__aeabi_ddiv>
   b62de:	ec41 0b10 	vmov	d0, r0, r1
   b62e2:	e7da      	b.n	b629a <__ieee754_sqrt+0x13e>
   b62e4:	4663      	mov	r3, ip
   b62e6:	2020      	movs	r0, #32
   b62e8:	f04f 34ff 	mov.w	r4, #4294967295
   b62ec:	e7b6      	b.n	b625c <__ieee754_sqrt+0x100>
   b62ee:	bf00      	nop
   b62f0:	7ff00000 	.word	0x7ff00000

000b62f4 <__ieee754_logf>:
   b62f4:	ee10 3a10 	vmov	r3, s0
   b62f8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   b62fc:	d02e      	beq.n	b635c <__ieee754_logf+0x68>
   b62fe:	2b00      	cmp	r3, #0
   b6300:	db33      	blt.n	b636a <__ieee754_logf+0x76>
   b6302:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   b6306:	da40      	bge.n	b638a <__ieee754_logf+0x96>
   b6308:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   b630c:	db34      	blt.n	b6378 <__ieee754_logf+0x84>
   b630e:	f04f 0c00 	mov.w	ip, #0
   b6312:	4868      	ldr	r0, [pc, #416]	; (b64b4 <__ieee754_logf+0x1c0>)
   b6314:	f3c3 0116 	ubfx	r1, r3, #0, #23
   b6318:	4408      	add	r0, r1
   b631a:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   b631e:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   b6322:	430a      	orrs	r2, r1
   b6324:	15db      	asrs	r3, r3, #23
   b6326:	ee00 2a10 	vmov	s0, r2
   b632a:	3b7f      	subs	r3, #127	; 0x7f
   b632c:	4a62      	ldr	r2, [pc, #392]	; (b64b8 <__ieee754_logf+0x1c4>)
   b632e:	4463      	add	r3, ip
   b6330:	f101 0c0f 	add.w	ip, r1, #15
   b6334:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b6338:	ea0c 0202 	and.w	r2, ip, r2
   b633c:	ee30 0a67 	vsub.f32	s0, s0, s15
   b6340:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   b6344:	bb22      	cbnz	r2, b6390 <__ieee754_logf+0x9c>
   b6346:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b634a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b634e:	d160      	bne.n	b6412 <__ieee754_logf+0x11e>
   b6350:	2b00      	cmp	r3, #0
   b6352:	f040 8092 	bne.w	b647a <__ieee754_logf+0x186>
   b6356:	ed9f 0a59 	vldr	s0, [pc, #356]	; b64bc <__ieee754_logf+0x1c8>
   b635a:	4770      	bx	lr
   b635c:	ed9f 7a58 	vldr	s14, [pc, #352]	; b64c0 <__ieee754_logf+0x1cc>
   b6360:	eddf 7a56 	vldr	s15, [pc, #344]	; b64bc <__ieee754_logf+0x1c8>
   b6364:	ee87 0a27 	vdiv.f32	s0, s14, s15
   b6368:	4770      	bx	lr
   b636a:	ee70 7a40 	vsub.f32	s15, s0, s0
   b636e:	ed9f 7a53 	vldr	s14, [pc, #332]	; b64bc <__ieee754_logf+0x1c8>
   b6372:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b6376:	4770      	bx	lr
   b6378:	eddf 7a52 	vldr	s15, [pc, #328]	; b64c4 <__ieee754_logf+0x1d0>
   b637c:	ee60 7a27 	vmul.f32	s15, s0, s15
   b6380:	f06f 0c18 	mvn.w	ip, #24
   b6384:	ee17 3a90 	vmov	r3, s15
   b6388:	e7c3      	b.n	b6312 <__ieee754_logf+0x1e>
   b638a:	ee30 0a00 	vadd.f32	s0, s0, s0
   b638e:	4770      	bx	lr
   b6390:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   b6394:	ee70 7a27 	vadd.f32	s15, s0, s15
   b6398:	ee07 3a10 	vmov	s14, r3
   b639c:	ee80 4a27 	vdiv.f32	s8, s0, s15
   b63a0:	4849      	ldr	r0, [pc, #292]	; (b64c8 <__ieee754_logf+0x1d4>)
   b63a2:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   b63a6:	4408      	add	r0, r1
   b63a8:	f502 7222 	add.w	r2, r2, #648	; 0x288
   b63ac:	4302      	orrs	r2, r0
   b63ae:	2a00      	cmp	r2, #0
   b63b0:	ed9f 3a46 	vldr	s6, [pc, #280]	; b64cc <__ieee754_logf+0x1d8>
   b63b4:	eddf 4a46 	vldr	s9, [pc, #280]	; b64d0 <__ieee754_logf+0x1dc>
   b63b8:	eddf 5a46 	vldr	s11, [pc, #280]	; b64d4 <__ieee754_logf+0x1e0>
   b63bc:	eddf 3a46 	vldr	s7, [pc, #280]	; b64d8 <__ieee754_logf+0x1e4>
   b63c0:	ed9f 5a46 	vldr	s10, [pc, #280]	; b64dc <__ieee754_logf+0x1e8>
   b63c4:	eddf 7a46 	vldr	s15, [pc, #280]	; b64e0 <__ieee754_logf+0x1ec>
   b63c8:	eddf 6a46 	vldr	s13, [pc, #280]	; b64e4 <__ieee754_logf+0x1f0>
   b63cc:	ee24 6a04 	vmul.f32	s12, s8, s8
   b63d0:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   b63d4:	ee26 7a06 	vmul.f32	s14, s12, s12
   b63d8:	eee7 4a03 	vfma.f32	s9, s14, s6
   b63dc:	eea7 5a23 	vfma.f32	s10, s14, s7
   b63e0:	eee4 5a87 	vfma.f32	s11, s9, s14
   b63e4:	eee5 6a07 	vfma.f32	s13, s10, s14
   b63e8:	eee5 7a87 	vfma.f32	s15, s11, s14
   b63ec:	ee67 7a86 	vmul.f32	s15, s15, s12
   b63f0:	eee6 7a87 	vfma.f32	s15, s13, s14
   b63f4:	dd2a      	ble.n	b644c <__ieee754_logf+0x158>
   b63f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   b63fa:	ee20 7a07 	vmul.f32	s14, s0, s14
   b63fe:	ee27 7a00 	vmul.f32	s14, s14, s0
   b6402:	bb4b      	cbnz	r3, b6458 <__ieee754_logf+0x164>
   b6404:	ee77 7a87 	vadd.f32	s15, s15, s14
   b6408:	eea7 7ac4 	vfms.f32	s14, s15, s8
   b640c:	ee30 0a47 	vsub.f32	s0, s0, s14
   b6410:	4770      	bx	lr
   b6412:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   b6416:	eddf 6a34 	vldr	s13, [pc, #208]	; b64e8 <__ieee754_logf+0x1f4>
   b641a:	eef0 7a47 	vmov.f32	s15, s14
   b641e:	eee0 7a66 	vfms.f32	s15, s0, s13
   b6422:	ee20 7a00 	vmul.f32	s14, s0, s0
   b6426:	ee27 7a27 	vmul.f32	s14, s14, s15
   b642a:	2b00      	cmp	r3, #0
   b642c:	d0ee      	beq.n	b640c <__ieee754_logf+0x118>
   b642e:	ee07 3a90 	vmov	s15, r3
   b6432:	ed9f 6a2e 	vldr	s12, [pc, #184]	; b64ec <__ieee754_logf+0x1f8>
   b6436:	eddf 6a2e 	vldr	s13, [pc, #184]	; b64f0 <__ieee754_logf+0x1fc>
   b643a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b643e:	eea7 7ac6 	vfms.f32	s14, s15, s12
   b6442:	ee37 0a40 	vsub.f32	s0, s14, s0
   b6446:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   b644a:	4770      	bx	lr
   b644c:	bb13      	cbnz	r3, b6494 <__ieee754_logf+0x1a0>
   b644e:	ee70 7a67 	vsub.f32	s15, s0, s15
   b6452:	eea7 0ac4 	vfms.f32	s0, s15, s8
   b6456:	4770      	bx	lr
   b6458:	eddf 6a24 	vldr	s13, [pc, #144]	; b64ec <__ieee754_logf+0x1f8>
   b645c:	ed9f 6a24 	vldr	s12, [pc, #144]	; b64f0 <__ieee754_logf+0x1fc>
   b6460:	ee77 7a87 	vadd.f32	s15, s15, s14
   b6464:	ee62 6aa6 	vmul.f32	s13, s5, s13
   b6468:	eee7 6a84 	vfma.f32	s13, s15, s8
   b646c:	ee37 7a66 	vsub.f32	s14, s14, s13
   b6470:	ee37 0a40 	vsub.f32	s0, s14, s0
   b6474:	ee92 0a86 	vfnms.f32	s0, s5, s12
   b6478:	4770      	bx	lr
   b647a:	ee07 3a90 	vmov	s15, r3
   b647e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; b64ec <__ieee754_logf+0x1f8>
   b6482:	ed9f 7a1b 	vldr	s14, [pc, #108]	; b64f0 <__ieee754_logf+0x1fc>
   b6486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b648a:	ee27 0a80 	vmul.f32	s0, s15, s0
   b648e:	eea7 0a87 	vfma.f32	s0, s15, s14
   b6492:	4770      	bx	lr
   b6494:	ed9f 7a15 	vldr	s14, [pc, #84]	; b64ec <__ieee754_logf+0x1f8>
   b6498:	eddf 6a15 	vldr	s13, [pc, #84]	; b64f0 <__ieee754_logf+0x1fc>
   b649c:	ee70 7a67 	vsub.f32	s15, s0, s15
   b64a0:	ee27 7a62 	vnmul.f32	s14, s14, s5
   b64a4:	eea7 7a84 	vfma.f32	s14, s15, s8
   b64a8:	ee37 0a40 	vsub.f32	s0, s14, s0
   b64ac:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   b64b0:	4770      	bx	lr
   b64b2:	bf00      	nop
   b64b4:	004afb20 	.word	0x004afb20
   b64b8:	007ffff0 	.word	0x007ffff0
   b64bc:	00000000 	.word	0x00000000
   b64c0:	cc000000 	.word	0xcc000000
   b64c4:	4c000000 	.word	0x4c000000
   b64c8:	ffcf5c30 	.word	0xffcf5c30
   b64cc:	3e178897 	.word	0x3e178897
   b64d0:	3e3a3325 	.word	0x3e3a3325
   b64d4:	3e924925 	.word	0x3e924925
   b64d8:	3e1cd04f 	.word	0x3e1cd04f
   b64dc:	3e638e29 	.word	0x3e638e29
   b64e0:	3f2aaaab 	.word	0x3f2aaaab
   b64e4:	3ecccccd 	.word	0x3ecccccd
   b64e8:	3eaaaaab 	.word	0x3eaaaaab
   b64ec:	3717f7d1 	.word	0x3717f7d1
   b64f0:	3f317180 	.word	0x3f317180

000b64f4 <fabs>:
   b64f4:	ec51 0b10 	vmov	r0, r1, d0
   b64f8:	ee10 2a10 	vmov	r2, s0
   b64fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b6500:	ec43 2b10 	vmov	d0, r2, r3
   b6504:	4770      	bx	lr
   b6506:	bf00      	nop

000b6508 <finite>:
   b6508:	b082      	sub	sp, #8
   b650a:	ed8d 0b00 	vstr	d0, [sp]
   b650e:	9801      	ldr	r0, [sp, #4]
   b6510:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b6514:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b6518:	0fc0      	lsrs	r0, r0, #31
   b651a:	b002      	add	sp, #8
   b651c:	4770      	bx	lr
   b651e:	bf00      	nop

000b6520 <nan>:
   b6520:	ed9f 0b01 	vldr	d0, [pc, #4]	; b6528 <nan+0x8>
   b6524:	4770      	bx	lr
   b6526:	bf00      	nop
   b6528:	00000000 	.word	0x00000000
   b652c:	7ff80000 	.word	0x7ff80000

000b6530 <rint>:
   b6530:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6532:	ec53 2b10 	vmov	r2, r3, d0
   b6536:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b653a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b653e:	2913      	cmp	r1, #19
   b6540:	ee10 0a10 	vmov	r0, s0
   b6544:	b083      	sub	sp, #12
   b6546:	461c      	mov	r4, r3
   b6548:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b654c:	dc3a      	bgt.n	b65c4 <rint+0x94>
   b654e:	2900      	cmp	r1, #0
   b6550:	db30      	blt.n	b65b4 <rint+0x84>
   b6552:	4d42      	ldr	r5, [pc, #264]	; (b665c <rint+0x12c>)
   b6554:	fa45 fc01 	asr.w	ip, r5, r1
   b6558:	ea03 050c 	and.w	r5, r3, ip
   b655c:	4315      	orrs	r5, r2
   b655e:	d02d      	beq.n	b65bc <rint+0x8c>
   b6560:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b6564:	4318      	orrs	r0, r3
   b6566:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b656a:	d00c      	beq.n	b6586 <rint+0x56>
   b656c:	ea24 0c0c 	bic.w	ip, r4, ip
   b6570:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b6574:	2913      	cmp	r1, #19
   b6576:	fa44 f101 	asr.w	r1, r4, r1
   b657a:	bf0c      	ite	eq
   b657c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b6580:	2000      	movne	r0, #0
   b6582:	ea4c 0401 	orr.w	r4, ip, r1
   b6586:	4936      	ldr	r1, [pc, #216]	; (b6660 <rint+0x130>)
   b6588:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b658c:	4623      	mov	r3, r4
   b658e:	e9de 4500 	ldrd	r4, r5, [lr]
   b6592:	4602      	mov	r2, r0
   b6594:	4629      	mov	r1, r5
   b6596:	4620      	mov	r0, r4
   b6598:	f000 f904 	bl	b67a4 <__adddf3>
   b659c:	e9cd 0100 	strd	r0, r1, [sp]
   b65a0:	e9dd 0100 	ldrd	r0, r1, [sp]
   b65a4:	4622      	mov	r2, r4
   b65a6:	462b      	mov	r3, r5
   b65a8:	f000 f8fa 	bl	b67a0 <__aeabi_dsub>
   b65ac:	ec41 0b10 	vmov	d0, r0, r1
   b65b0:	b003      	add	sp, #12
   b65b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b65b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b65b8:	4311      	orrs	r1, r2
   b65ba:	d124      	bne.n	b6606 <rint+0xd6>
   b65bc:	ec43 2b10 	vmov	d0, r2, r3
   b65c0:	b003      	add	sp, #12
   b65c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b65c4:	2933      	cmp	r1, #51	; 0x33
   b65c6:	dd08      	ble.n	b65da <rint+0xaa>
   b65c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b65cc:	d1f6      	bne.n	b65bc <rint+0x8c>
   b65ce:	4619      	mov	r1, r3
   b65d0:	f000 f8e8 	bl	b67a4 <__adddf3>
   b65d4:	ec41 0b10 	vmov	d0, r0, r1
   b65d8:	e7f2      	b.n	b65c0 <rint+0x90>
   b65da:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b65de:	f04f 31ff 	mov.w	r1, #4294967295
   b65e2:	fa21 f10c 	lsr.w	r1, r1, ip
   b65e6:	420a      	tst	r2, r1
   b65e8:	d0e8      	beq.n	b65bc <rint+0x8c>
   b65ea:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b65ee:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b65f2:	d0c8      	beq.n	b6586 <rint+0x56>
   b65f4:	ea20 0303 	bic.w	r3, r0, r3
   b65f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b65fc:	fa40 fc0c 	asr.w	ip, r0, ip
   b6600:	ea43 000c 	orr.w	r0, r3, ip
   b6604:	e7bf      	b.n	b6586 <rint+0x56>
   b6606:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b660a:	4318      	orrs	r0, r3
   b660c:	4a14      	ldr	r2, [pc, #80]	; (b6660 <rint+0x130>)
   b660e:	4243      	negs	r3, r0
   b6610:	4303      	orrs	r3, r0
   b6612:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b6616:	0b1b      	lsrs	r3, r3, #12
   b6618:	0c62      	lsrs	r2, r4, #17
   b661a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b661e:	0452      	lsls	r2, r2, #17
   b6620:	ea43 0702 	orr.w	r7, r3, r2
   b6624:	463b      	mov	r3, r7
   b6626:	e9de 6700 	ldrd	r6, r7, [lr]
   b662a:	ee10 2a10 	vmov	r2, s0
   b662e:	4630      	mov	r0, r6
   b6630:	4639      	mov	r1, r7
   b6632:	f000 f8b7 	bl	b67a4 <__adddf3>
   b6636:	e9cd 0100 	strd	r0, r1, [sp]
   b663a:	4632      	mov	r2, r6
   b663c:	463b      	mov	r3, r7
   b663e:	e9dd 0100 	ldrd	r0, r1, [sp]
   b6642:	f000 f8ad 	bl	b67a0 <__aeabi_dsub>
   b6646:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b664a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b664e:	4602      	mov	r2, r0
   b6650:	ea41 0304 	orr.w	r3, r1, r4
   b6654:	ec43 2b10 	vmov	d0, r2, r3
   b6658:	b003      	add	sp, #12
   b665a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b665c:	000fffff 	.word	0x000fffff
   b6660:	000b7518 	.word	0x000b7518
   b6664:	00000000 	.word	0x00000000

000b6668 <scalbn>:
   b6668:	b538      	push	{r3, r4, r5, lr}
   b666a:	ec53 2b10 	vmov	r2, r3, d0
   b666e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b6672:	4604      	mov	r4, r0
   b6674:	469c      	mov	ip, r3
   b6676:	bb89      	cbnz	r1, b66dc <scalbn+0x74>
   b6678:	ee10 1a10 	vmov	r1, s0
   b667c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b6680:	ea5c 0101 	orrs.w	r1, ip, r1
   b6684:	d029      	beq.n	b66da <scalbn+0x72>
   b6686:	4619      	mov	r1, r3
   b6688:	2200      	movs	r2, #0
   b668a:	4b3d      	ldr	r3, [pc, #244]	; (b6780 <scalbn+0x118>)
   b668c:	4d3d      	ldr	r5, [pc, #244]	; (b6784 <scalbn+0x11c>)
   b668e:	ee10 0a10 	vmov	r0, s0
   b6692:	f000 fa3d 	bl	b6b10 <__aeabi_dmul>
   b6696:	42ac      	cmp	r4, r5
   b6698:	4602      	mov	r2, r0
   b669a:	460b      	mov	r3, r1
   b669c:	db16      	blt.n	b66cc <scalbn+0x64>
   b669e:	468c      	mov	ip, r1
   b66a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b66a4:	3936      	subs	r1, #54	; 0x36
   b66a6:	4421      	add	r1, r4
   b66a8:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b66ac:	4281      	cmp	r1, r0
   b66ae:	dc21      	bgt.n	b66f4 <scalbn+0x8c>
   b66b0:	2900      	cmp	r1, #0
   b66b2:	dc47      	bgt.n	b6744 <scalbn+0xdc>
   b66b4:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b66b8:	da34      	bge.n	b6724 <scalbn+0xbc>
   b66ba:	f24c 3150 	movw	r1, #50000	; 0xc350
   b66be:	428c      	cmp	r4, r1
   b66c0:	dc18      	bgt.n	b66f4 <scalbn+0x8c>
   b66c2:	2b00      	cmp	r3, #0
   b66c4:	a126      	add	r1, pc, #152	; (adr r1, b6760 <scalbn+0xf8>)
   b66c6:	e9d1 0100 	ldrd	r0, r1, [r1]
   b66ca:	db44      	blt.n	b6756 <scalbn+0xee>
   b66cc:	a324      	add	r3, pc, #144	; (adr r3, b6760 <scalbn+0xf8>)
   b66ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   b66d2:	f000 fa1d 	bl	b6b10 <__aeabi_dmul>
   b66d6:	ec41 0b10 	vmov	d0, r0, r1
   b66da:	bd38      	pop	{r3, r4, r5, pc}
   b66dc:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b66e0:	4281      	cmp	r1, r0
   b66e2:	d1e0      	bne.n	b66a6 <scalbn+0x3e>
   b66e4:	ee10 0a10 	vmov	r0, s0
   b66e8:	4619      	mov	r1, r3
   b66ea:	f000 f85b 	bl	b67a4 <__adddf3>
   b66ee:	ec41 0b10 	vmov	d0, r0, r1
   b66f2:	bd38      	pop	{r3, r4, r5, pc}
   b66f4:	2b00      	cmp	r3, #0
   b66f6:	a11c      	add	r1, pc, #112	; (adr r1, b6768 <scalbn+0x100>)
   b66f8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b66fc:	db07      	blt.n	b670e <scalbn+0xa6>
   b66fe:	a31a      	add	r3, pc, #104	; (adr r3, b6768 <scalbn+0x100>)
   b6700:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6704:	f000 fa04 	bl	b6b10 <__aeabi_dmul>
   b6708:	ec41 0b10 	vmov	d0, r0, r1
   b670c:	bd38      	pop	{r3, r4, r5, pc}
   b670e:	a118      	add	r1, pc, #96	; (adr r1, b6770 <scalbn+0x108>)
   b6710:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6714:	a314      	add	r3, pc, #80	; (adr r3, b6768 <scalbn+0x100>)
   b6716:	e9d3 2300 	ldrd	r2, r3, [r3]
   b671a:	f000 f9f9 	bl	b6b10 <__aeabi_dmul>
   b671e:	ec41 0b10 	vmov	d0, r0, r1
   b6722:	e7f3      	b.n	b670c <scalbn+0xa4>
   b6724:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6728:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b672c:	3136      	adds	r1, #54	; 0x36
   b672e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b6732:	4610      	mov	r0, r2
   b6734:	4619      	mov	r1, r3
   b6736:	2200      	movs	r2, #0
   b6738:	4b13      	ldr	r3, [pc, #76]	; (b6788 <scalbn+0x120>)
   b673a:	f000 f9e9 	bl	b6b10 <__aeabi_dmul>
   b673e:	ec41 0b10 	vmov	d0, r0, r1
   b6742:	bd38      	pop	{r3, r4, r5, pc}
   b6744:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6748:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b674c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b6750:	ec43 2b10 	vmov	d0, r2, r3
   b6754:	bd38      	pop	{r3, r4, r5, pc}
   b6756:	a108      	add	r1, pc, #32	; (adr r1, b6778 <scalbn+0x110>)
   b6758:	e9d1 0100 	ldrd	r0, r1, [r1]
   b675c:	e7b6      	b.n	b66cc <scalbn+0x64>
   b675e:	bf00      	nop
   b6760:	c2f8f359 	.word	0xc2f8f359
   b6764:	01a56e1f 	.word	0x01a56e1f
   b6768:	8800759c 	.word	0x8800759c
   b676c:	7e37e43c 	.word	0x7e37e43c
   b6770:	8800759c 	.word	0x8800759c
   b6774:	fe37e43c 	.word	0xfe37e43c
   b6778:	c2f8f359 	.word	0xc2f8f359
   b677c:	81a56e1f 	.word	0x81a56e1f
   b6780:	43500000 	.word	0x43500000
   b6784:	ffff3cb0 	.word	0xffff3cb0
   b6788:	3c900000 	.word	0x3c900000

000b678c <nanf>:
   b678c:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6794 <nanf+0x8>
   b6790:	4770      	bx	lr
   b6792:	bf00      	nop
   b6794:	7fc00000 	.word	0x7fc00000

000b6798 <__aeabi_drsub>:
   b6798:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b679c:	e002      	b.n	b67a4 <__adddf3>
   b679e:	bf00      	nop

000b67a0 <__aeabi_dsub>:
   b67a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b67a4 <__adddf3>:
   b67a4:	b530      	push	{r4, r5, lr}
   b67a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b67aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b67ae:	ea94 0f05 	teq	r4, r5
   b67b2:	bf08      	it	eq
   b67b4:	ea90 0f02 	teqeq	r0, r2
   b67b8:	bf1f      	itttt	ne
   b67ba:	ea54 0c00 	orrsne.w	ip, r4, r0
   b67be:	ea55 0c02 	orrsne.w	ip, r5, r2
   b67c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b67c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b67ca:	f000 80e2 	beq.w	b6992 <__adddf3+0x1ee>
   b67ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b67d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b67d6:	bfb8      	it	lt
   b67d8:	426d      	neglt	r5, r5
   b67da:	dd0c      	ble.n	b67f6 <__adddf3+0x52>
   b67dc:	442c      	add	r4, r5
   b67de:	ea80 0202 	eor.w	r2, r0, r2
   b67e2:	ea81 0303 	eor.w	r3, r1, r3
   b67e6:	ea82 0000 	eor.w	r0, r2, r0
   b67ea:	ea83 0101 	eor.w	r1, r3, r1
   b67ee:	ea80 0202 	eor.w	r2, r0, r2
   b67f2:	ea81 0303 	eor.w	r3, r1, r3
   b67f6:	2d36      	cmp	r5, #54	; 0x36
   b67f8:	bf88      	it	hi
   b67fa:	bd30      	pophi	{r4, r5, pc}
   b67fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6800:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6804:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6808:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b680c:	d002      	beq.n	b6814 <__adddf3+0x70>
   b680e:	4240      	negs	r0, r0
   b6810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6814:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6818:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b681c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6820:	d002      	beq.n	b6828 <__adddf3+0x84>
   b6822:	4252      	negs	r2, r2
   b6824:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6828:	ea94 0f05 	teq	r4, r5
   b682c:	f000 80a7 	beq.w	b697e <__adddf3+0x1da>
   b6830:	f1a4 0401 	sub.w	r4, r4, #1
   b6834:	f1d5 0e20 	rsbs	lr, r5, #32
   b6838:	db0d      	blt.n	b6856 <__adddf3+0xb2>
   b683a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b683e:	fa22 f205 	lsr.w	r2, r2, r5
   b6842:	1880      	adds	r0, r0, r2
   b6844:	f141 0100 	adc.w	r1, r1, #0
   b6848:	fa03 f20e 	lsl.w	r2, r3, lr
   b684c:	1880      	adds	r0, r0, r2
   b684e:	fa43 f305 	asr.w	r3, r3, r5
   b6852:	4159      	adcs	r1, r3
   b6854:	e00e      	b.n	b6874 <__adddf3+0xd0>
   b6856:	f1a5 0520 	sub.w	r5, r5, #32
   b685a:	f10e 0e20 	add.w	lr, lr, #32
   b685e:	2a01      	cmp	r2, #1
   b6860:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6864:	bf28      	it	cs
   b6866:	f04c 0c02 	orrcs.w	ip, ip, #2
   b686a:	fa43 f305 	asr.w	r3, r3, r5
   b686e:	18c0      	adds	r0, r0, r3
   b6870:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6874:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6878:	d507      	bpl.n	b688a <__adddf3+0xe6>
   b687a:	f04f 0e00 	mov.w	lr, #0
   b687e:	f1dc 0c00 	rsbs	ip, ip, #0
   b6882:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6886:	eb6e 0101 	sbc.w	r1, lr, r1
   b688a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b688e:	d31b      	bcc.n	b68c8 <__adddf3+0x124>
   b6890:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6894:	d30c      	bcc.n	b68b0 <__adddf3+0x10c>
   b6896:	0849      	lsrs	r1, r1, #1
   b6898:	ea5f 0030 	movs.w	r0, r0, rrx
   b689c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b68a0:	f104 0401 	add.w	r4, r4, #1
   b68a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b68a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b68ac:	f080 809a 	bcs.w	b69e4 <__adddf3+0x240>
   b68b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b68b4:	bf08      	it	eq
   b68b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b68ba:	f150 0000 	adcs.w	r0, r0, #0
   b68be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b68c2:	ea41 0105 	orr.w	r1, r1, r5
   b68c6:	bd30      	pop	{r4, r5, pc}
   b68c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b68cc:	4140      	adcs	r0, r0
   b68ce:	eb41 0101 	adc.w	r1, r1, r1
   b68d2:	3c01      	subs	r4, #1
   b68d4:	bf28      	it	cs
   b68d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b68da:	d2e9      	bcs.n	b68b0 <__adddf3+0x10c>
   b68dc:	f091 0f00 	teq	r1, #0
   b68e0:	bf04      	itt	eq
   b68e2:	4601      	moveq	r1, r0
   b68e4:	2000      	moveq	r0, #0
   b68e6:	fab1 f381 	clz	r3, r1
   b68ea:	bf08      	it	eq
   b68ec:	3320      	addeq	r3, #32
   b68ee:	f1a3 030b 	sub.w	r3, r3, #11
   b68f2:	f1b3 0220 	subs.w	r2, r3, #32
   b68f6:	da0c      	bge.n	b6912 <__adddf3+0x16e>
   b68f8:	320c      	adds	r2, #12
   b68fa:	dd08      	ble.n	b690e <__adddf3+0x16a>
   b68fc:	f102 0c14 	add.w	ip, r2, #20
   b6900:	f1c2 020c 	rsb	r2, r2, #12
   b6904:	fa01 f00c 	lsl.w	r0, r1, ip
   b6908:	fa21 f102 	lsr.w	r1, r1, r2
   b690c:	e00c      	b.n	b6928 <__adddf3+0x184>
   b690e:	f102 0214 	add.w	r2, r2, #20
   b6912:	bfd8      	it	le
   b6914:	f1c2 0c20 	rsble	ip, r2, #32
   b6918:	fa01 f102 	lsl.w	r1, r1, r2
   b691c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6920:	bfdc      	itt	le
   b6922:	ea41 010c 	orrle.w	r1, r1, ip
   b6926:	4090      	lslle	r0, r2
   b6928:	1ae4      	subs	r4, r4, r3
   b692a:	bfa2      	ittt	ge
   b692c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6930:	4329      	orrge	r1, r5
   b6932:	bd30      	popge	{r4, r5, pc}
   b6934:	ea6f 0404 	mvn.w	r4, r4
   b6938:	3c1f      	subs	r4, #31
   b693a:	da1c      	bge.n	b6976 <__adddf3+0x1d2>
   b693c:	340c      	adds	r4, #12
   b693e:	dc0e      	bgt.n	b695e <__adddf3+0x1ba>
   b6940:	f104 0414 	add.w	r4, r4, #20
   b6944:	f1c4 0220 	rsb	r2, r4, #32
   b6948:	fa20 f004 	lsr.w	r0, r0, r4
   b694c:	fa01 f302 	lsl.w	r3, r1, r2
   b6950:	ea40 0003 	orr.w	r0, r0, r3
   b6954:	fa21 f304 	lsr.w	r3, r1, r4
   b6958:	ea45 0103 	orr.w	r1, r5, r3
   b695c:	bd30      	pop	{r4, r5, pc}
   b695e:	f1c4 040c 	rsb	r4, r4, #12
   b6962:	f1c4 0220 	rsb	r2, r4, #32
   b6966:	fa20 f002 	lsr.w	r0, r0, r2
   b696a:	fa01 f304 	lsl.w	r3, r1, r4
   b696e:	ea40 0003 	orr.w	r0, r0, r3
   b6972:	4629      	mov	r1, r5
   b6974:	bd30      	pop	{r4, r5, pc}
   b6976:	fa21 f004 	lsr.w	r0, r1, r4
   b697a:	4629      	mov	r1, r5
   b697c:	bd30      	pop	{r4, r5, pc}
   b697e:	f094 0f00 	teq	r4, #0
   b6982:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6986:	bf06      	itte	eq
   b6988:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b698c:	3401      	addeq	r4, #1
   b698e:	3d01      	subne	r5, #1
   b6990:	e74e      	b.n	b6830 <__adddf3+0x8c>
   b6992:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6996:	bf18      	it	ne
   b6998:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b699c:	d029      	beq.n	b69f2 <__adddf3+0x24e>
   b699e:	ea94 0f05 	teq	r4, r5
   b69a2:	bf08      	it	eq
   b69a4:	ea90 0f02 	teqeq	r0, r2
   b69a8:	d005      	beq.n	b69b6 <__adddf3+0x212>
   b69aa:	ea54 0c00 	orrs.w	ip, r4, r0
   b69ae:	bf04      	itt	eq
   b69b0:	4619      	moveq	r1, r3
   b69b2:	4610      	moveq	r0, r2
   b69b4:	bd30      	pop	{r4, r5, pc}
   b69b6:	ea91 0f03 	teq	r1, r3
   b69ba:	bf1e      	ittt	ne
   b69bc:	2100      	movne	r1, #0
   b69be:	2000      	movne	r0, #0
   b69c0:	bd30      	popne	{r4, r5, pc}
   b69c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b69c6:	d105      	bne.n	b69d4 <__adddf3+0x230>
   b69c8:	0040      	lsls	r0, r0, #1
   b69ca:	4149      	adcs	r1, r1
   b69cc:	bf28      	it	cs
   b69ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b69d2:	bd30      	pop	{r4, r5, pc}
   b69d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b69d8:	bf3c      	itt	cc
   b69da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b69de:	bd30      	popcc	{r4, r5, pc}
   b69e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b69e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b69e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b69ec:	f04f 0000 	mov.w	r0, #0
   b69f0:	bd30      	pop	{r4, r5, pc}
   b69f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b69f6:	bf1a      	itte	ne
   b69f8:	4619      	movne	r1, r3
   b69fa:	4610      	movne	r0, r2
   b69fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6a00:	bf1c      	itt	ne
   b6a02:	460b      	movne	r3, r1
   b6a04:	4602      	movne	r2, r0
   b6a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6a0a:	bf06      	itte	eq
   b6a0c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6a10:	ea91 0f03 	teqeq	r1, r3
   b6a14:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6a18:	bd30      	pop	{r4, r5, pc}
   b6a1a:	bf00      	nop

000b6a1c <__aeabi_ui2d>:
   b6a1c:	f090 0f00 	teq	r0, #0
   b6a20:	bf04      	itt	eq
   b6a22:	2100      	moveq	r1, #0
   b6a24:	4770      	bxeq	lr
   b6a26:	b530      	push	{r4, r5, lr}
   b6a28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6a2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6a30:	f04f 0500 	mov.w	r5, #0
   b6a34:	f04f 0100 	mov.w	r1, #0
   b6a38:	e750      	b.n	b68dc <__adddf3+0x138>
   b6a3a:	bf00      	nop

000b6a3c <__aeabi_i2d>:
   b6a3c:	f090 0f00 	teq	r0, #0
   b6a40:	bf04      	itt	eq
   b6a42:	2100      	moveq	r1, #0
   b6a44:	4770      	bxeq	lr
   b6a46:	b530      	push	{r4, r5, lr}
   b6a48:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6a4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6a50:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6a54:	bf48      	it	mi
   b6a56:	4240      	negmi	r0, r0
   b6a58:	f04f 0100 	mov.w	r1, #0
   b6a5c:	e73e      	b.n	b68dc <__adddf3+0x138>
   b6a5e:	bf00      	nop

000b6a60 <__aeabi_f2d>:
   b6a60:	0042      	lsls	r2, r0, #1
   b6a62:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6a66:	ea4f 0131 	mov.w	r1, r1, rrx
   b6a6a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6a6e:	bf1f      	itttt	ne
   b6a70:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6a74:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6a78:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6a7c:	4770      	bxne	lr
   b6a7e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6a82:	bf08      	it	eq
   b6a84:	4770      	bxeq	lr
   b6a86:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6a8a:	bf04      	itt	eq
   b6a8c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6a90:	4770      	bxeq	lr
   b6a92:	b530      	push	{r4, r5, lr}
   b6a94:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6a98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6a9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6aa0:	e71c      	b.n	b68dc <__adddf3+0x138>
   b6aa2:	bf00      	nop

000b6aa4 <__aeabi_ul2d>:
   b6aa4:	ea50 0201 	orrs.w	r2, r0, r1
   b6aa8:	bf08      	it	eq
   b6aaa:	4770      	bxeq	lr
   b6aac:	b530      	push	{r4, r5, lr}
   b6aae:	f04f 0500 	mov.w	r5, #0
   b6ab2:	e00a      	b.n	b6aca <__aeabi_l2d+0x16>

000b6ab4 <__aeabi_l2d>:
   b6ab4:	ea50 0201 	orrs.w	r2, r0, r1
   b6ab8:	bf08      	it	eq
   b6aba:	4770      	bxeq	lr
   b6abc:	b530      	push	{r4, r5, lr}
   b6abe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6ac2:	d502      	bpl.n	b6aca <__aeabi_l2d+0x16>
   b6ac4:	4240      	negs	r0, r0
   b6ac6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6aca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6ace:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6ad2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6ad6:	f43f aed8 	beq.w	b688a <__adddf3+0xe6>
   b6ada:	f04f 0203 	mov.w	r2, #3
   b6ade:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6ae2:	bf18      	it	ne
   b6ae4:	3203      	addne	r2, #3
   b6ae6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6aea:	bf18      	it	ne
   b6aec:	3203      	addne	r2, #3
   b6aee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6af2:	f1c2 0320 	rsb	r3, r2, #32
   b6af6:	fa00 fc03 	lsl.w	ip, r0, r3
   b6afa:	fa20 f002 	lsr.w	r0, r0, r2
   b6afe:	fa01 fe03 	lsl.w	lr, r1, r3
   b6b02:	ea40 000e 	orr.w	r0, r0, lr
   b6b06:	fa21 f102 	lsr.w	r1, r1, r2
   b6b0a:	4414      	add	r4, r2
   b6b0c:	e6bd      	b.n	b688a <__adddf3+0xe6>
   b6b0e:	bf00      	nop

000b6b10 <__aeabi_dmul>:
   b6b10:	b570      	push	{r4, r5, r6, lr}
   b6b12:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6b16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6b1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6b1e:	bf1d      	ittte	ne
   b6b20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6b24:	ea94 0f0c 	teqne	r4, ip
   b6b28:	ea95 0f0c 	teqne	r5, ip
   b6b2c:	f000 f8de 	bleq	b6cec <__aeabi_dmul+0x1dc>
   b6b30:	442c      	add	r4, r5
   b6b32:	ea81 0603 	eor.w	r6, r1, r3
   b6b36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6b3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6b3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6b42:	bf18      	it	ne
   b6b44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6b48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6b50:	d038      	beq.n	b6bc4 <__aeabi_dmul+0xb4>
   b6b52:	fba0 ce02 	umull	ip, lr, r0, r2
   b6b56:	f04f 0500 	mov.w	r5, #0
   b6b5a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6b5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6b62:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6b66:	f04f 0600 	mov.w	r6, #0
   b6b6a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6b6e:	f09c 0f00 	teq	ip, #0
   b6b72:	bf18      	it	ne
   b6b74:	f04e 0e01 	orrne.w	lr, lr, #1
   b6b78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6b7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6b80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6b84:	d204      	bcs.n	b6b90 <__aeabi_dmul+0x80>
   b6b86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6b8a:	416d      	adcs	r5, r5
   b6b8c:	eb46 0606 	adc.w	r6, r6, r6
   b6b90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6b94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6b98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6b9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6ba0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6ba4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6ba8:	bf88      	it	hi
   b6baa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6bae:	d81e      	bhi.n	b6bee <__aeabi_dmul+0xde>
   b6bb0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6bb4:	bf08      	it	eq
   b6bb6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6bba:	f150 0000 	adcs.w	r0, r0, #0
   b6bbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6bc2:	bd70      	pop	{r4, r5, r6, pc}
   b6bc4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6bc8:	ea46 0101 	orr.w	r1, r6, r1
   b6bcc:	ea40 0002 	orr.w	r0, r0, r2
   b6bd0:	ea81 0103 	eor.w	r1, r1, r3
   b6bd4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6bd8:	bfc2      	ittt	gt
   b6bda:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6bde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6be2:	bd70      	popgt	{r4, r5, r6, pc}
   b6be4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6be8:	f04f 0e00 	mov.w	lr, #0
   b6bec:	3c01      	subs	r4, #1
   b6bee:	f300 80ab 	bgt.w	b6d48 <__aeabi_dmul+0x238>
   b6bf2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6bf6:	bfde      	ittt	le
   b6bf8:	2000      	movle	r0, #0
   b6bfa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6bfe:	bd70      	pople	{r4, r5, r6, pc}
   b6c00:	f1c4 0400 	rsb	r4, r4, #0
   b6c04:	3c20      	subs	r4, #32
   b6c06:	da35      	bge.n	b6c74 <__aeabi_dmul+0x164>
   b6c08:	340c      	adds	r4, #12
   b6c0a:	dc1b      	bgt.n	b6c44 <__aeabi_dmul+0x134>
   b6c0c:	f104 0414 	add.w	r4, r4, #20
   b6c10:	f1c4 0520 	rsb	r5, r4, #32
   b6c14:	fa00 f305 	lsl.w	r3, r0, r5
   b6c18:	fa20 f004 	lsr.w	r0, r0, r4
   b6c1c:	fa01 f205 	lsl.w	r2, r1, r5
   b6c20:	ea40 0002 	orr.w	r0, r0, r2
   b6c24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6c28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6c2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6c30:	fa21 f604 	lsr.w	r6, r1, r4
   b6c34:	eb42 0106 	adc.w	r1, r2, r6
   b6c38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6c3c:	bf08      	it	eq
   b6c3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6c42:	bd70      	pop	{r4, r5, r6, pc}
   b6c44:	f1c4 040c 	rsb	r4, r4, #12
   b6c48:	f1c4 0520 	rsb	r5, r4, #32
   b6c4c:	fa00 f304 	lsl.w	r3, r0, r4
   b6c50:	fa20 f005 	lsr.w	r0, r0, r5
   b6c54:	fa01 f204 	lsl.w	r2, r1, r4
   b6c58:	ea40 0002 	orr.w	r0, r0, r2
   b6c5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6c60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6c64:	f141 0100 	adc.w	r1, r1, #0
   b6c68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6c6c:	bf08      	it	eq
   b6c6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6c72:	bd70      	pop	{r4, r5, r6, pc}
   b6c74:	f1c4 0520 	rsb	r5, r4, #32
   b6c78:	fa00 f205 	lsl.w	r2, r0, r5
   b6c7c:	ea4e 0e02 	orr.w	lr, lr, r2
   b6c80:	fa20 f304 	lsr.w	r3, r0, r4
   b6c84:	fa01 f205 	lsl.w	r2, r1, r5
   b6c88:	ea43 0302 	orr.w	r3, r3, r2
   b6c8c:	fa21 f004 	lsr.w	r0, r1, r4
   b6c90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6c94:	fa21 f204 	lsr.w	r2, r1, r4
   b6c98:	ea20 0002 	bic.w	r0, r0, r2
   b6c9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6ca0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6ca4:	bf08      	it	eq
   b6ca6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6caa:	bd70      	pop	{r4, r5, r6, pc}
   b6cac:	f094 0f00 	teq	r4, #0
   b6cb0:	d10f      	bne.n	b6cd2 <__aeabi_dmul+0x1c2>
   b6cb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6cb6:	0040      	lsls	r0, r0, #1
   b6cb8:	eb41 0101 	adc.w	r1, r1, r1
   b6cbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6cc0:	bf08      	it	eq
   b6cc2:	3c01      	subeq	r4, #1
   b6cc4:	d0f7      	beq.n	b6cb6 <__aeabi_dmul+0x1a6>
   b6cc6:	ea41 0106 	orr.w	r1, r1, r6
   b6cca:	f095 0f00 	teq	r5, #0
   b6cce:	bf18      	it	ne
   b6cd0:	4770      	bxne	lr
   b6cd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6cd6:	0052      	lsls	r2, r2, #1
   b6cd8:	eb43 0303 	adc.w	r3, r3, r3
   b6cdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6ce0:	bf08      	it	eq
   b6ce2:	3d01      	subeq	r5, #1
   b6ce4:	d0f7      	beq.n	b6cd6 <__aeabi_dmul+0x1c6>
   b6ce6:	ea43 0306 	orr.w	r3, r3, r6
   b6cea:	4770      	bx	lr
   b6cec:	ea94 0f0c 	teq	r4, ip
   b6cf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6cf4:	bf18      	it	ne
   b6cf6:	ea95 0f0c 	teqne	r5, ip
   b6cfa:	d00c      	beq.n	b6d16 <__aeabi_dmul+0x206>
   b6cfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6d00:	bf18      	it	ne
   b6d02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6d06:	d1d1      	bne.n	b6cac <__aeabi_dmul+0x19c>
   b6d08:	ea81 0103 	eor.w	r1, r1, r3
   b6d0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6d10:	f04f 0000 	mov.w	r0, #0
   b6d14:	bd70      	pop	{r4, r5, r6, pc}
   b6d16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6d1a:	bf06      	itte	eq
   b6d1c:	4610      	moveq	r0, r2
   b6d1e:	4619      	moveq	r1, r3
   b6d20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6d24:	d019      	beq.n	b6d5a <__aeabi_dmul+0x24a>
   b6d26:	ea94 0f0c 	teq	r4, ip
   b6d2a:	d102      	bne.n	b6d32 <__aeabi_dmul+0x222>
   b6d2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6d30:	d113      	bne.n	b6d5a <__aeabi_dmul+0x24a>
   b6d32:	ea95 0f0c 	teq	r5, ip
   b6d36:	d105      	bne.n	b6d44 <__aeabi_dmul+0x234>
   b6d38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6d3c:	bf1c      	itt	ne
   b6d3e:	4610      	movne	r0, r2
   b6d40:	4619      	movne	r1, r3
   b6d42:	d10a      	bne.n	b6d5a <__aeabi_dmul+0x24a>
   b6d44:	ea81 0103 	eor.w	r1, r1, r3
   b6d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6d4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6d50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6d54:	f04f 0000 	mov.w	r0, #0
   b6d58:	bd70      	pop	{r4, r5, r6, pc}
   b6d5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6d5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6d62:	bd70      	pop	{r4, r5, r6, pc}

000b6d64 <__aeabi_ddiv>:
   b6d64:	b570      	push	{r4, r5, r6, lr}
   b6d66:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6d6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6d6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6d72:	bf1d      	ittte	ne
   b6d74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6d78:	ea94 0f0c 	teqne	r4, ip
   b6d7c:	ea95 0f0c 	teqne	r5, ip
   b6d80:	f000 f8a7 	bleq	b6ed2 <__aeabi_ddiv+0x16e>
   b6d84:	eba4 0405 	sub.w	r4, r4, r5
   b6d88:	ea81 0e03 	eor.w	lr, r1, r3
   b6d8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6d90:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6d94:	f000 8088 	beq.w	b6ea8 <__aeabi_ddiv+0x144>
   b6d98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6d9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6da0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6da4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6da8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6dac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6db0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6db4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6db8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6dbc:	429d      	cmp	r5, r3
   b6dbe:	bf08      	it	eq
   b6dc0:	4296      	cmpeq	r6, r2
   b6dc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6dc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6dca:	d202      	bcs.n	b6dd2 <__aeabi_ddiv+0x6e>
   b6dcc:	085b      	lsrs	r3, r3, #1
   b6dce:	ea4f 0232 	mov.w	r2, r2, rrx
   b6dd2:	1ab6      	subs	r6, r6, r2
   b6dd4:	eb65 0503 	sbc.w	r5, r5, r3
   b6dd8:	085b      	lsrs	r3, r3, #1
   b6dda:	ea4f 0232 	mov.w	r2, r2, rrx
   b6dde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6de2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6de6:	ebb6 0e02 	subs.w	lr, r6, r2
   b6dea:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6dee:	bf22      	ittt	cs
   b6df0:	1ab6      	subcs	r6, r6, r2
   b6df2:	4675      	movcs	r5, lr
   b6df4:	ea40 000c 	orrcs.w	r0, r0, ip
   b6df8:	085b      	lsrs	r3, r3, #1
   b6dfa:	ea4f 0232 	mov.w	r2, r2, rrx
   b6dfe:	ebb6 0e02 	subs.w	lr, r6, r2
   b6e02:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6e06:	bf22      	ittt	cs
   b6e08:	1ab6      	subcs	r6, r6, r2
   b6e0a:	4675      	movcs	r5, lr
   b6e0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6e10:	085b      	lsrs	r3, r3, #1
   b6e12:	ea4f 0232 	mov.w	r2, r2, rrx
   b6e16:	ebb6 0e02 	subs.w	lr, r6, r2
   b6e1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6e1e:	bf22      	ittt	cs
   b6e20:	1ab6      	subcs	r6, r6, r2
   b6e22:	4675      	movcs	r5, lr
   b6e24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6e28:	085b      	lsrs	r3, r3, #1
   b6e2a:	ea4f 0232 	mov.w	r2, r2, rrx
   b6e2e:	ebb6 0e02 	subs.w	lr, r6, r2
   b6e32:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6e36:	bf22      	ittt	cs
   b6e38:	1ab6      	subcs	r6, r6, r2
   b6e3a:	4675      	movcs	r5, lr
   b6e3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6e40:	ea55 0e06 	orrs.w	lr, r5, r6
   b6e44:	d018      	beq.n	b6e78 <__aeabi_ddiv+0x114>
   b6e46:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6e4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6e4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6e52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6e56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6e5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6e5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6e62:	d1c0      	bne.n	b6de6 <__aeabi_ddiv+0x82>
   b6e64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6e68:	d10b      	bne.n	b6e82 <__aeabi_ddiv+0x11e>
   b6e6a:	ea41 0100 	orr.w	r1, r1, r0
   b6e6e:	f04f 0000 	mov.w	r0, #0
   b6e72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6e76:	e7b6      	b.n	b6de6 <__aeabi_ddiv+0x82>
   b6e78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6e7c:	bf04      	itt	eq
   b6e7e:	4301      	orreq	r1, r0
   b6e80:	2000      	moveq	r0, #0
   b6e82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6e86:	bf88      	it	hi
   b6e88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6e8c:	f63f aeaf 	bhi.w	b6bee <__aeabi_dmul+0xde>
   b6e90:	ebb5 0c03 	subs.w	ip, r5, r3
   b6e94:	bf04      	itt	eq
   b6e96:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6e9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6e9e:	f150 0000 	adcs.w	r0, r0, #0
   b6ea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6ea6:	bd70      	pop	{r4, r5, r6, pc}
   b6ea8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6eac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6eb0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6eb4:	bfc2      	ittt	gt
   b6eb6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6eba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6ebe:	bd70      	popgt	{r4, r5, r6, pc}
   b6ec0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6ec4:	f04f 0e00 	mov.w	lr, #0
   b6ec8:	3c01      	subs	r4, #1
   b6eca:	e690      	b.n	b6bee <__aeabi_dmul+0xde>
   b6ecc:	ea45 0e06 	orr.w	lr, r5, r6
   b6ed0:	e68d      	b.n	b6bee <__aeabi_dmul+0xde>
   b6ed2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6ed6:	ea94 0f0c 	teq	r4, ip
   b6eda:	bf08      	it	eq
   b6edc:	ea95 0f0c 	teqeq	r5, ip
   b6ee0:	f43f af3b 	beq.w	b6d5a <__aeabi_dmul+0x24a>
   b6ee4:	ea94 0f0c 	teq	r4, ip
   b6ee8:	d10a      	bne.n	b6f00 <__aeabi_ddiv+0x19c>
   b6eea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6eee:	f47f af34 	bne.w	b6d5a <__aeabi_dmul+0x24a>
   b6ef2:	ea95 0f0c 	teq	r5, ip
   b6ef6:	f47f af25 	bne.w	b6d44 <__aeabi_dmul+0x234>
   b6efa:	4610      	mov	r0, r2
   b6efc:	4619      	mov	r1, r3
   b6efe:	e72c      	b.n	b6d5a <__aeabi_dmul+0x24a>
   b6f00:	ea95 0f0c 	teq	r5, ip
   b6f04:	d106      	bne.n	b6f14 <__aeabi_ddiv+0x1b0>
   b6f06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6f0a:	f43f aefd 	beq.w	b6d08 <__aeabi_dmul+0x1f8>
   b6f0e:	4610      	mov	r0, r2
   b6f10:	4619      	mov	r1, r3
   b6f12:	e722      	b.n	b6d5a <__aeabi_dmul+0x24a>
   b6f14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6f18:	bf18      	it	ne
   b6f1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6f1e:	f47f aec5 	bne.w	b6cac <__aeabi_dmul+0x19c>
   b6f22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6f26:	f47f af0d 	bne.w	b6d44 <__aeabi_dmul+0x234>
   b6f2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6f2e:	f47f aeeb 	bne.w	b6d08 <__aeabi_dmul+0x1f8>
   b6f32:	e712      	b.n	b6d5a <__aeabi_dmul+0x24a>

000b6f34 <__gedf2>:
   b6f34:	f04f 3cff 	mov.w	ip, #4294967295
   b6f38:	e006      	b.n	b6f48 <__cmpdf2+0x4>
   b6f3a:	bf00      	nop

000b6f3c <__ledf2>:
   b6f3c:	f04f 0c01 	mov.w	ip, #1
   b6f40:	e002      	b.n	b6f48 <__cmpdf2+0x4>
   b6f42:	bf00      	nop

000b6f44 <__cmpdf2>:
   b6f44:	f04f 0c01 	mov.w	ip, #1
   b6f48:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6f4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6f50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6f54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6f58:	bf18      	it	ne
   b6f5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6f5e:	d01b      	beq.n	b6f98 <__cmpdf2+0x54>
   b6f60:	b001      	add	sp, #4
   b6f62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6f66:	bf0c      	ite	eq
   b6f68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6f6c:	ea91 0f03 	teqne	r1, r3
   b6f70:	bf02      	ittt	eq
   b6f72:	ea90 0f02 	teqeq	r0, r2
   b6f76:	2000      	moveq	r0, #0
   b6f78:	4770      	bxeq	lr
   b6f7a:	f110 0f00 	cmn.w	r0, #0
   b6f7e:	ea91 0f03 	teq	r1, r3
   b6f82:	bf58      	it	pl
   b6f84:	4299      	cmppl	r1, r3
   b6f86:	bf08      	it	eq
   b6f88:	4290      	cmpeq	r0, r2
   b6f8a:	bf2c      	ite	cs
   b6f8c:	17d8      	asrcs	r0, r3, #31
   b6f8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6f92:	f040 0001 	orr.w	r0, r0, #1
   b6f96:	4770      	bx	lr
   b6f98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6fa0:	d102      	bne.n	b6fa8 <__cmpdf2+0x64>
   b6fa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6fa6:	d107      	bne.n	b6fb8 <__cmpdf2+0x74>
   b6fa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6fac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6fb0:	d1d6      	bne.n	b6f60 <__cmpdf2+0x1c>
   b6fb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6fb6:	d0d3      	beq.n	b6f60 <__cmpdf2+0x1c>
   b6fb8:	f85d 0b04 	ldr.w	r0, [sp], #4
   b6fbc:	4770      	bx	lr
   b6fbe:	bf00      	nop

000b6fc0 <__aeabi_cdrcmple>:
   b6fc0:	4684      	mov	ip, r0
   b6fc2:	4610      	mov	r0, r2
   b6fc4:	4662      	mov	r2, ip
   b6fc6:	468c      	mov	ip, r1
   b6fc8:	4619      	mov	r1, r3
   b6fca:	4663      	mov	r3, ip
   b6fcc:	e000      	b.n	b6fd0 <__aeabi_cdcmpeq>
   b6fce:	bf00      	nop

000b6fd0 <__aeabi_cdcmpeq>:
   b6fd0:	b501      	push	{r0, lr}
   b6fd2:	f7ff ffb7 	bl	b6f44 <__cmpdf2>
   b6fd6:	2800      	cmp	r0, #0
   b6fd8:	bf48      	it	mi
   b6fda:	f110 0f00 	cmnmi.w	r0, #0
   b6fde:	bd01      	pop	{r0, pc}

000b6fe0 <__aeabi_dcmpeq>:
   b6fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6fe4:	f7ff fff4 	bl	b6fd0 <__aeabi_cdcmpeq>
   b6fe8:	bf0c      	ite	eq
   b6fea:	2001      	moveq	r0, #1
   b6fec:	2000      	movne	r0, #0
   b6fee:	f85d fb08 	ldr.w	pc, [sp], #8
   b6ff2:	bf00      	nop

000b6ff4 <__aeabi_dcmplt>:
   b6ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6ff8:	f7ff ffea 	bl	b6fd0 <__aeabi_cdcmpeq>
   b6ffc:	bf34      	ite	cc
   b6ffe:	2001      	movcc	r0, #1
   b7000:	2000      	movcs	r0, #0
   b7002:	f85d fb08 	ldr.w	pc, [sp], #8
   b7006:	bf00      	nop

000b7008 <__aeabi_dcmple>:
   b7008:	f84d ed08 	str.w	lr, [sp, #-8]!
   b700c:	f7ff ffe0 	bl	b6fd0 <__aeabi_cdcmpeq>
   b7010:	bf94      	ite	ls
   b7012:	2001      	movls	r0, #1
   b7014:	2000      	movhi	r0, #0
   b7016:	f85d fb08 	ldr.w	pc, [sp], #8
   b701a:	bf00      	nop

000b701c <__aeabi_dcmpge>:
   b701c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7020:	f7ff ffce 	bl	b6fc0 <__aeabi_cdrcmple>
   b7024:	bf94      	ite	ls
   b7026:	2001      	movls	r0, #1
   b7028:	2000      	movhi	r0, #0
   b702a:	f85d fb08 	ldr.w	pc, [sp], #8
   b702e:	bf00      	nop

000b7030 <__aeabi_dcmpgt>:
   b7030:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7034:	f7ff ffc4 	bl	b6fc0 <__aeabi_cdrcmple>
   b7038:	bf34      	ite	cc
   b703a:	2001      	movcc	r0, #1
   b703c:	2000      	movcs	r0, #0
   b703e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7042:	bf00      	nop

000b7044 <__aeabi_dcmpun>:
   b7044:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b704c:	d102      	bne.n	b7054 <__aeabi_dcmpun+0x10>
   b704e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7052:	d10a      	bne.n	b706a <__aeabi_dcmpun+0x26>
   b7054:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7058:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b705c:	d102      	bne.n	b7064 <__aeabi_dcmpun+0x20>
   b705e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7062:	d102      	bne.n	b706a <__aeabi_dcmpun+0x26>
   b7064:	f04f 0000 	mov.w	r0, #0
   b7068:	4770      	bx	lr
   b706a:	f04f 0001 	mov.w	r0, #1
   b706e:	4770      	bx	lr

000b7070 <__aeabi_d2iz>:
   b7070:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7074:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7078:	d215      	bcs.n	b70a6 <__aeabi_d2iz+0x36>
   b707a:	d511      	bpl.n	b70a0 <__aeabi_d2iz+0x30>
   b707c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7080:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7084:	d912      	bls.n	b70ac <__aeabi_d2iz+0x3c>
   b7086:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b708a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b708e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7092:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7096:	fa23 f002 	lsr.w	r0, r3, r2
   b709a:	bf18      	it	ne
   b709c:	4240      	negne	r0, r0
   b709e:	4770      	bx	lr
   b70a0:	f04f 0000 	mov.w	r0, #0
   b70a4:	4770      	bx	lr
   b70a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b70aa:	d105      	bne.n	b70b8 <__aeabi_d2iz+0x48>
   b70ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b70b0:	bf08      	it	eq
   b70b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b70b6:	4770      	bx	lr
   b70b8:	f04f 0000 	mov.w	r0, #0
   b70bc:	4770      	bx	lr
   b70be:	bf00      	nop

000b70c0 <__aeabi_d2uiz>:
   b70c0:	004a      	lsls	r2, r1, #1
   b70c2:	d211      	bcs.n	b70e8 <__aeabi_d2uiz+0x28>
   b70c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b70c8:	d211      	bcs.n	b70ee <__aeabi_d2uiz+0x2e>
   b70ca:	d50d      	bpl.n	b70e8 <__aeabi_d2uiz+0x28>
   b70cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b70d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b70d4:	d40e      	bmi.n	b70f4 <__aeabi_d2uiz+0x34>
   b70d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b70da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b70de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b70e2:	fa23 f002 	lsr.w	r0, r3, r2
   b70e6:	4770      	bx	lr
   b70e8:	f04f 0000 	mov.w	r0, #0
   b70ec:	4770      	bx	lr
   b70ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b70f2:	d102      	bne.n	b70fa <__aeabi_d2uiz+0x3a>
   b70f4:	f04f 30ff 	mov.w	r0, #4294967295
   b70f8:	4770      	bx	lr
   b70fa:	f04f 0000 	mov.w	r0, #0
   b70fe:	4770      	bx	lr

000b7100 <__aeabi_d2f>:
   b7100:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7108:	bf24      	itt	cs
   b710a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b710e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b7112:	d90d      	bls.n	b7130 <__aeabi_d2f+0x30>
   b7114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b711c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7128:	bf08      	it	eq
   b712a:	f020 0001 	biceq.w	r0, r0, #1
   b712e:	4770      	bx	lr
   b7130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7134:	d121      	bne.n	b717a <__aeabi_d2f+0x7a>
   b7136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b713a:	bfbc      	itt	lt
   b713c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7140:	4770      	bxlt	lr
   b7142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7146:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b714a:	f1c2 0218 	rsb	r2, r2, #24
   b714e:	f1c2 0c20 	rsb	ip, r2, #32
   b7152:	fa10 f30c 	lsls.w	r3, r0, ip
   b7156:	fa20 f002 	lsr.w	r0, r0, r2
   b715a:	bf18      	it	ne
   b715c:	f040 0001 	orrne.w	r0, r0, #1
   b7160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7168:	fa03 fc0c 	lsl.w	ip, r3, ip
   b716c:	ea40 000c 	orr.w	r0, r0, ip
   b7170:	fa23 f302 	lsr.w	r3, r3, r2
   b7174:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7178:	e7cc      	b.n	b7114 <__aeabi_d2f+0x14>
   b717a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b717e:	d107      	bne.n	b7190 <__aeabi_d2f+0x90>
   b7180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7184:	bf1e      	ittt	ne
   b7186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b718a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b718e:	4770      	bxne	lr
   b7190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b719c:	4770      	bx	lr
   b719e:	bf00      	nop

000b71a0 <atexit>:
   b71a0:	2300      	movs	r3, #0
   b71a2:	4601      	mov	r1, r0
   b71a4:	461a      	mov	r2, r3
   b71a6:	4618      	mov	r0, r3
   b71a8:	f000 b84c 	b.w	b7244 <__register_exitproc>

000b71ac <memcpy>:
   b71ac:	440a      	add	r2, r1
   b71ae:	4291      	cmp	r1, r2
   b71b0:	f100 33ff 	add.w	r3, r0, #4294967295
   b71b4:	d100      	bne.n	b71b8 <memcpy+0xc>
   b71b6:	4770      	bx	lr
   b71b8:	b510      	push	{r4, lr}
   b71ba:	f811 4b01 	ldrb.w	r4, [r1], #1
   b71be:	f803 4f01 	strb.w	r4, [r3, #1]!
   b71c2:	4291      	cmp	r1, r2
   b71c4:	d1f9      	bne.n	b71ba <memcpy+0xe>
   b71c6:	bd10      	pop	{r4, pc}

000b71c8 <memset>:
   b71c8:	4402      	add	r2, r0
   b71ca:	4603      	mov	r3, r0
   b71cc:	4293      	cmp	r3, r2
   b71ce:	d100      	bne.n	b71d2 <memset+0xa>
   b71d0:	4770      	bx	lr
   b71d2:	f803 1b01 	strb.w	r1, [r3], #1
   b71d6:	e7f9      	b.n	b71cc <memset+0x4>

000b71d8 <srand>:
   b71d8:	b538      	push	{r3, r4, r5, lr}
   b71da:	4b10      	ldr	r3, [pc, #64]	; (b721c <srand+0x44>)
   b71dc:	681d      	ldr	r5, [r3, #0]
   b71de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b71e0:	4604      	mov	r4, r0
   b71e2:	b9b3      	cbnz	r3, b7212 <srand+0x3a>
   b71e4:	2018      	movs	r0, #24
   b71e6:	f7fd fae9 	bl	b47bc <malloc>
   b71ea:	4602      	mov	r2, r0
   b71ec:	63a8      	str	r0, [r5, #56]	; 0x38
   b71ee:	b920      	cbnz	r0, b71fa <srand+0x22>
   b71f0:	4b0b      	ldr	r3, [pc, #44]	; (b7220 <srand+0x48>)
   b71f2:	480c      	ldr	r0, [pc, #48]	; (b7224 <srand+0x4c>)
   b71f4:	2142      	movs	r1, #66	; 0x42
   b71f6:	f7fd fb01 	bl	b47fc <__assert_func>
   b71fa:	490b      	ldr	r1, [pc, #44]	; (b7228 <srand+0x50>)
   b71fc:	4b0b      	ldr	r3, [pc, #44]	; (b722c <srand+0x54>)
   b71fe:	e9c0 1300 	strd	r1, r3, [r0]
   b7202:	4b0b      	ldr	r3, [pc, #44]	; (b7230 <srand+0x58>)
   b7204:	6083      	str	r3, [r0, #8]
   b7206:	230b      	movs	r3, #11
   b7208:	8183      	strh	r3, [r0, #12]
   b720a:	2100      	movs	r1, #0
   b720c:	2001      	movs	r0, #1
   b720e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7212:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7214:	2200      	movs	r2, #0
   b7216:	611c      	str	r4, [r3, #16]
   b7218:	615a      	str	r2, [r3, #20]
   b721a:	bd38      	pop	{r3, r4, r5, pc}
   b721c:	2003e61c 	.word	0x2003e61c
   b7220:	000b7528 	.word	0x000b7528
   b7224:	000b753f 	.word	0x000b753f
   b7228:	abcd330e 	.word	0xabcd330e
   b722c:	e66d1234 	.word	0xe66d1234
   b7230:	0005deec 	.word	0x0005deec

000b7234 <strlen>:
   b7234:	4603      	mov	r3, r0
   b7236:	f813 2b01 	ldrb.w	r2, [r3], #1
   b723a:	2a00      	cmp	r2, #0
   b723c:	d1fb      	bne.n	b7236 <strlen+0x2>
   b723e:	1a18      	subs	r0, r3, r0
   b7240:	3801      	subs	r0, #1
   b7242:	4770      	bx	lr

000b7244 <__register_exitproc>:
   b7244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7248:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7304 <__register_exitproc+0xc0>
   b724c:	4606      	mov	r6, r0
   b724e:	f8d8 0000 	ldr.w	r0, [r8]
   b7252:	461f      	mov	r7, r3
   b7254:	460d      	mov	r5, r1
   b7256:	4691      	mov	r9, r2
   b7258:	f000 f856 	bl	b7308 <__retarget_lock_acquire_recursive>
   b725c:	4b25      	ldr	r3, [pc, #148]	; (b72f4 <__register_exitproc+0xb0>)
   b725e:	681c      	ldr	r4, [r3, #0]
   b7260:	b934      	cbnz	r4, b7270 <__register_exitproc+0x2c>
   b7262:	4c25      	ldr	r4, [pc, #148]	; (b72f8 <__register_exitproc+0xb4>)
   b7264:	601c      	str	r4, [r3, #0]
   b7266:	4b25      	ldr	r3, [pc, #148]	; (b72fc <__register_exitproc+0xb8>)
   b7268:	b113      	cbz	r3, b7270 <__register_exitproc+0x2c>
   b726a:	681b      	ldr	r3, [r3, #0]
   b726c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7270:	6863      	ldr	r3, [r4, #4]
   b7272:	2b1f      	cmp	r3, #31
   b7274:	dd07      	ble.n	b7286 <__register_exitproc+0x42>
   b7276:	f8d8 0000 	ldr.w	r0, [r8]
   b727a:	f000 f847 	bl	b730c <__retarget_lock_release_recursive>
   b727e:	f04f 30ff 	mov.w	r0, #4294967295
   b7282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7286:	b34e      	cbz	r6, b72dc <__register_exitproc+0x98>
   b7288:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b728c:	b988      	cbnz	r0, b72b2 <__register_exitproc+0x6e>
   b728e:	4b1c      	ldr	r3, [pc, #112]	; (b7300 <__register_exitproc+0xbc>)
   b7290:	b923      	cbnz	r3, b729c <__register_exitproc+0x58>
   b7292:	f8d8 0000 	ldr.w	r0, [r8]
   b7296:	f000 f838 	bl	b730a <__retarget_lock_release>
   b729a:	e7f0      	b.n	b727e <__register_exitproc+0x3a>
   b729c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b72a0:	f7fd fa8c 	bl	b47bc <malloc>
   b72a4:	2800      	cmp	r0, #0
   b72a6:	d0f4      	beq.n	b7292 <__register_exitproc+0x4e>
   b72a8:	2300      	movs	r3, #0
   b72aa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b72ae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b72b2:	6863      	ldr	r3, [r4, #4]
   b72b4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b72b8:	2201      	movs	r2, #1
   b72ba:	409a      	lsls	r2, r3
   b72bc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b72c0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b72c4:	4313      	orrs	r3, r2
   b72c6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b72ca:	2e02      	cmp	r6, #2
   b72cc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b72d0:	bf02      	ittt	eq
   b72d2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b72d6:	4313      	orreq	r3, r2
   b72d8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b72dc:	6863      	ldr	r3, [r4, #4]
   b72de:	f8d8 0000 	ldr.w	r0, [r8]
   b72e2:	1c5a      	adds	r2, r3, #1
   b72e4:	3302      	adds	r3, #2
   b72e6:	6062      	str	r2, [r4, #4]
   b72e8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b72ec:	f000 f80e 	bl	b730c <__retarget_lock_release_recursive>
   b72f0:	2000      	movs	r0, #0
   b72f2:	e7c6      	b.n	b7282 <__register_exitproc+0x3e>
   b72f4:	2003e7e8 	.word	0x2003e7e8
   b72f8:	2003e75c 	.word	0x2003e75c
   b72fc:	00000000 	.word	0x00000000
   b7300:	000b47bd 	.word	0x000b47bd
   b7304:	2003e680 	.word	0x2003e680

000b7308 <__retarget_lock_acquire_recursive>:
   b7308:	4770      	bx	lr

000b730a <__retarget_lock_release>:
   b730a:	4770      	bx	lr

000b730c <__retarget_lock_release_recursive>:
   b730c:	4770      	bx	lr

000b730e <link_code_end>:
	...

000b7310 <dynalib_user>:
   b7310:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b7320:	0000 0000 694c 6867 2074 6c5b 7875 3a5d     ....Light [lux]:
   b7330:	0020 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d      .--------------
   b7340:	2d2d 2d2d 5320 756f 646e 5b20 4264 5d61     ---- Sound [dBa]
   b7350:	203a 2d00 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     : .-------------
   b7360:	2d2d 2d2d 202d 2d2d 2d2d 2d2d 2d2d 2d2d     ----- ----------
   b7370:	2d2d 2d2d 2d2d 2d2d 4420 7369 6174 636e     -------- Distanc
   b7380:	2065 635b 5d6d 203a 0000 0000               e [cm]: ....

000b738c <_ZTVN5spark13EthernetClassE>:
	...
   b7394:	487b 000b 4871 000b 4867 000b 485d 000b     {H..qH..gH..]H..
   b73a4:	4851 000b 4845 000b 50f9 000b 5101 000b     QH..EH...P...Q..
   b73b4:	4839 000b 4831 000b 4827 000b 481d 000b     9H..1H..'H...H..
   b73c4:	5131 000b 616e 006e 6e69 0066 766f 0066     1Q..nan.inf.ovf.
   b73d4:	002e 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   b73e4:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   b73f4:	0065 0000                                   e...

000b73f8 <_ZTV9IPAddress>:
	...
   b7400:	4d41 000b 4d31 000b 4d33 000b               AM..1M..3M..

000b740c <_ZTV9USBSerial>:
	...
   b7414:	4e27 000b 4e8f 000b 4e65 000b 48e1 000b     'N...N..eN...H..
   b7424:	4e57 000b 4e29 000b 4e39 000b 4e89 000b     WN..)N..9N...N..
   b7434:	4e49 000b 4e21 000b                         IN..!N..

000b743c <_ZTV11USARTSerial>:
	...
   b7444:	4f29 000b 4f95 000b 4f6d 000b 48e1 000b     )O...O..mO...H..
   b7454:	4f3d 000b 4f59 000b 4f4b 000b 4f67 000b     =O..YO..KO..gO..
   b7464:	4f2b 000b 4f2f 000b                         +O../O..

000b746c <_ZTV7TwoWire>:
	...
   b7474:	4fcd 000b 5017 000b 4fef 000b 4fcf 000b     .O...P...O...O..
   b7484:	4ff7 000b 4fff 000b 5007 000b 500f 000b     .O...O...P...P..

000b7494 <_ZTVN5spark9WiFiClassE>:
	...
   b749c:	509b 000b 5091 000b 5087 000b 5049 000b     .P...P...P..IP..
   b74ac:	4bb3 000b 507b 000b 50f9 000b 5101 000b     .K..{P...P...Q..
   b74bc:	506f 000b 5067 000b 505d 000b 5053 000b     oP..gP..]P..SP..
   b74cc:	5131 000b                                   1Q..

000b74d0 <_ZTVN5spark12NetworkClassE>:
	...
   b74d8:	50b9 000b 50c3 000b 50cd 000b 50d7 000b     .P...P...P...P..
   b74e8:	50e1 000b 50ed 000b 50f9 000b 5101 000b     .P...P...P...Q..
   b74f8:	5109 000b 5115 000b 511d 000b 5127 000b     .Q...Q...Q..'Q..
   b7508:	5131 000b                                   1Q..

000b750c <_ZSt7nothrow>:
	...

000b7518 <TWO52>:
   b7518:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b7528:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b7538:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   b7548:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   b7558:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   b7568:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   b7578:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   b7588:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   b7598:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   b75a8:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   b75b8:	2e64 0063                                   d.c.

000b75bc <link_const_variable_data_end>:
   b75bc:	000b440d 	.word	0x000b440d
   b75c0:	000b4885 	.word	0x000b4885
   b75c4:	000b48ad 	.word	0x000b48ad
   b75c8:	000b48d1 	.word	0x000b48d1
   b75cc:	000b4bc1 	.word	0x000b4bc1
   b75d0:	000b4bd1 	.word	0x000b4bd1
   b75d4:	000b4bed 	.word	0x000b4bed
   b75d8:	000b50a5 	.word	0x000b50a5
   b75dc:	000b5209 	.word	0x000b5209
